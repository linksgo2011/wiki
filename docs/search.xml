<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[超实用的工具和网站收集]]></title>
      <url>/collections/tool-collections/</url>
      <content type="html"><![CDATA[<h2 id="流程图、思维导图"><a href="#流程图、思维导图" class="headerlink" title="流程图、思维导图"></a>流程图、思维导图</h2><p><a href="https://www.processon.com" target="_blank" rel="external">https://www.processon.com</a></p>
<p>可以绘制思维导图、流程图、ER图等</p>
<p><a href="https://coggle.it/" target="_blank" rel="external">https://coggle.it/</a></p>
<p>超漂亮的思维导图工具</p>
<p><img src="/collections/tool-collections/coggle.png" alt=""></p>
<p><a href="http://naotu.baidu.com/" target="_blank" rel="external">http://naotu.baidu.com/</a></p>
<p>百度脑图</p>
]]></content>
      
        <categories>
            
            <category> collections </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[QA in agile]]></title>
      <url>/qa/QA%20in%20agile/</url>
      <content type="html"><![CDATA[<h2 id="常用QA概念"><a href="#常用QA概念" class="headerlink" title="常用QA概念"></a>常用QA概念</h2><p>探索性测试:同时设计测试和执行测试。探索性测试有时候会与即兴测试（ad hoc testing）混淆。即兴测试通常是指临时准备的、即兴的Bug搜索测试过程。从定义可以看出，谁都可以做即兴测试。由Cem Kaner提出的探索性测试，相比即兴测试是一种精致的、有思想的过程。</p>
<p>测试金字塔: unit-&gt;service-&gt;UI, 伴随测试成本投入,收益减少。unit为测试性价比最高的方式<br>冒烟测试: sanity测试,快速验证应用是否能工作。<br>BDD测试: 基于业务的测试思想。<br>E2E测试: 端对端测试。<br>集成测试:<br>Functional: E2E测试。</p>
<h2 id="常用测试工具"><a href="#常用测试工具" class="headerlink" title="常用测试工具"></a>常用测试工具</h2><ul>
<li>selenium 可以驱动浏览器，模拟真实用户<br>-</li>
</ul>
<h2 id="Case-设计"><a href="#Case-设计" class="headerlink" title="Case 设计"></a>Case 设计</h2><p>A test case, is a set of test inputs, execution conditions, and expected results developed for a particular objective, such as to exercise a particular program path or to verify compliance with a specific requirement.</p>
<h3 id="Common-Methods-Black-box"><a href="#Common-Methods-Black-box" class="headerlink" title="Common Methods - Black box"></a>Common Methods - Black box</h3><ul>
<li>Boundary Value Analysis 边界值分析</li>
<li>Equivalence Partitioning 等价划分</li>
<li>Causal Diagram 因果图</li>
<li>Decision Table 判定表</li>
</ul>
<h3 id="Common-Methods-White-box"><a href="#Common-Methods-White-box" class="headerlink" title="Common Methods - White box"></a>Common Methods - White box</h3><ul>
<li>Logical coverage<ul>
<li>statement coverage</li>
<li>Branch coverage</li>
<li>Path coverage</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> qa </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 学习教程资源收集]]></title>
      <url>/java/Java%20tutorial%20collection/</url>
      <content type="html"><![CDATA[<h3 id="教程列表"><a href="#教程列表" class="headerlink" title="教程列表"></a>教程列表</h3><p>下列顺序可以作为学习路线图</p>
<ul>
<li>入门教程 <a href="http://www.runoob.com/java/java-tutorial.html" target="_blank" rel="external">http://www.runoob.com/java/java-tutorial.html</a></li>
<li>Servlet <a href="http://www.runoob.com/servlet/servlet-tutorial.html" target="_blank" rel="external">http://www.runoob.com/servlet/servlet-tutorial.html</a></li>
<li>JSP <a href="http://www.runoob.com/jsp/jsp-tutorial.html" target="_blank" rel="external">http://www.runoob.com/jsp/jsp-tutorial.html</a></li>
<li>Spring mvc<ul>
<li>张开涛 <a href="http://jinnianshilongnian.iteye.com/category/231099" target="_blank" rel="external">http://jinnianshilongnian.iteye.com/category/231099</a></li>
<li>传智播客视屏教程</li>
</ul>
</li>
<li><p>Maven <a href="https://www.lynda.com/Maven-tutorials/Multi-Module-Build-Automation-Maven/520530-2.html?srchtrk=index%3a1%0alinktypeid%3a2%0aq%3amaven+%0apage%3a1%0as%3arelevance%0asa%3atrue%0aproducttypeid%3a2" target="_blank" rel="external">https://www.lynda.com/Maven-tutorials/Multi-Module-Build-Automation-Maven/520530-2.html?srchtrk=index%3a1%0alinktypeid%3a2%0aq%3amaven+%0apage%3a1%0as%3arelevance%0asa%3atrue%0aproducttypeid%3a2</a></p>
</li>
<li><p>Mybatis</p>
</li>
<li>Hibernate</li>
</ul>
<h3 id="其他资料收集"><a href="#其他资料收集" class="headerlink" title="其他资料收集"></a>其他资料收集</h3><ul>
<li>一些Java基础例子 <a href="http://www.runoob.com/java/java-examples.html" target="_blank" rel="external">http://www.runoob.com/java/java-examples.html</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Tips to upgrade the relationship with colleagues]]></title>
      <url>/method/Way%20of%20working%20for%20team%20building/</url>
      <content type="html"><![CDATA[<h3 id="一些tips"><a href="#一些tips" class="headerlink" title="一些tips"></a>一些tips</h3><ul>
<li>关注人的感受, 多表达感谢, 不要直接批评</li>
</ul>
<h3 id="从Thoughtworks学到的"><a href="#从Thoughtworks学到的" class="headerlink" title="从Thoughtworks学到的"></a>从Thoughtworks学到的</h3><ul>
<li><p>Retro 回顾一段时间里的感受,然后在团队里面头脑风暴,使用sticker写出每个人的想法。使用well、less well、suggestion来分类,最后总结出actions。</p>
</li>
<li><p>Feedback meeting 互相给每个人Feedback, 直到Team中每个人都能收到Feedback</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> method </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Handover tips]]></title>
      <url>/method/Way%20of%20working%20for%20handover/</url>
      <content type="html"><![CDATA[<h4 id="What-we-can-do-fo-that"><a href="#What-we-can-do-fo-that" class="headerlink" title="What we can do fo that?"></a>What we can do fo that?</h4><ul>
<li>整理一个清单</li>
<li>建立一个文档去跟踪</li>
<li>安排一些conversation去移交</li>
<li>review 那些东西已经被确认接受</li>
<li>角色对角色, QA、DEV、BA分别处理</li>
<li>定义移交scope</li>
<li>定义deadline</li>
</ul>
]]></content>
      
        <categories>
            
            <category> method </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[AWS Certificate Manager 常见问题]]></title>
      <url>/aws/aws-certificate-manager-faqs/</url>
      <content type="html"><![CDATA[<h3 id="一般性问题"><a href="#一般性问题" class="headerlink" title="一般性问题"></a>一般性问题</h3><p>问：什么是 AWS Certificate Manager (ACM)？</p>
<p>AWS Certificate Manager 是一项服务，可帮助您轻松地预置、管理和部署用于 AWS 服务的安全套接字层/传输层安全性 (SSL/TLS) 证书。SSL/TLS 证书用于保护网络通信的安全并确立网站在 Internet 上的身份。使用 AWS Certificate Manager，您无需再为购买、上传和更新 SSL/TLS 证书而经历耗时的手动流程。利用 AWS Certificate Manager，您可以快速请求证书，在 AWS 资源 (如 Amazon API Gateway 上的 Elastic Load Balancer、Amazon CloudFront 分配或 API) 上部署该证书，并让 AWS Certificate Manager 处理证书更新事宜。通过 AWS Certificate Manager 预置的 SSL/TLS 证书可免费使用。您只需为您创建的用于运行应用程序的 AWS 资源付费。</p>
<p>问：什么是 SSL/TLS 证书？</p>
<p>SSL/TLS 证书使 Web 浏览器能够标识使用安全套接字层/传输层安全性 (SSL/TLS) 协议的网站并与之建立加密的网络连接。证书在名为公有密钥基础设施 (PKI) 的加密系统中使用。通过 PKI，在双方都信任同一个第三方 (称为证书颁发机构) 的情况下，一方可以为使用证书的另一方确立身份。ACM 用户指南、概念和术语提供了其他背景信息和定义。</p>
<p>问：AWS Certificate Manager 有什么作用？</p>
<p>您可以请求并预置 SSL/TLS 证书，然后为使用 Elastic Load Balancing、Amazon CloudFront 或 Amazon API Gateway 的站点和应用程序部署这些证书。验证请求域的所有权并获得颁发的证书之后，您可以从 AWS 管理控制台的下拉列表中选择 SSL/TLS 证书并部署该证书。或者，您也可以使用 AWS 命令行界面 (CLI) 命令或 API 调用将 ACM 提供的证书部署到 AWS 资源。ACM 会为您管理证书更新和证书部署事宜。</p>
<p>问：使用 AWS Certificate Manager 有哪些优势？</p>
<p>借助 ACM，您可以更加轻松地为 AWS 平台上的网站或应用程序启用 SSL/TLS。ACM 免除了过去与使用 SSL/TLS 和管理 SSL/TLS 证书相关的大量手动流程。ACM 还可管理证书更新，从而帮助您避免因证书配置错误、撤销或过期而导致的停机。您可获得 SSL/TLS 保护并轻松管理证书。启用 SSL/TLS 有助于提高站点的搜索排名，并可帮助您满足传输数据加密的法规合规性要求。</p>
<p>当您使用 ACM 时，它会应用强加密和密钥管理最佳实践来确保证书私有密钥的安全。借助 ACM，您可以使用 AWS 管理控制台、AWS CLI 或 AWS Certificate Manager API 集中管理 AWS Certificate Manager 在 AWS 区域内提供的所有 SSL/TLS 证书。AWS Certificate Manager 集成了其他 AWS 服务，因此您可以请求 SSL/TLS 证书，然后通过 AWS 管理控制台、AWS CLI 命令或 API 调用为 Elastic Load Balancing 负载均衡器或 Amazon CloudFront 分配预置证书。</p>
<p>问：如何开始使用 ACM？</p>
<p>要开始使用 AWS Certificate Manager，请导航到 AWS 管理控制台中的“Certificate Manager”，然后使用向导输入站点的名称以请求 SSL/TLS 证书。您也可以使用 AWS CLI 或 API 请求证书。在 ACM 获得域所有者的批准并且系统颁发 SSL/TLS 证书后，您就可以将其用于与 ACM 集成的其他 AWS 资源了。您只需从 AWS 管理控制台的下拉列表中选择您要部署的 SSL/TLS 证书即可。或者，您也可以执行一个 AWS CLI 命令或调用一个 AWS API，将该证书与您的资源关联起来。AWS Certificate Manager 随后会将该证书部署到您选择的资源。有关请求和使用 AWS Certificate Manager 所提供证书的更多信息，请参阅《AWS Certificate Manager 用户指南》中的入门。</p>
<p>问：ACM 提供哪种类型的证书？</p>
<p>ACM 提供域验证 (DV) 证书，供终止 SSL/TLS 的网站和应用程序使用。有关 ACM 提供的证书的更多详细信息，请参阅证书特点。</p>
<p>问：我可以将 ACM 提供的证书用于哪些 AWS 服务？</p>
<p>您可以将 ACM 用于以下 AWS 服务：<br>• Elastic Load Balancing – 请参阅 Elastic Load Balancing 文档<br>• Amazon CloudFront – 请参阅 CloudFront 文档<br>• Amazon API Gateway – 请参阅 API Gateway 文档<br>• AWS Elastic Beanstalk – 请参阅 AWS Elastic Beanstalk 文档<br>问：ACM 提供的证书是否适合政府部门？</p>
<p>ACM 证书可能适合部分政府部门，而并非对所有政府部门均适合。请查看当地法律、规则和法规，以确定某个 ACM 证书是否适合。如有任何疑问，请访问 AWS Support 中心并创建案例。</p>
<p>问：ACM 在哪些区域提供？</p>
<p>请访问 AWS 全球基础设施页面，了解目前提供 AWS 服务的区域。要将 ACM 证书与 Amazon CloudFront 配合使用，您必须在美国东部 (弗吉尼亚北部) 区域申请或导入该证书。该区域内与 CloudFront 分配关联的 ACM 证书将被分发到为该分配配置的所有地理位置。</p>
<p>问：我是否可以在多个 AWS 区域使用同一证书？</p>
<p>这要取决于您目前使用的是 Elastic Load Balancing 还是 Amazon CloudFront。要在不同区域内针对同一站点 (具有相同的完全限定域名 (FQDN) 或 FQDN 集) 将某个证书与 Elastic Load Balancing 配合使用，您需要为计划使用证书的每个区域申请新证书。请注意，还需要针对新区域重新验证证书中的每个名称。要将 ACM 证书与 Amazon CloudFront 配合使用，您必须在美国东部 (弗吉尼亚北部) 区域申请该证书。该区域内与 CloudFront 分配关联的 ACM 证书将被分发到为该分配配置的所有地理位置。</p>
<p>问：是否可以在区域之间复制证书？</p>
<p>目前不可以。</p>
<p>问：如果同一域名我已拥有来自其他提供商的证书，我是否还能够使用 ACM 配置证书？</p>
<p>是。<br>问：我是否可以在 Amazon EC2 实例或自己的服务器上使用证书？</p>
<p>不可以。目前，ACM 提供的证书只能用于特定 AWS 服务。请参阅我可以将 ACM 提供的证书用于哪些 AWS 服务？</p>
<p>问：我能够通过 ACM 预置的证书数量是否有限制？</p>
<p>默认情况下，您可以在每个区域中为每个账户预置多达 100 个证书。通过 ACM 预置的每个证书最多可以拥有 10 个完全限定域名。您可以访问 AWS Support 中心请求增加上限。有关更多详细信息，请参阅 AWS 文档。</p>
<h3 id="预置证书"><a href="#预置证书" class="headerlink" title="预置证书"></a>预置证书</h3><p>问：如何预置 ACM 提供的证书？</p>
<p>您可以使用 AWS 管理控制台、AWS CLI 或 ACM API/SDK 进行预置。要使用 AWS 管理控制台，请导航到控制台的 ACM 部分，选择“Request a Certificate”，输入站点的域名，然后按照屏幕上的说明完成请求。如果用户可以通过其他名称访问您的站点，则可以在请求中添加其他域名。域的所有者会收到一封关于请求批准颁发证书的电子邮件。在请求中的所有域名获得域所有者的批准后，系统将颁发证书并准备好预置证书以用于其他 AWS 服务，如 Elastic Load Balancing 或 Amazon CloudFront。有关详细信息，请参阅 ACM 文档。<br>问：颁发证书需要多长时间？</p>
<p>获得域的所有者或域所有者授权代表的批准后，系统通常会在几分钟内颁发证书，但也可能需要更长时间。有关更多详细信息，请参阅如何预置 ACM 提供的证书？<br>问：请求证书时会发生什么情况？</p>
<p>为了验证您对请求的证书中包括的域名或名称的控制权，系统会针对证书请求中的每个域名向注册域的所有者发送电子邮件。在域的所有者或授权代表批准证书请求之前，证书请求将处于待验证状态。域的所有者或授权代表 (审批者) 可以按照电子邮件中的说明批准证书请求。说明将指引审批者导航到审批网站，单击电子邮件中的链接或将电子邮件中的链接粘贴到浏览器中，以导航到审批网站。审批者确认与证书请求相关的信息，如域名、证书 ID (ARN) 以及发出请求的 AWS 账户 ID，如果信息准确无误，则批准请求。在证书请求中的所有域名获得批准后，系统通常会在几分钟内颁发证书，届时证书请求的状态将变为已颁发。获得颁发的证书后，您便可以开始将其用于其他 AWS 服务。<br>问：审批请求要发送到哪个电子邮件地址？<br>当您请求证书时，系统会针对证书请求中的每个域名使用 WHOIS 查找来检索该域的联系人信息。电子邮件会发送至针对该域列出的域注册人、管理联系人和技术联系人。电子邮件还会同时发送至域的五个特定电子邮件地址，即在您请求的域名前加上 admin@、administrator@、hostmaster@、webmaster@ 和 postmaster@ 生成的五个地址。例如，如果您为 server.example.com 请求证书，系统将使用针对 example.com 域，外加 admin@server.example.com、administrator@server.example.com、hostmaster@server.example.com、postmaster@server.example.com 和 webmaster@server.example.com 的 WHOIS 查询返回的联系人信息将电子邮件发送至域注册人、技术联系人和管理联系人。</p>
<p>针对以“www”开头的域名或以星号 (*) 开头的通配符名称，这五个特定电子邮件地址采用不同的构造方式。ACM 会删除前导的“www”或星号，而电子邮件则被发送到通过在域名其余部分之前加上 admin@、administrator@、hostmaster@、postmaster@ 和 webmaster@ 来构造的管理员地址。例如，如果您为 www.example.com 请求证书，则电子邮件被发送到 WHOIS 联系人 (如前所述) 以及 admin@example.com，而不是 admin@www.example.com。其余四个特定电子邮件地址也采用类似的方式构造。</p>
<p>请求证书之后，您可以使用 ACM 控制台、AWS CLI 或 API 查看针对各个域发送的电子邮件的收件方电子邮件地址列表。<br>问：我是否可以配置接收证书审批请求的电子邮件地址？</p>
<p>不可以，不过您可以配置用于接收验证电子邮件的基础域名。基础域名必须是证书请求中域名的超级域。例如，如果您想为 server.domain.example.com 请求证书，但希望将审批电子邮件发送至 admin@domain.example.com，则可以使用 AWS API 或 API 实现这一目的。有关更多详细信息，请参阅 ACM CLI 参考和 ACM API 参考。<br>问：我是否可以使用具有代理联系人信息 (例如 Privacy Guard 或 WhoisGuard) 的域？</p>
<p>可以；不过，电子邮件的发送可能会因为代理而延迟。通过代理发送的电子邮件可能会进入您的垃圾邮件文件夹。有关故障排除建议，请参阅 ACM 用户指南。</p>
<p>问：ACM 是否可以通过我的 AWS 账户的技术联系人验证我的身份？</p>
<p>不可以。验证域所有者身份的流程和策略非常严格，并且由为公开可信的证书颁发机构设置策略标准的 CA/Browser Forum 决定。要了解详情，请参阅 Amazon Trust Services 存储库中最新的“Amazon Trust Services 认证规范声明”。<br>问：我的证书请求状态为什么是“待验证”？</p>
<p>已发出请求但未经过批准的证书的状态为待验证。域的所有者或授权代表必须批准证书请求，然后系统才能颁发证书。</p>
<p>问：如果我没有收到验证和批准电子邮件，该怎么做？</p>
<p>有关故障排除建议，请参阅 ACM 用户指南。</p>
<p>问：我的证书请求状态为什么显示为“失败”？</p>
<p>有多种原因会导致域的验证控制流程失败，包括但不限于：网络资源的网址列表中包括的域被认定为包含恶意软件或欺诈性内容。要确定申请失败的原因，请访问 ACM 故障排除指南。</p>
<p>问：我的证书请求状态为什么显示为“验证超时”？</p>
<p>如果 ACM 证书请求在 72 小时内没有接受验证，则被视为超时。有关故障排除建议，请参阅 ACM 用户指南。</p>
<p>问：是否有其他方法来验证域或审批支持的证书？</p>
<p>目前没有。</p>
<h3 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h3><p>问：浏览器、操作系统和移动设备是否信任 ACM 提供的证书？</p>
<p>目前的绝大部分浏览器、操作系统和移动设备都信任 ACM 提供的证书。ACM 提供的证书在浏览器和操作系统中的普及率高达 99%，包括 Windows XP SP3 和 Java 6 及更高版本。</p>
<p>问：如何确认我的浏览器是否信任 ACM 提供的证书？</p>
<p>信任 ACM 提供的证书的浏览器会显示一个锁形图标，并且在连接到使用 ACM 基于 SSL/TLS 提供的证书 (例如使用 HTTPS) 的站点时会显示不要颁发证书的警告。</p>
<p>ACM 提供的证书由亚马逊的证书颁发机构 (CA) 进行验证。任何包含 Amazon Root CA 1、Starfield Services Root Certificate Authority – G2 或 Starfield Class 2 Certification Authority 的浏览器、应用程序和操作系统均会信任由 ACM 提供的证书。</p>
<p>问：ACM 是否可以提供包括多个域名的证书？</p>
<p>可以。每个证书必须包括至少一个域名，并且您可以根据需要在证书中添加更多域名。例如，您可以将域名“www.example.net”添加到用于“www.example.com”的证书，前提是用户通过这两个域名都可以访问您的站点。对于证书请求中包括的所有名称，您必须具有所有权和控制权。</p>
<p>问：什么是通配符域名？</p>
<p>通配符域名匹配域中的所有第一级子域或主机名。第一级子域是一个不包含句号 (圆点) 的域名标签。例如，您可以使用名称“*.example.com”保护 www.example.com、images.example.com 以及以 .example.com 结尾的任何其他主机名或第一级子域。有关更多详细信息，请参阅 ACM 用户指南。</p>
<p>问：ACM 是否可以提供带有通配符域名的证书？</p>
<p>可以。</p>
<p>问：ACM 是否提供组织验证 (OV) 或扩展验证 (EV) 证书？</p>
<p>目前不提供。</p>
<p>问：ACM 是否为网站提供除 SSL/TLS 以外的其他类型的证书？</p>
<p>目前不提供。</p>
<p>问：我是否可以使用 ACM 提供的证书进行代码签名或电子邮件加密？</p>
<p>不可以。</p>
<p>问：ACM 是否提供用于签名和加密电子邮件的证书 (S/MIME 证书) ？</p>
<p>目前不提供。</p>
<p>问：ACM 提供的证书使用哪些算法？</p>
<p>ACM 证书使用的是采用 2048 位模数和 SHA-256 的 RSA 密钥。</p>
<p>问：ACM 是否支持椭圆曲线 (ECDSA) 证书？</p>
<p>目前不支持。<br>问：亚马逊在哪里介绍其关于颁发证书的策略和规范？</p>
<p>“Amazon Trust Services 证书策略”和“Amazon Trust Services 证书规范声明”文档中提供了相关信息。有关最新版本，请参阅 Amazon Trust Services 存储库。</p>
<p>问：如何撤销证书？</p>
<p>您可以访问 AWS Support 中心并创建案例，以请求 ACM 撤销证书。 </p>
<p>问：如果证书中的信息发生更改，我该如何通知 AWS？</p>
<p>您可以发送电子邮件至 validation-questions[at]amazon.com，通知 AWS。</p>
<p> </p>
<h3 id="私有密钥保护"><a href="#私有密钥保护" class="headerlink" title="私有密钥保护"></a>私有密钥保护</h3><p>问：ACM 提供的证书的私有密钥是如何管理的？</p>
<p>系统会为 ACM 提供的每个证书创建一个键前缀。AWS Certificate Manager 可保护并管理用于 SSL/TLS 证书的私有密钥。ACM 会运用强加密和密钥管理最佳实践来保护并存储私有密钥。</p>
<p>问：ACM 是否可以跨 AWS 区域复制证书？</p>
<p>不可以。每个 ACM 证书私有密钥均存储在您请求该证书的区域。例如，当您在弗吉尼亚北部区域获得新的证书后，ACM 会将私有密钥存储在弗吉尼亚北部区域。仅当 ACM 证书与 CloudFront 分配关联时，该证书才能跨区域复制。在这种情况下，CloudFront 会将 ACM 证书分配到为您的分配配置的地理位置。</p>
<p>问：我是否可以对证书私有密钥的使用进行审核？</p>
<p>可以。您可以使用 AWS CloudTrail 查看日志，从而了解证书私有密钥的使用时间。</p>
<h3 id="记账功能"><a href="#记账功能" class="headerlink" title="记账功能"></a>记账功能</h3><p>问：ACM 证书的使用如何收费和计费？</p>
<p>通过 AWS Certificate Manager 预置、管理和部署的 SSL/TLS 证书可免费使用。您只需针对为运行应用程序而创建的 AWS 资源付费，例如 Elastic Load Balancing 负载均衡器或 Amazon CloudFront 分配。</p>
<h3 id="详细信息"><a href="#详细信息" class="headerlink" title="详细信息"></a>详细信息</h3><p>问：我是否可以将同一证书用于多个 Elastic Load Balancing 负载均衡器和多个 CloudFront 分配？</p>
<p>可以。</p>
<p>问：我是否可以将证书用于没有公共 Internet 访问权限的内部 Elastic Load Balancing 负载均衡器？</p>
<p>可以。请参阅托管更新与部署，详细了解 ACM 如何处理无法通过公共 Internet 访问的证书的更新问题。</p>
<p>问：用于 www.example.com 的证书是否也能用于 example.com？</p>
<p>不可以。如果您希望自己的站点能够被两个域名 (www.example.com 和 example.com) 引用，则必须请求包含这两个名称的证书。</p>
<p>问：我是否可以导入第三方证书并将其用于 AWS 服务？</p>
<p>可以。如果想要将第三方证书与 Amazon CloudFront 或 Elastic Load Balancing 配合使用，您可以使用 AWS 管理控制台、AWS CLI 或 AWS Certificate Manager API 将该证书导入 ACM。ACM 不会处理已导入证书的更新流程。您可以使用 AWS 管理控制台监控已导入证书的到期日期，并导入新的第三方证书以便替换即将过期的证书。</p>
<p>问：ACM 提供的证书的有效期是多久？</p>
<p>目前，ACM 提供的证书的有效期为 13 个月。</p>
<p>问：ACM 如何帮助我的企业或组织满足合规性要求？</p>
<p>使用 ACM 可以轻松确保连接的安全性 (这也是 PCI、 FedRAMP 以及 HIPAA 等众多合规性计划的共同要求)，从而帮助您遵守法规要求。有关合规性的具体信息，请参阅 <a href="http://aws.amazon.com/compliance。" target="_blank" rel="external">http://aws.amazon.com/compliance。</a></p>
<p>问：ACM 是否有服务等级协议 (SLA)？</p>
<p>目前没有。</p>
<p>问：ACM 是否允许域名 (也称为国际化域名 (IDN)) 中包含本地语言字符？</p>
<p>ACM 不支持采用 Unicode 编码的本地语言字符；不过，ACM 支持域名使用 ASCII 编码的本地语言字符。</p>
<p>问：ACM 支持哪些域名标签格式？</p>
<p>ACM 仅支持采用 UTF-8 编码的 ASCII 字符，包括包含“xn-”的标签 (通常称为域名的 Punycode)。ACM 不支持域名中使用 Unicode 输入 (Unicode 标签)。</p>
<p>问：ACM 是否会提供一个可以在我的网站上显示的安全站点签章或信任徽标？</p>
<p>不会。如果您想使用站点签章，您可以从第三方供应商处获得。我们建议选择可评估和维护您站点和/或业务实践的安全性的供应商。</p>
<p>问：亚马逊是否允许将其商标或徽标用作证书徽章、站点签章或信任徽标？</p>
<p>不允许。此类签章和徽章可复制到不使用 ACM 服务的站点，但不能假借亚马逊名号建立信任。为保护我们的客户和亚马逊的声誉，我们不允许以这种方式使用我们的徽标。</p>
<h3 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h3><p>问：AWS CloudTrail 提供哪些日志记录信息？</p>
<p>您可以确定哪些用户和账户为支持 AWS CloudTrail 的服务调用了 AWS API、发出调用的源 IP 地址以及调用发生的时间。例如，您可以确定哪些用户为关联 ACM 提供的证书与 Elastic Load Balancer 调用了 API，以及 Elastic Load Balancing 服务使用 KMS API 调用加密密钥的时间。</p>
<h3 id="托管更新与部署"><a href="#托管更新与部署" class="headerlink" title="托管更新与部署"></a>托管更新与部署</h3><p>问：什么是 ACM 托管更新与部署？</p>
<p>ACM 托管更新与部署可以管理由 ACM 提供的 SSL/TLS 证书的更新流程并部署更新后的证书。</p>
<p>问：使用 ACM 托管更新与部署有哪些优势？</p>
<p>ACM 可帮助您管理 SSL/TLS 证书的更新和部署。与容易出错的手动流程相比，ACM 能够让安全 Web 服务或应用程序的 SSL/TLS 配置和维护具有更高的操作可靠性。托管更新与部署有助于您避免因证书过期导致的停机。ACM 托管更新与部署不需要您在自己的站点安装或维护软件客户端或代理。ACM 会作为一种服务运行，并且与其他 AWS 服务集成。这意味着，您可以使用 AWS 管理控制台、AWS CLI 或 API 在 AWS 平台上集中管理和部署证书。</p>
<p>问：哪些证书可以自动更新和部署？</p>
<p>ACM 能够更新并部署 ACM 提供的证书，而无需域的所有者进行任何其他审批或介入。如果证书必须经过附加审批才能更新，ACM 会基于证书中的所有域名向相应域的所有者提出审批请求，以此管理更新流程。在证书中的所有域名均获得批准后，ACM 会更新证书并自动将其部署到您的 AWS 资源。如果域的所有者没有批准证书，我们会通知您 (AWS 账户所有者)。为了提高 ACM 自动更新和部署 ACM 提供的证书的能力，请确保证书正在使用，且证书中包括的所有域名均能解析至您的站点，并可通过 Internet 访问。<br>问：ACM 何时更新证书？</p>
<p>ACM 最早可在证书过期前 60 天开始执行更新流程。目前，ACM 提供的证书的验证期限是 13 个月。请参阅 ACM 用户指南，了解有关托管续订的更多信息。</p>
<p>问：在更新证书和部署新证书之前，我是否会收到通知？</p>
<p>不会。ACM 可能会在不提前通知的情况下更新证书或更新密钥，并更换旧的证书。</p>
<p>问：ACM 是否可以更新包含裸域 (也称为顶级域名，例如“example.com”) 的证书？</p>
<p>为了提高 ACM 自动更新和部署包含裸域的证书的能力，请确保裸域的 DNS 查找能够解析至与该证书关联的 AWS 资源。将裸域解析到 AWS 资源可能非常困难，除非您使用 Route 53 或支持别名资源记录 (或同类记录) 的其他 DNS 提供商，从而将裸域映射到 AWS 资源。有关更多信息，请参阅 Route 53 开发人员指南。</p>
<p>问：在 ACM 部署更新后的证书时，我的站点是否会断开现有连接？</p>
<p>不会。在部署新证书之后建立的连接将使用新证书，而现有连接不会受到影响。</p>
]]></content>
      
        <categories>
            
            <category> aws </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[AWS Certificate Manager]]></title>
      <url>/aws/AWS%20Certificate%20Manager/</url>
      <content type="html"><![CDATA[<p>official website: <a href="https://aws.amazon.com/certificate-manager/" target="_blank" rel="external">https://aws.amazon.com/certificate-manager/</a></p>
<p>AWS Certificate Manager is a service that lets you easily provision, manage, and deploy Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificates for use with AWS services. SSL/TLS certificates are used to secure network communications and establish the identity of websites over the Internet. AWS Certificate Manager removes the time-consuming manual process of purchasing, uploading, and renewing SSL/TLS certificates. With AWS Certificate Manager, you can quickly request a certificate, deploy it on AWS resources such as Elastic Load Balancers, Amazon CloudFront distributions, and APIs on API Gateway, and let AWS Certificate Manager handle certificate renewals. SSL/TLS certificates provisioned through AWS Certificate Manager are free. You pay only for the AWS resources you create to run your application.</p>
<h2 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits"></a>Benefits</h2><ul>
<li>Managed Certificate Renewal</li>
<li>Centrally Manage Certificates on the AWS Cloud</li>
<li>Get Certificates Easily</li>
<li>Free for the Certificates</li>
</ul>
<h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><ul>
<li>if support session stick answer:</li>
</ul>
<h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><p>ACM 支持从AWS上请求一个由Amazon的证书和自己上传的证书。</p>
<h3 id="使用Amazon的证书"><a href="#使用Amazon的证书" class="headerlink" title="使用Amazon的证书"></a>使用Amazon的证书</h3><p>Pros</p>
<ul>
<li>免费</li>
<li>支持自动续期</li>
<li>支持绝大多客户端</li>
<li>使用HTTPS协议,因此可以stick session</li>
<li>自动续期</li>
</ul>
<p>Cons</p>
<ul>
<li>需要validate domain的拥有者,因此不能在内网中使用</li>
<li>只能在ELB中使用不能在EC2中</li>
<li>数量受限</li>
</ul>
<h3 id="使用导入自有证书"><a href="#使用导入自有证书" class="headerlink" title="使用导入自有证书"></a>使用导入自有证书</h3><p>Pros</p>
<ul>
<li>可以使用自定义证书</li>
<li>数量不受限</li>
<li>可以在内网使用</li>
</ul>
<p>Cons</p>
<ul>
<li>需要自己管理续期问题</li>
<li>需要使用API更新证书</li>
</ul>
<h2 id="更新ELB证书的方法"><a href="#更新ELB证书的方法" class="headerlink" title="更新ELB证书的方法"></a>更新ELB证书的方法</h2><ul>
<li>使用AWS API或者命令行</li>
<li>使用ansible的一些role来执行 <a href="http://docs.ansible.com/ansible/ec2_elb_lb_module.html#options" target="_blank" rel="external">http://docs.ansible.com/ansible/ec2_elb_lb_module.html#options</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> aws </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java web project 概览]]></title>
      <url>/java/java-web-project-overview/</url>
      <content type="html"><![CDATA[<ol>
<li><p>Java 基础重点回顾</p>
<ul>
<li>注解</li>
<li>异常</li>
</ul>
</li>
<li><p>J2EE 开发常用版本</p>
<ul>
<li>Jar 引入Tomcat的J2EE的实现</li>
<li>J2EE 1.7</li>
<li>JDK 8</li>
<li>Tomcat 1.7</li>
</ul>
</li>
<li><p>Spring framework</p>
<ul>
<li>Beans</li>
<li>周边生态</li>
<li>项目配置 web.xml</li>
<li>页面渲染<ul>
<li>JSP</li>
<li>Velocity</li>
<li>FreeMaker</li>
<li>themleaf</li>
</ul>
</li>
</ul>
</li>
<li><p>ORM</p>
<ul>
<li>Mybatis<ul>
<li>DAO 接口<ol>
<li>DTO</li>
<li>PO</li>
</ol>
</li>
<li>Domain 或者 Model  实体类和数据库对应</li>
<li>Mapper 使用xml实现和数据库</li>
</ul>
</li>
<li>Hibernate</li>
</ul>
</li>
<li><p>Validation</p>
<ul>
<li>Hibernate Validation 实现</li>
<li>Java EE Validation 实现</li>
</ul>
</li>
<li><p>授权验证/登录</p>
<ol>
<li>intercept 实现</li>
<li>sharon</li>
<li>Spring security</li>
</ol>
</li>
<li><p>部署</p>
<ol>
<li>tomcat 1.7</li>
</ol>
</li>
<li><p>日志</p>
<ol>
<li>log4J</li>
<li>self4J</li>
</ol>
</li>
<li><p>构建工具</p>
<ol>
<li>Maven</li>
<li>Gradle</li>
</ol>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[一个好的项目需要哪些周边生态?]]></title>
      <url>/agile/ecosystem-for-project/</url>
      <content type="html"><![CDATA[<p>一个项目可以做的很完善,也可以做的很简单,这篇文章就是总结了一个清单,来讨论我们在一个敏捷项目中可以做的比较完善的东西,比如CI/CD</p>
<h2 id="质量内建"><a href="#质量内建" class="headerlink" title="质量内建"></a>质量内建</h2><ol>
<li>Check style - 代码风格检查</li>
<li>Test coverage - 测试覆盖率</li>
<li>fortify - Java代码静态分析</li>
<li>TDD - 测试驱动开发</li>
<li>Eslint - 前端代码检查</li>
</ol>
<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><ol>
<li>Penetration - 渗透测试</li>
</ol>
<h2 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h2><ol>
<li>CI/CD 持续部署</li>
<li>Git Flow - 基于git的团队协作方式</li>
<li>Retro - 敏捷中反思项目的会议</li>
</ol>
<h2 id="监控恢复"><a href="#监控恢复" class="headerlink" title="监控恢复"></a>监控恢复</h2><ol>
<li>monitoring<ul>
<li>Ahportal - 一种监控的实现方式</li>
</ul>
</li>
<li>DR - 灾难恢复方案</li>
</ol>
<h2 id="度量"><a href="#度量" class="headerlink" title="度量"></a>度量</h2><ol>
<li>CPU、内存、磁盘使用率</li>
<li>Max request量</li>
<li>AB 测试</li>
</ol>
<h2 id="环境管理"><a href="#环境管理" class="headerlink" title="环境管理"></a>环境管理</h2><ol>
<li>infrastructure as code - 根据项目代码创建基础设施</li>
<li>immutable infrastructure - 每次部署创建新的服务器</li>
<li>DB migration</li>
</ol>
<h2 id="分布式解耦"><a href="#分布式解耦" class="headerlink" title="分布式解耦"></a>分布式解耦</h2><ol>
<li>micro-service 微服务</li>
<li>SPA Project - 前后端分离</li>
</ol>
<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><ol>
<li>Blue-Green - 蓝绿部署</li>
<li>Gray - 灰度发布</li>
</ol>
]]></content>
      
        <categories>
            
            <category> agile </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java object clone]]></title>
      <url>/java/java-object-clone/</url>
      <content type="html"><![CDATA[<p>Java变量赋值对于简单变量来说没有什么特别的,对于对象来说有几种情况,</p>
<ul>
<li>shallow 赋值</li>
<li>深拷贝</li>
<li>克隆</li>
</ul>
<h4 id="shallow-赋值"><a href="#shallow-赋值" class="headerlink" title="shallow 赋值"></a>shallow 赋值</h4><p>这种赋值情况为共享内存空间,多个变量指向同一个地址空间</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Object obj1 = <span class="keyword">new</span> Object();</div><div class="line">Object obj2 = obj1;</div></pre></td></tr></table></figure>
<p>这里的obj1 和 obj2 共享内存空间, 修改其中一个会导致另外一个对象发生变化。</p>
<h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>递归复制对象中所有的成员变量</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Object obj1 = <span class="keyword">new</span> Object();</div><div class="line">obj1.a = <span class="number">1</span>;</div><div class="line"></div><div class="line">Object obj2 = <span class="keyword">new</span> Object();</div><div class="line">obj2.a = obj1.a;</div></pre></td></tr></table></figure>
<h4 id="对象克隆"><a href="#对象克隆" class="headerlink" title="对象克隆"></a>对象克隆</h4><p>使用对象的clone方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Person p = <span class="keyword">new</span> Person(<span class="number">23</span>, <span class="string">"zhang"</span>);</div><div class="line">Person p1 = (Person) p.clone();</div><div class="line"></div><div class="line">System.out.println(p);</div><div class="line">System.out.println(p1);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[理解 java exception]]></title>
      <url>/java/java-exception/</url>
      <content type="html"><![CDATA[<h4 id="什么是异常和错误"><a href="#什么是异常和错误" class="headerlink" title="什么是异常和错误"></a>什么是异常和错误</h4><p>异常和错误都会阻止当前方法或作用域继续执行,但是异常最大的特点是可以被handle,<br>这是异常和错误最大的区别。</p>
<p>异常(exception)的例子:</p>
<ul>
<li>数据库链接失败</li>
<li>网络中断</li>
</ul>
<p>错误(errors)的例子:</p>
<ul>
<li>内存溢出</li>
<li>CPU超时</li>
</ul>
<p>异常可以被捕获然后进行处理,比如渲染错误页面。错误会导致程序直接退出或崩溃。</p>
<h4 id="Java中的Exception"><a href="#Java中的Exception" class="headerlink" title="Java中的Exception"></a>Java中的Exception</h4><p>Throwable 类是 Java 语言中所有错误或异常的超类（这就是一切皆可抛的东西）。它有两个子类：Error和Exception。</p>
<p>Error：用于指示合理的应用程序不应该试图捕获的严重问题。这种情况是很大的问题，大到你不能处理了，所以听之任之就行了，你不用管它。比如说VirtualMachineError：当 Java 虚拟机崩溃或用尽了它继续操作所需的资源时，抛出该错误。好吧，就算这个异常的存在了，那么应该何时，如何处理它呢？？交给JVM吧，没有比它更专业的了。</p>
<p>Exception：它指出了合理的应用程序想要捕获的条件。Exception又分为两类：一种是CheckedException，一种是UncheckedException。这两种Exception的区别主要是CheckedException需要用try…catch…显示的捕获，而UncheckedException不需要捕获。通常UncheckedException又叫做RuntimeException。《effective java》指出：对于可恢复的条件使用被检查的异常（CheckedException），对于程序错误（言外之意不可恢复，大错已经酿成）使用运行时异常（RuntimeException）。</p>
<p>常见的RuntimeExcepiton有IllegalArgumentException、IllegalStateException、NullPointerException、IndexOutOfBoundsException</p>
<h4 id="异常的捕获"><a href="#异常的捕获" class="headerlink" title="异常的捕获"></a>异常的捕获</h4><p>一个数组越界的例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    System.out.println(ints[<span class="number">4</span>]);</div><div class="line">    System.out.println(<span class="string">"是否还能执行"</span>);<span class="comment">// 发生异常以后，后面的代码不能被执行</span></div><div class="line">&#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</div><div class="line">    System.out.println(<span class="string">"数组越界错误"</span>);</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"异常出现后"</span>);</div></pre></td></tr></table></figure></p>
<p><strong>catch 规则: 可以使用多个catch 一旦捕获到的类型同样的或者它的父类就停止捕获。</strong><br>根据这个经验我们都需要把特定的一样类放到前面,最后一个catch用一个基本类型来捕获。</p>
<p>比如 IOException 是FileNotFoundException 的父类,如果FileNotFoundException产生但是产生了其他<br>IOException的异常</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFile</span><span class="params">()</span> </span>&#123;</div><div class="line">    BufferedReader reader = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(</div><div class="line">                    <span class="keyword">new</span> FileInputStream(<span class="string">"file"</span>)));</div><div class="line">            <span class="comment">// do some other work</span></div><div class="line"></div><div class="line">            <span class="comment">// close reader</span></div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            reader.close();</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="异常链"><a href="#异常链" class="headerlink" title="异常链"></a>异常链</h4><p>丢出新的异常时避免丢失旧的异常,需要把旧的异常放入新的异常链中</p>
<p>c.initCause(e);</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NeverCaught</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> ExceptionB</span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionB(<span class="string">"exception b"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> <span class="keyword">throws</span> ExceptionC </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            f();</div><div class="line">        &#125; <span class="keyword">catch</span> (ExceptionB e) &#123;</div><div class="line">            ExceptionC c = <span class="keyword">new</span> ExceptionC(<span class="string">"exception a"</span>);</div><div class="line">            <span class="comment">//异常连</span></div><div class="line">            c.initCause(e);</div><div class="line">            <span class="keyword">throw</span> c;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                g();</div><div class="line">            &#125; <span class="keyword">catch</span> (ExceptionC e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">exception.ExceptionC</div><div class="line">at exception.NeverCaught.g(NeverCaught.java:12)</div><div class="line">at exception.NeverCaught.main(NeverCaught.java:21)</div><div class="line">Caused by: exception.ExceptionB</div><div class="line">at exception.NeverCaught.f(NeverCaught.java:5)</div><div class="line">at exception.NeverCaught.g(NeverCaught.java:10)</div><div class="line">... 1 more</div><div class="line">*/</div></pre></td></tr></table></figure>
<h4 id="运行时异常和检查异常"><a href="#运行时异常和检查异常" class="headerlink" title="运行时异常和检查异常"></a>运行时异常和检查异常</h4><p>检查异常:编译时期比如处理的异常,比如FileNotFoundException,<br>比如使用try catch捕获。</p>
<p>运行时异常:可以不用处理,最终jvm会处理的异常。比如NullPointerException</p>
<h4 id="throw、throws"><a href="#throw、throws" class="headerlink" title="throw、throws"></a>throw、throws</h4><p>throws: 当我们遇到检查异常时,如果不想在方法内处理,可以加上throws关键字,然上一级方法调用者<br>检查,throws会抛出所有检查异常。</p>
<p>throw:在方法内部抛出一个异常。</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[How to use this wiki!]]></title>
      <url>/help/how-to-use-this-wiki/</url>
      <content type="html"><![CDATA[<p>Welcome to ! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h4 id="about-hexo"><a href="#about-hexo" class="headerlink" title="about hexo"></a>about hexo</h4><p>本wiki的思路为使用github作为文档、代码的版本管理,使用hexo来生成静态网站。摒弃了博客的写作方式,使用了markdown和wiki的方式,<br>从首页的导航链接直接进入所有的文档,配合搜索框一部了然,用于建立一个知识地图,因此能快速的编写和寻找需要的资料。</p>
<h4 id="更多资料"><a href="#更多资料" class="headerlink" title="更多资料"></a>更多资料</h4><p><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a><br><a href="https://github.com" target="_blank" rel="external">Github</a></p>
<h4 id="怎么使用"><a href="#怎么使用" class="headerlink" title="怎么使用"></a>怎么使用</h4><h4 id="图片插件"><a href="#图片插件" class="headerlink" title="图片插件"></a>图片插件</h4><p>创建文章同名目录,然后放置图片或者其他资源即可使用相对路径访问</p>
<p><img src="/help/how-to-use-this-wiki/05a4c81a-8793-4baa-92a1-94b28aece873.jpg" alt=""></p>
<p><a href="hello-world.md">测试连接</a></p>
]]></content>
      
        <categories>
            
            <category> help </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
