<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Java web project 概览]]></title>
      <url>/java/java-web-project-overview/</url>
      <content type="html"><![CDATA[<ol>
<li><p>Java 基础重点回顾</p>
<ul>
<li>注解</li>
<li>异常</li>
</ul>
</li>
<li><p>J2EE 开发常用版本</p>
<ul>
<li>Jar 引入Tomcat的J2EE的实现</li>
<li>J2EE 1.7</li>
<li>JDK 8</li>
<li>Tomcat 1.7</li>
</ul>
</li>
<li><p>Spring framework</p>
<ul>
<li>Beans</li>
<li>周边生态</li>
<li>项目配置 web.xml</li>
<li>页面渲染<ul>
<li>JSP</li>
<li>Velocity</li>
<li>FreeMaker</li>
<li>themleaf</li>
</ul>
</li>
</ul>
</li>
<li><p>ORM</p>
<ul>
<li>Mybatis<ul>
<li>DAO 接口<ol>
<li>DTO</li>
<li>PO</li>
</ol>
</li>
<li>Domain 或者 Model  实体类和数据库对应</li>
<li>Mapper 使用xml实现和数据库</li>
</ul>
</li>
<li>Hibernate</li>
</ul>
</li>
<li><p>Validation</p>
<ul>
<li>Hibernate Validation 实现</li>
<li>Java EE Validation 实现</li>
</ul>
</li>
<li><p>授权验证/登录</p>
<ol>
<li>intercept 实现</li>
<li>sharon</li>
<li>Spring security</li>
</ol>
</li>
<li><p>部署</p>
<ol>
<li>tomcat 1.7</li>
</ol>
</li>
<li><p>日志</p>
<ol>
<li>log4J</li>
<li>self4J</li>
</ol>
</li>
<li><p>构建工具</p>
<ol>
<li>Maven</li>
<li>Gradle</li>
</ol>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[一个好的项目需要哪些周边生态?]]></title>
      <url>/agile/ecosystem-for-project/</url>
      <content type="html"><![CDATA[<p>一个项目可以做的很完善,也可以做的很简单,这篇文章就是总结了一个清单,来讨论我们在一个敏捷项目中可以做的比较完善的东西,比如CI/CD</p>
<h4 id="质量内建"><a href="#质量内建" class="headerlink" title="质量内建"></a>质量内建</h4><ol>
<li>Check style - 代码风格检查</li>
<li>Test coverage - 测试覆盖率</li>
<li>fortify - Java代码静态分析</li>
<li>TDD - 测试驱动开发</li>
<li>Eslint - 前端代码检查</li>
</ol>
<h4 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h4><ol>
<li>Penetration - 渗透测试</li>
</ol>
<h4 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h4><ol>
<li>CI/CD 持续部署</li>
<li>Git Flow - 基于git的团队协作方式</li>
<li>Retro - 敏捷中反思项目的会议</li>
</ol>
<h4 id="监控恢复"><a href="#监控恢复" class="headerlink" title="监控恢复"></a>监控恢复</h4><ol>
<li>monitoring<ul>
<li>Ahportal - 一种监控的实现方式</li>
</ul>
</li>
<li>DR - 灾难恢复方案</li>
</ol>
<h4 id="度量"><a href="#度量" class="headerlink" title="度量"></a>度量</h4><ol>
<li>CPU、内存、磁盘使用率</li>
<li>Max request量</li>
<li>AB 测试</li>
</ol>
<h4 id="环境管理"><a href="#环境管理" class="headerlink" title="环境管理"></a>环境管理</h4><ol>
<li>infrastructure as code - 根据项目代码创建基础设施</li>
<li>immutable infrastructure - 每次部署创建新的服务器</li>
<li>DB migration</li>
</ol>
<h4 id="分布式解耦"><a href="#分布式解耦" class="headerlink" title="分布式解耦"></a>分布式解耦</h4><ol>
<li>micro-service 微服务</li>
<li>SPA Project - 前后端分离</li>
</ol>
<h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><ol>
<li>Blue-Green - 蓝绿部署</li>
<li>Gray - 灰度发布</li>
</ol>
]]></content>
      
        <categories>
            
            <category> agile </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java object clone]]></title>
      <url>/java/java-object-clone/</url>
      <content type="html"><![CDATA[<p>Java变量赋值对于简单变量来说没有什么特别的,对于对象来说有几种情况,</p>
<ul>
<li>shallow 赋值</li>
<li>深拷贝</li>
<li>克隆</li>
</ul>
<h4 id="shallow-赋值"><a href="#shallow-赋值" class="headerlink" title="shallow 赋值"></a>shallow 赋值</h4><p>这种赋值情况为共享内存空间,多个变量指向同一个地址空间</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Object obj1 = <span class="keyword">new</span> Object();</div><div class="line">Object obj2 = obj1;</div></pre></td></tr></table></figure>
<p>这里的obj1 和 obj2 共享内存空间, 修改其中一个会导致另外一个对象发生变化。</p>
<h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>递归复制对象中所有的成员变量</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Object obj1 = <span class="keyword">new</span> Object();</div><div class="line">obj1.a = <span class="number">1</span>;</div><div class="line"></div><div class="line">Object obj2 = <span class="keyword">new</span> Object();</div><div class="line">obj2.a = obj1.a;</div></pre></td></tr></table></figure>
<h4 id="对象克隆"><a href="#对象克隆" class="headerlink" title="对象克隆"></a>对象克隆</h4><p>使用对象的clone方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Person p = <span class="keyword">new</span> Person(<span class="number">23</span>, <span class="string">"zhang"</span>);</div><div class="line">Person p1 = (Person) p.clone();</div><div class="line"></div><div class="line">System.out.println(p);</div><div class="line">System.out.println(p1);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[理解 java exception]]></title>
      <url>/java/java-exception/</url>
      <content type="html"><![CDATA[<h4 id="什么是异常和错误"><a href="#什么是异常和错误" class="headerlink" title="什么是异常和错误"></a>什么是异常和错误</h4><p>异常和错误都会阻止当前方法或作用域继续执行,但是异常最大的特点是可以被handle,<br>这是异常和错误最大的区别。</p>
<p>异常(exception)的例子:</p>
<ul>
<li>数据库链接失败</li>
<li>网络中断</li>
</ul>
<p>错误(errors)的例子:</p>
<ul>
<li>内存溢出</li>
<li>CPU超时</li>
</ul>
<p>异常可以被捕获然后进行处理,比如渲染错误页面。错误会导致程序直接退出或崩溃。</p>
<h4 id="Java中的Exception"><a href="#Java中的Exception" class="headerlink" title="Java中的Exception"></a>Java中的Exception</h4><p>Throwable 类是 Java 语言中所有错误或异常的超类（这就是一切皆可抛的东西）。它有两个子类：Error和Exception。</p>
<p>Error：用于指示合理的应用程序不应该试图捕获的严重问题。这种情况是很大的问题，大到你不能处理了，所以听之任之就行了，你不用管它。比如说VirtualMachineError：当 Java 虚拟机崩溃或用尽了它继续操作所需的资源时，抛出该错误。好吧，就算这个异常的存在了，那么应该何时，如何处理它呢？？交给JVM吧，没有比它更专业的了。</p>
<p>Exception：它指出了合理的应用程序想要捕获的条件。Exception又分为两类：一种是CheckedException，一种是UncheckedException。这两种Exception的区别主要是CheckedException需要用try…catch…显示的捕获，而UncheckedException不需要捕获。通常UncheckedException又叫做RuntimeException。《effective java》指出：对于可恢复的条件使用被检查的异常（CheckedException），对于程序错误（言外之意不可恢复，大错已经酿成）使用运行时异常（RuntimeException）。</p>
<p>常见的RuntimeExcepiton有IllegalArgumentException、IllegalStateException、NullPointerException、IndexOutOfBoundsException</p>
<h4 id="异常的捕获"><a href="#异常的捕获" class="headerlink" title="异常的捕获"></a>异常的捕获</h4><p>一个数组越界的例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    System.out.println(ints[<span class="number">4</span>]);</div><div class="line">    System.out.println(<span class="string">"是否还能执行"</span>);<span class="comment">// 发生异常以后，后面的代码不能被执行</span></div><div class="line">&#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</div><div class="line">    System.out.println(<span class="string">"数组越界错误"</span>);</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"异常出现后"</span>);</div></pre></td></tr></table></figure></p>
<p><strong>catch 规则: 可以使用多个catch 一旦捕获到的类型同样的或者它的父类就停止捕获。</strong><br>根据这个经验我们都需要把特定的一样类放到前面,最后一个catch用一个基本类型来捕获。</p>
<p>比如 IOException 是FileNotFoundException 的父类,如果FileNotFoundException产生但是产生了其他<br>IOException的异常</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFile</span><span class="params">()</span> </span>&#123;</div><div class="line">    BufferedReader reader = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(</div><div class="line">                    <span class="keyword">new</span> FileInputStream(<span class="string">"file"</span>)));</div><div class="line">            <span class="comment">// do some other work</span></div><div class="line"></div><div class="line">            <span class="comment">// close reader</span></div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            reader.close();</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="异常链"><a href="#异常链" class="headerlink" title="异常链"></a>异常链</h4><p>丢出新的异常时避免丢失旧的异常,需要把旧的异常放入新的异常链中</p>
<p>c.initCause(e);</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NeverCaught</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> ExceptionB</span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionB(<span class="string">"exception b"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> <span class="keyword">throws</span> ExceptionC </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            f();</div><div class="line">        &#125; <span class="keyword">catch</span> (ExceptionB e) &#123;</div><div class="line">            ExceptionC c = <span class="keyword">new</span> ExceptionC(<span class="string">"exception a"</span>);</div><div class="line">            <span class="comment">//异常连</span></div><div class="line">            c.initCause(e);</div><div class="line">            <span class="keyword">throw</span> c;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                g();</div><div class="line">            &#125; <span class="keyword">catch</span> (ExceptionC e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">exception.ExceptionC</div><div class="line">at exception.NeverCaught.g(NeverCaught.java:12)</div><div class="line">at exception.NeverCaught.main(NeverCaught.java:21)</div><div class="line">Caused by: exception.ExceptionB</div><div class="line">at exception.NeverCaught.f(NeverCaught.java:5)</div><div class="line">at exception.NeverCaught.g(NeverCaught.java:10)</div><div class="line">... 1 more</div><div class="line">*/</div></pre></td></tr></table></figure>
<h4 id="运行时异常和检查异常"><a href="#运行时异常和检查异常" class="headerlink" title="运行时异常和检查异常"></a>运行时异常和检查异常</h4><p>检查异常:编译时期比如处理的异常,比如FileNotFoundException,<br>比如使用try catch捕获。</p>
<p>运行时异常:可以不用处理,最终jvm会处理的异常。比如NullPointerException</p>
<h4 id="throw、throws"><a href="#throw、throws" class="headerlink" title="throw、throws"></a>throw、throws</h4><p>throws: 当我们遇到检查异常时,如果不想在方法内处理,可以加上throws关键字,然上一级方法调用者<br>检查,throws会抛出所有检查异常。</p>
<p>throw:在方法内部抛出一个异常。</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[How to use this wiki!]]></title>
      <url>/help/how-to-use-this-wiki/</url>
      <content type="html"><![CDATA[<p>Welcome to ! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h4 id="about-hexo"><a href="#about-hexo" class="headerlink" title="about hexo"></a>about hexo</h4><p>本wiki的思路为使用github作为文档、代码的版本管理,使用hexo来生成静态网站。摒弃了博客的写作方式,使用了markdown和wiki的方式,<br>从首页的导航链接直接进入所有的文档,配合搜索框一部了然,用于建立一个知识地图,因此能快速的编写和寻找需要的资料。</p>
<h4 id="更多资料"><a href="#更多资料" class="headerlink" title="更多资料"></a>更多资料</h4><p><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a><br><a href="https://github.com" target="_blank" rel="external">Github</a></p>
<h4 id="怎么使用"><a href="#怎么使用" class="headerlink" title="怎么使用"></a>怎么使用</h4><h4 id="图片插件"><a href="#图片插件" class="headerlink" title="图片插件"></a>图片插件</h4><p>创建文章同名目录,然后放置图片或者其他资源即可使用相对路径访问</p>
<p><img src="/help/how-to-use-this-wiki/05a4c81a-8793-4baa-92a1-94b28aece873.jpg" alt=""></p>
<p><a href="hello-world.md">测试连接</a></p>
]]></content>
      
        <categories>
            
            <category> help </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
