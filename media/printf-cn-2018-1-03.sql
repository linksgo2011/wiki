-- phpMyAdmin SQL Dump
-- http://www.phpmyadmin.net
--
-- Generation Time: Jan 03, 2018 at 11:44 AM

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `YOugXhPLJhCxwcMewbSe`
--

-- --------------------------------------------------------

--
-- Table structure for table `docs`
--

CREATE TABLE IF NOT EXISTS `docs` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `title` varchar(255) NOT NULL DEFAULT '无标题',
  `keywords` varchar(255) NOT NULL,
  `content` text NOT NULL,
  `created` int(11) NOT NULL,
  `updated` int(11) NOT NULL,
  `key` varchar(255) NOT NULL DEFAULT '' COMMENT 'key',
  `active` tinyint(4) NOT NULL DEFAULT '0',
  `base_url` varchar(255) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=7 ;

--
-- Dumping data for table `docs`
--

INSERT INTO `docs` (`id`, `user_id`, `title`, `keywords`, `content`, `created`, `updated`, `key`, `active`, `base_url`) VALUES
(3, 11, 'DEMO', '关键词', '<p>\r\n	这里是测试demo的快捷文档，是不是非常容易就可以看到您的文档 O(∩_∩)O~\r\n</p>\r\n<p>\r\n	base_url &nbsp;&nbsp;old.shelp.com/Pages/demo\r\n</p>\r\n<p>\r\n	当前访问url &nbsp;http://old.shelp.com/Docs/add\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	base_url 支持正则方式，用于更加灵活的方式匹配文档。\r\n</p>', 1402678819, 1402718270, '', 0, 'helpjs.duapp.com/index.php/Pages/demo'),
(6, 12, 'test', '', 'asdfasdfasdf', 1402723031, 1402723495, '', 0, 'http://127.0.0.1/vhosts/newopenx/app/app.html?hash=f4db6dab454110f3250217aad8a23695');

-- --------------------------------------------------------

--
-- Table structure for table `typecho_comments`
--

CREATE TABLE IF NOT EXISTS `typecho_comments` (
  `coid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `cid` int(10) unsigned DEFAULT '0',
  `created` int(10) unsigned DEFAULT '0',
  `author` varchar(200) DEFAULT NULL,
  `authorId` int(10) unsigned DEFAULT '0',
  `ownerId` int(10) unsigned DEFAULT '0',
  `mail` varchar(200) DEFAULT NULL,
  `url` varchar(200) DEFAULT NULL,
  `ip` varchar(64) DEFAULT NULL,
  `agent` varchar(200) DEFAULT NULL,
  `text` text,
  `type` varchar(16) DEFAULT 'comment',
  `status` varchar(16) DEFAULT 'approved',
  `parent` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`coid`),
  KEY `cid` (`cid`),
  KEY `created` (`created`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=3 ;

--
-- Dumping data for table `typecho_comments`
--

INSERT INTO `typecho_comments` (`coid`, `cid`, `created`, `author`, `authorId`, `ownerId`, `mail`, `url`, `ip`, `agent`, `text`, `type`, `status`, `parent`) VALUES
(2, 13, 1424453302, '小鸡咕咕', 0, 1, '562015052@qq.com', NULL, '10.50.141.13', 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36', '点个赞~', 'comment', 'approved', 0);

-- --------------------------------------------------------

--
-- Table structure for table `typecho_contents`
--

CREATE TABLE IF NOT EXISTS `typecho_contents` (
  `cid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(200) DEFAULT NULL,
  `slug` varchar(200) DEFAULT NULL,
  `created` int(10) unsigned DEFAULT '0',
  `modified` int(10) unsigned DEFAULT '0',
  `text` text,
  `order` int(10) unsigned DEFAULT '0',
  `authorId` int(10) unsigned DEFAULT '0',
  `template` varchar(32) DEFAULT NULL,
  `type` varchar(16) DEFAULT 'post',
  `status` varchar(16) DEFAULT 'publish',
  `password` varchar(32) DEFAULT NULL,
  `commentsNum` int(10) unsigned DEFAULT '0',
  `allowComment` char(1) DEFAULT '0',
  `allowPing` char(1) DEFAULT '0',
  `allowFeed` char(1) DEFAULT '0',
  `parent` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`cid`),
  UNIQUE KEY `slug` (`slug`),
  KEY `created` (`created`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=105 ;

--
-- Dumping data for table `typecho_contents`
--

INSERT INTO `typecho_contents` (`cid`, `title`, `slug`, `created`, `modified`, `text`, `order`, `authorId`, `template`, `type`, `status`, `password`, `commentsNum`, `allowComment`, `allowPing`, `allowFeed`, `parent`) VALUES
(1, '从cnblog 到 Typecho', 'start', 1419994140, 1420026212, '<!--markdown-->cnblog 已经用了2年，cnblog的缺陷和不足是无法托管DEMO和已经完善的组件产品，看着我写的DEMO散落一地，不忍丢弃所以切换到独立博客，如果有好的作品也可以与大家分享。cnblog 地址 [http://www.cnblogs.com/linksgo2011][1]\r\n    \r\n今天是2014年最后一天，恰好生日，留在公司谢了新博客的第一篇博文，cnblog是刚刚工作就开始写，如今已经2年3个月了，工作了这么久也没留下什么优秀的作品和文章，从typeho开始算是告别过去，迎接未来吧。\r\n2015与君共勉。    \r\n\r\n\r\n  [1]: http://www.cnblogs.com/linksgo2011', 0, 1, NULL, 'post', 'publish', NULL, 0, '1', '1', '1', 0),
(2, '关于我', 'start-page', 1419994140, 1432709559, '<!--markdown-->程序猿一枚，专注WEB开发，现居成都。\r\n\r\nEmail:120377843@qq.com\r\n\r\n======================================\r\n\r\n专注于富客户端方向，注重良好的技术基础和计算机科学素养培养，喜欢看书，但无奈反应太慢。\r\n使用的语言：PHP JavaScript C++ \r\n计算机科学：数据结构和简单算法、高等数学、计算机网络、数据库\r\n涉猎库和框架：CakePHP YII jQuery AngularJS PHPUnit QUnit 等\r\n\r\n======================================\r\n\r\n**#案例**\r\n\r\n1. [www.haowa.com][1]\r\n   就职的公司官网，主要从事PHP后端开发，商业项目后台无法提供预览。\r\n2. [http://nipicdown.duapp.com][2]\r\n    帮朋友做的应用，用于实现第三方昵图网资源下载。\r\n    体验用户名：1613676090@qq.com 密码：123456\r\n3. [http://www.ixbtc.com/users/login][3]\r\n    比特币交易平台，类似火币网等P2P货币交易平台。\r\n    体验用户名：test@qq.com 密码：123456\r\n4. [http://www.imistar.com][4]\r\n    企业网站没什么好说的，就是一个文章系统+前端模板。客户提供效果图PSD，自己实现前端效果。\r\n\r\n  [1]: http://www.imistar.com\r\n  [2]: http://nipicdown.duapp.com\r\n  [3]: http://www.ixbtc.com/users/login\r\n  [4]: http://www.imistar.com', 3, 1, NULL, 'page', 'publish', NULL, 0, '1', '1', '1', 0),
(3, '实验室', '3', 1419995160, 1446017893, '<!--markdown-->全是DEMO，完全不负责任！\r\n\r\n 1. [全屏滚动和requirejs][1]\r\n 2. [HTML5画板][2]\r\n 3. [弹性小球][3]\r\n 4. [简单的HTML分形图案][4]\r\n 5. [jquerydrag拖拽效果][5]\r\n 6. [超炫数字时钟][6]\r\n 7. [CSS特效DEMO][7]\r\n 8. [CSS3页面淡入][8]\r\n 9. [点击+1效果 ][9]\r\n 10. [下班倒计时][10]\r\n 11. [angularjs 做的中午吃什么抽奖][11]\r\n 12. [jquery下雪 特效][12]\r\n 13. [Jquery 菜单特效][13]\r\n 14. [测试用例编写工具：事件流生成器][14]\r\n 15. [animatecss 使用Demo][15]\r\n 16. [json包转换成PHP数组][16]\r\n 17. [json简易格式化工具][17]\r\n 18. [搜索框自动完成DEMO][18]\r\n 19. [学习backbone之待办记事][19]\r\n 20. [PHP数组解析转JSON][20]\r\n 21. [呼吸灯选项卡特效][21]\r\n 22. [WIFI登录页面][22]\r\n 23. [优秀的网页收集][23]\r\n 24. [UI设计稿展示小工具][24] \r\n左侧菜单列出设计稿地址，点击后将设计稿放置到页面中以一个合适的方式显示\r\n 25. [登陆页面][25]\r\n 26. [标签页切换][26]\r\n 27. [字母像素下落特效-点阵版本][27]\r\n\r\n\r\n  [1]: http://printf.cn/demo/fullpage/index.html\r\n  [2]: http://printf.cn/demo/board/index.html\r\n  [3]: http://printf.cn/demo/falling/index.html\r\n  [4]: http://printf.cn/demo/fractal/index.html\r\n  [5]: http://printf.cn/demo/jquerydrag/index.html\r\n  [6]: http://printf.cn/demo/timer/index.html\r\n  [7]: http://printf.cn/demo/css3demo.html\r\n  [8]: http://printf.cn/demo/page-fadein.html\r\n  [9]: http://printf.cn/demo/plusone.html\r\n  [10]: http://printf.cn/demo/offduty.html\r\n  [11]: http://printf.cn/demo/lottobyangular/index.html\r\n  [12]: http://printf.cn/demo/slow/index.html\r\n  [13]: http://printf.cn/demo/menu/index.html\r\n  [14]: http://printf.cn/demo/angularcombine/index.html\r\n  [15]: http://printf.cn/demo/animatecss/index.html\r\n  [16]: http://printf.cn/demo/json2arr.php\r\n  [17]: http://printf.cn/demo/json/index.html\r\n  [18]: http://printf.cn/demo/autocomplete/index.html\r\n  [19]: http://printf.cn/demo/backbone/todos.html\r\n  [20]: /demo/arr2json.php\r\n  [21]: /product/hothead/indexv2.html\r\n  [22]: http://printf.cn/demo/wifi/map.html\r\n  [23]: /product/webgather\r\n  [24]: /demo/floatleftbar\r\n  [25]: /product/info/login.html\r\n  [26]: /demo/tab.html\r\n  [27]: http://runjs.cn/detail/st46h02w', 1, 1, NULL, 'page', 'publish', NULL, 0, '1', '1', '1', 0),
(4, '小作坊', '4', 1419995280, 1446633269, '<!--markdown-->一些作品，有些是线上项目中应用到的，经过测试经得起考验。\r\n\r\n 1. **基于HTML5cavas 开发的地图热点应用，使用cavas 实现不规则图像热点,根据客户需要，分辨率非常大，仅仅兼容（定制的原因） chrome** \r\n    DEMO地址: [点击查看][1]\r\n    下载地址：略\r\n 2. **jQuery拖拽插件**\r\n    DEMO地址: [点击查看][2]\r\n    下载地址： [点击下载][3]\r\n 3. **jQuery 评分插件**\r\n    DEMO地址: [点击查看][4]\r\n    下载地址： [点击下载][5]\r\n 4. **get类型api 转转json调用接口**\r\n    DEMO地址:[点击查看][6]\r\n 5. **多功能，支持多实例日历插件**\r\n    DEMO地址:[点击查看][7]\r\n 6. **图片上传、管理、排序效果**\r\n    DEMO地址:[点击查看][8]\r\n 7. **一个活动网站静态页面 51haowa.com**\r\n    DEMO地址:[点击查看][9]\r\n 8. **Grunt map.html 生成插件，用于生成一批html文件的导航文件**\r\n    npmjs 项目地址:[点击查看][10]\r\n\r\n 9. **nodejs 做的CMS新闻系统，业余项目已开源**\r\n     nodecms  [点击查看][11]\r\n\r\n 10. **免费域名批量扫描工具（无限制）**\r\n     域名扫描工具 [点击查看][12]\r\n\r\n 11. **易用的api接口调试工具**\r\n    API测试工具 [点击查看][13]\r\n\r\n 12. **带缩略图的相册jQuery插件**\r\n    查看 [点击查看][14]\r\n    打包下载 [点击下载][15]\r\n\r\n 13. **一款简单的拖拽排序jQuery插件**\r\n    查看 [点击查看][16]\r\n\r\n\r\n  [1]: http://printf.cn/product/sand/index.html\r\n  [2]: http://printf.cn/demo/jquerydrag/index.html\r\n  [3]: http://printf.cn/demo/jquerydrag/jquerydrag.zip\r\n  [4]: http://printf.cn/product/jqueryrate/index.html\r\n  [5]: http://printf.cn/product/jqueryrate/jqueryrate.zip\r\n  [6]: /demo/jsonp/index.html\r\n  [7]: /demo/datepicker/index.html\r\n  [8]: http://printf.cn/demo/fabu/index.html\r\n  [9]: /product/51haowai/map.html\r\n  [10]: https://www.npmjs.com/package/grunt-html-filemap\r\n  [11]: https://github.com/linksgo2011/nodecms\r\n  [12]: http://printf.cn/index.php/archives/91/\r\n  [13]: http://printf.cn/index.php/archives/30/\r\n  [14]: http://printf.cn/product/jq-plugins/common/photos/index.html\r\n  [15]: /publish/zip.php?dir=product/jq-plugins/common/photos\r\n  [16]: /product/jq-plugins/common/dragsort/index.html', 2, 1, NULL, 'page', 'publish', NULL, 0, '1', '1', '1', 0),
(6, '一句话扯扯数据结构的概念点', '6', 1420032780, 1420033323, '<!--markdown-->数据结构的很多概念真的是很莫名其妙，很多坑爹的定义，笔者开始很搞不明白，为什么学数据结构？为什么用哪个拗口词语？这些概念到底用在什么地方？笔者试图用自己简单的话来阐述这些问题，希望能对这些感觉不是很好理解的同学有帮助。如有错误，欢迎指正！email：linksgo2011@gmail.com\r\n\r\n　　数据结构是算法的基石，算法是软件灵魂。\r\n\r\n　　不废话，直接开始。\r\n\r\n　　一、概论\r\n\r\n　　   时间复杂度：就是算法实现的执行的时间，说白了就是程序套了好多循环。没有就是o(n),2层循环就是o(n2)，如此，剩下就不要管了。\r\n\r\n　　　空间复杂度：说白了就是你定义了好多的变量，程序执行是额外使用了好多冗余内存。\r\n\r\n　　　算法标准：什么算法是好的算法？好用就行。1、正确2、简单 3、占内存少 4、速度快 ，这几点不可兼得，自己把握，其实能简单和速度是主要的。\r\n\r\n　　　二、线性表\r\n\r\n　　　　顺序存储结构      连续的存储\r\n\r\n　　　　\r\n\r\n\r\n\r\n 　　　　链式存储结构　　　　　 内存中随机存储的，只需要指针写出下一个结点在哪里即可\r\n\r\n\r\n\r\n \r\n\r\n　　　　线性表：逻辑上不分叉就行。一个个数据元素前后相连（就是前驱、后继）。数据项平等对待。与此相对就是数、图。用途：其实就是数组啦。\r\n\r\n　　　　链表：采用链式存储方式的线性表。什么是链式存储？就是一个数据项中不仅保存数据还要告诉下一个数据在哪里。用途：数据大小不确定时用。\r\n\r\n　　　　从普通链表拓展的概念：\r\n\r\n　　　　1、循环链表：首尾相连的链表；\r\n\r\n　　　　2、双链表：前后相随的链表；前<  >后\r\n\r\n　　　　　　用途：特殊情况加快链表的操作；\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n　　三、栈和队列\r\n\r\n　　　　这个什么东西？就是功能被限制的链表，没有什么区别；\r\n\r\n　　　　栈：只能从上面往下放，然后从上面去取；  就是一个坑啊，有木有！\r\n\r\n　　　　　　　链栈：链式存储的栈；\r\n\r\n　　　　　　　顺序栈：顺序存储的栈；\r\n\r\n　　　　队列：前面装入数据，后面取出数据； 用途：保障时间的顺序，比如用户事务操作；\r\n\r\n　　　　　　　链队列：链式存储的队列；  链队列：长度没限制啊，是不是、\r\n\r\n　　　　　　　　　顺序队列：顺序存储的队列； \r\n\r\n　　四、串\r\n\r\n　　　　　　就是把字符放到前面的线性表中。不然怎么叫字符串呢？ 所以很多语言字符串就是一个对象；\r\n\r\n　　五、多维素组\r\n\r\n　　　　　　素组的元素可以又是一个数组。 这个就是一个树。\r\n\r\n　　六、树\r\n\r\n　　　　　　有分叉的链表但是不能首尾相连；（线索二叉树除外，线索二叉树就是图了都）；\r\n\r\n　　　　　　二叉树：最多两个分支。\r\n\r\n　　　　　　深林：几个树放到一起（没连接哈），就是个深林；形象啊、\r\n\r\n　　　　　　遍历：记住以根为标准即可，先访问根：先序；访问了左边，再访问根：中序；最后访问根：后序；\r\n\r\n　　　　　　最优二叉树（哈夫曼树）：就是把权重的往上放。   用途：用来编码，用的多的，权重的自然放在前面了，权力大的就在上面（和金字塔的社会不是很像么？）；\r\n\r\n　　　　　　线索二叉树：叶子节点的指针域不要浪费，指向其他，按照遍历的顺序来。其实就是一个图了。\r\n\r\n　　　\r\n\r\n　　七、图\r\n\r\n　　　　　　无限个指针域，随你指向那个结点，不要重复就行。\r\n\r\n　　　　　　无向图：指向a 被指向a,算作一样；\r\n\r\n　　　　　　有向图：指向a被指向a,不同的，不一样；\r\n\r\n　　　　　　带权:指向这个行为还有程度值，权值。\r\n\r\n　　　　　　网络：带权的有向图。 路由协议中，由路由器组成的网络就是向且带权，比如速度、延迟不一样，上传、下载速度不一样；\r\n\r\n　　　　　　遍历的问题有点麻烦\r\n\r\n　　　　　　　　深度优先：就是一直往下走，不回头。\r\n\r\n　　　　　　　　广度优先：一层一层剥下去。\r\n\r\n　　　　　　生成树：把图滤成一个树。删除循环的连接；primus算法类似深度优先的思想，克鲁斯卡尔算法类似广度优先的思想；\r\n\r\n　　　　　　最短路径：一个一个列出来，比较最小的；\r\n\r\n　　八、排序和查找\r\n\r\n　　　　　　先看排序：\r\n\r\n　　　　　　1、冒泡排序：就像气泡一样，当前元素和下一个比，合适就这样，不合适就交换折腾 n * n次\r\n\r\n　　　　　　2、快速：元素找到自己的排序位置，当每个人都找到了，那个顺序就定了。\r\n\r\n　　　　　　3、选择：老实的排序法，找到最值，放在哪里，又去找最值。。。。\r\n\r\n　　　　　　4、堆：和选择一样建一个具有堆的性质二叉树（节点永远比子节点大），堆顶就是最值，拿出来，再建一次堆。。。\r\n\r\n　　　　　　7、插入：随便拿一个向有序的中放。问：开始没有有序的序列啊？答：开始只有找一个元素参照，一个必然是有序的，然后可以结合二分法查找，来排序，用查找的思想排序，逆天了有木有啊、\r\n\r\n　　　　　　8、归并：几组有序的合并成一个。很简单，每人轮流拿出一个比较下，放进篮子里不就完了。\r\n\r\n　　　　　　排序好了才能查找，否则就只能一个一个查找了\r\n\r\n　　　　　　1、顺序查找：就是一个一个来；\r\n\r\n　　　　　　2、二分法：简单，找中间，每次排除一半；\r\n\r\n　　　　　　3、分块：建个索引，就是分割区域，这些区域对应到一个序列，例如123，然后去找，索引越细致，速度越快，但是修改了，会重建索引，把握程度即可。\r\n\r\n　　　　　　4、二叉排序树：把数据存在一个树里，这个树的数据以中序遍历的顺序来存，这个结点的左边比右边小，就很好找了、每次排除整体的一半。\r\n\r\n　　　　　　5、B-树：用二叉排序树当做索引存普通数据，因为二叉排序树的建立、删除代价太大了。\r\n\r\n　　　　　　什么是散列？\r\n\r\n　　　　　　举个栗子。。。。数据位1-100，怎么存?你可以用1-5（自己定哈），1-20划到1中，21-40划到2中。那么就是1-100的散列为1-5，\r\n\r\n查找就很方便了，先看在那个区域里，再去找。可以说这是二分法的推广，二分法其实就是看做1-2的散列。\r\n\r\n \r\n\r\n　　　　　　最后说几个问题：\r\n\r\n　　　　　　1、排序用在数据库中的表记录上面，数据库必须要排序，就是在建立索引时发生的。大量的数据才会体现，排序算法的价值，可以用来节约钱啊。。。。。\r\n\r\n　　　　　　2、数据库一般把索引文件和数据文件分开的。特别典型的就是MYSQL的MYISAM存储引擎。\r\n\r\n　　　　　　3、所谓的存储引擎就是不通过的算法实现，采用不同的适合不同场合的算法，这些场合要求不同，比如有的要求速度，有的要求并发量大，可串行化。数据库采用具不同的存储引擎，对程序有很大的影响，且一定要合适。', 0, 1, NULL, 'post', 'publish', NULL, 0, '1', '1', '1', 0);
INSERT INTO `typecho_contents` (`cid`, `title`, `slug`, `created`, `modified`, `text`, `order`, `authorId`, `template`, `type`, `status`, `password`, `commentsNum`, `allowComment`, `allowPing`, `allowFeed`, `parent`) VALUES
(7, 'Qunit 中文文档', '7', 1420033200, 1420033307, '<!--markdown--><p>1、官方文档地址</p>\r\n<p>http://qunitjs.com/cookbook/#asserting-results</p>\r\n<h2 id="introduction" class="title">Introduction&nbsp;<strong>简介</strong></h2>\r\n<p>Automated testing of software is an essential tool in development. Unit tests are the basic building blocks for automated tests: each component, the unit, of software is accompanied by a test that can be run by a test runner over and over again without any human interaction. In other words, you can write a test once and run it as often as necessary without any additional cost.</p>\r\n<p>In addition to the benefits of good test coverage, testing can also drive the design of software, known as&nbsp;<em>test-driven design</em>, where a test is written before an implementation. You start writing a very simple test, verify that it fails (because the code to be tested doesn''t exist yet), and then write the necessary implementation until the test passes. Once that happens, you extend the test to cover more of the desired functionality and implement again. By repeating those steps, the resulting code looks usually much different from what you''d get by starting with the implementation.</p>\r\n<p>Unit testing in JavaScript isn''t much different from in other programming languages. You need a small framework that provides a test runner, as well as some utilities to write the actual tests.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp; &nbsp; 自动化的测试软件在开发中是必备的。单元测试将会为自动化测试创建一些基本的代码块：组件、单元，伴随着不需要人工的干预，一次一次的重复运行的测试程序。总之，你能编写一次测试就能在必要的时候再次运行而不用再次编写。</p>\r\n<p>&nbsp; &nbsp;额外的好处就是代码运行的覆盖测试，同时测试也能驱动软件更好的设计，就像著名的测试驱动开发，在实现之前写一个测试，你甚至可以写一个简单的测试，然后测试失败（因为现在代码仍然没有开始编写），然后开始实现你的代码直到你的测试通过。你能够拓展你的测试去覆盖更多的需求和功能，并且再次扩充你的实现代码。通过重复这些步骤，最终你得到的代码看起来常常和你最初开始实现的代码大为不同。</p>\r\n<p>&nbsp; &nbsp;Javasscript 的单元测试和其他计算机编程语言来说非常不同。因此你需要一个小的测试框架来运行你的测试用例，同时也作为一组编写单元测试的工具。</p>\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n<p>&nbsp;</p>\r\n<h2 id="automating-unit-testing" class="title">Automating Unit Testing<strong>自动单元测试</strong></h2>\r\n<h3 id="problem-162" class="title">Problem 问题</h3>\r\n<p>You want to automate testing your applications and frameworks, maybe even benefit from test-driven design. Writing your own testing framework may be tempting, but it involves a lot of work to cover all the details and special requirements of testing JavaScript code in various browsers.</p>\r\n<p>&nbsp; &nbsp; 你想要自动测试nice应用和框架，也许从测试驱动开发的角度是非常有价值。写出一个自己的测试框架也许是很吸引人的，但是就需要涉及大量的工作关于JavaScript 代码在各个浏览器上全部的细节和个别特殊的要求。</p>\r\n<h3 id="solution-158" class="title">Solution 解决方案</h3>\r\n<p>While there are other unit testing frameworks for JavaScript, you''ve decided to check out QUnit. QUnit is jQuery''s unit test framework and is used by a wide variety of projects.</p>\r\n<p>&nbsp; &nbsp; 然而这里还有其他JavaScript测试框架，你最好决定签出Qunit，Qunit是Jquery的单元测试框架，并且被广泛使用在各个项目中。</p>\r\n<p>To use QUnit, you only need to include two QUnit files on your HTML page. QUnit consists of&nbsp;<code class="literal">qunit.js</code>, the test runner and testing framework, and&nbsp;<code class="literal">qunit.css</code>, which styles the test suite page to display test results:</p>\r\n<p>&nbsp; 为了使用Qunit，你仅仅需要去包含2个Qunit文件在你的Html页面。Qunit 包含了qunit.js 作为运行器和测试框架，和qunit.css 文件，座位测试套件页面显示测试结果的样式。</p>\r\n<p>例子如下</p>\r\n<div class="cnblogs_code">\r\n<pre><span style="color: #0000ff;">&lt;!</span><span style="color: #ff00ff;">DOCTYPE html</span><span style="color: #0000ff;">&gt;</span>\r\n<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">html</span><span style="color: #0000ff;">&gt;</span>\r\n<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>\r\n  <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">meta </span><span style="color: #ff0000;">charset</span><span style="color: #0000ff;">="utf-8"</span><span style="color: #0000ff;">&gt;</span>\r\n  <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;</span>QUnit basic example<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">title</span><span style="color: #0000ff;">&gt;</span>\r\n  <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">link </span><span style="color: #ff0000;">rel</span><span style="color: #0000ff;">="stylesheet"</span><span style="color: #ff0000;"> href</span><span style="color: #0000ff;">="//code.jquery.com/qunit/qunit-1.15.0.css"</span><span style="color: #0000ff;">&gt;</span>\r\n<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">head</span><span style="color: #0000ff;">&gt;</span>\r\n<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span>\r\n  <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="qunit"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>\r\n  <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">="qunit-fixture"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>\r\n  <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">script </span><span style="color: #ff0000;">src</span><span style="color: #0000ff;">="//code.jquery.com/qunit/qunit-1.15.0.js"</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span>\r\n  <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span><span style="background-color: #f5f5f5; color: #000000;">\r\n    QUnit.test( </span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">a basic test example</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">, </span><span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;">( assert ) {\r\n      </span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> value </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">hello</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">;\r\n      assert.equal( value, </span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">hello</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">, </span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;">We expect value to be hello</span><span style="background-color: #f5f5f5; color: #000000;">"</span><span style="background-color: #f5f5f5; color: #000000;"> );\r\n    });\r\n  </span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span>\r\n<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">body</span><span style="color: #0000ff;">&gt;</span>\r\n<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">html</span><span style="color: #0000ff;">&gt;</span></pre>\r\n</div>\r\n<p>打开浏览器可以看到下面的效果</p>\r\n<p><iframe style="width: 100%; height: 300px; border: 0px;" src="http://qunitjs.com/resources/example-cookbook-1-basics.html" width="320" height="240"></iframe></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>The only markup necessary in the&nbsp;<code class="literal">&lt;body&gt;</code>&nbsp;element is a&nbsp;<code class="literal">&lt;div&gt;</code>&nbsp;with&nbsp;<code class="literal">id="qunit-fixture"</code>. This is required for all QUnit tests, even when the element itself is empty. This provides the fixture for tests, which will be explained in&nbsp;<a class="xref" title="Keeping Tests Atomic" href="http://qunitjs.com/cookbook/#keeping-tests-atomic">the section called "Keeping Tests Atomic"</a>.</p>\r\n<p>&nbsp; &nbsp;这里仅有的必要的标签是在&lt;body&gt;元素里卖弄放置一个&lt;div&gt;带上id="qunit-fixture"属性。这里获取到所有的测试用例，即使这个元素里面现在为空，这里提供了为测试的容器，将在<a class="xref" title="Keeping Tests Atomic" href="http://qunitjs.com/cookbook/#keeping-tests-atomic">the section called "Keeping Tests Atomic</a>这节进一步解释。</p>\r\n<p>The interesting part is the&nbsp;<code>&lt;script&gt;</code>&nbsp;element following the&nbsp;<code>qunit.js</code>&nbsp;include. It consists of a call to the&nbsp;<code>test</code>&nbsp;function, with two arguments: the name of the test as a string, which is later used to display the test results, and a function. The function contains the actual testing code, which involves one or more assertions. The example uses one assertion,&nbsp;<code>equal()</code>, which is explained in detail in&nbsp;<a title="Asserting Results" href="http://qunitjs.com/cookbook/#asserting-results">Asserting Results</a>.</p>\r\n<p>&nbsp; &nbsp; 这里最有趣的部分是引入qunit.js &nbsp;的&lt;script&gt;元素。包括执行测试方法，使用2个参数，1个是被测试方法名作为字符串传入，随后作为显示测试结果，另外一个是一个方法，这个方法包含了测试用例代码，涉及一个或者多个断言。一个断言的例子是,equal()，详细解释在&nbsp;&nbsp;<a title="Asserting Results" href="http://qunitjs.com/cookbook/#asserting-results">Asserting Results</a>.</p>\r\n<p>Note that there is no&nbsp;<code class="literal">document-ready</code>&nbsp;block. The test runner handles that: calling&nbsp;<code class="literal">QUnit.test()</code>&nbsp;just adds the test to a queue, and its execution is deferred and controlled by the test runner.</p>\r\n<p>&nbsp; &nbsp;注意并没有document-ready块，测试运行器的操作过程是，调用 qunit.test() 仅仅是添加测试到一个队列，然后随后被测试运行器控制盒执行。</p>\r\n<p>&nbsp;</p>\r\n<h3 id="discussion-id166" class="title">Discussion 讨论</h3>\r\n<p>The header of the test suite displays the page title, a green bar when all tests passed (a red bar when at least one test failed), a bar with a few checkboxes to filter test results and a blue bar with the&nbsp;<code class="literal">navigator.userAgent</code>&nbsp;string (handy for screenshots of test results in different browsers).</p>\r\n<p>&nbsp; &nbsp; 头部显示测试套件的标题，如果是绿色显示条，表示全部测试通过，如果至少有一个用例测试失败，这个显示条会显示红色，带有选择框这行用来过滤需要测试的用例，蓝色这行显示navigaor.userAgent 字符串，用来展示在不同浏览器下测试的结果差异。</p>\r\n<p>Of the checkboxes, "Hide passed tests" is useful when a lot of tests ran and only a few failed. Checking the checkbox will hide everything that passed, making it easier to focus on the tests that failed (see also&nbsp;<a class="xref" title="Efficient Development" href="http://qunitjs.com/cookbook/#efficient-development">the Efficient Development</a>section below).</p>\r\n<p>&nbsp; 其中一个选择框，&ldquo;Hide passed tests&rdquo;是非常有用得，当大量的测试并且只有少数失败，选中这个选择框将隐藏通过的所有测试，这样可以更加容易的定位到特使失败的用例上去。（在 <a class="xref" title="Efficient Development" href="http://qunitjs.com/cookbook/#efficient-development">the Efficient Development</a>&nbsp;查看更多）</p>\r\n<p>Checking "Check for Globals" causes QUnit to make a list of all properties on the&nbsp;<code>window</code>&nbsp;object, before and after each test, then checking for differences. If properties are added or removed, the test will fail, listing the difference. This helps to make sure your test code and code under test doesn''t accidentally export any global properties.</p>\r\n<p>&nbsp;选中&ldquo;Check for Globals&rdquo;会使 Qunit 去生成一个所有属性在window对象上的清单，在每个用例之前和之后，然后检查差异。如果属性被增加和删除，测试将会失败，显示出差异。这样可以帮助我们确保测试代码和项目代码在测试中不会因为暴露出来的全局变量造成冲突。</p>\r\n<p>The "No try-catch" checkbox tells QUnit to run your test outside of a try-catch block. When your test throws an exception, the testrunner will die, unable to continue running, but you''ll get a "native" exception, which can help tremendously debugging old browsers with bad debugging support like Internet Explorer 6 (JavaScript sucks at rethrowing exceptions).</p>\r\n<p>&nbsp;选中&ldquo;"No try-catch&rdquo;告诉QUnit 去运行测试不会使用 try-catch 。当你的项目代码抛出一个异常的的时候，测试运行器会崩溃，不在继续运行，但是你可以直观的看到异常，这样可以很好帮助你调试旧的浏览器，例如在非常差的调试支持的浏览器 IE6。</p>\r\n<p>Below the header is a summary, showing the total time it took to run all tests as well as the overall number of total and failed assertions. While tests are still running, it will show which test is currently being executed.</p>\r\n<p>&nbsp; 下面一行，是一组统计，显示花费的时间，同事也更加直观的看到运行的所有测试用例的数量和成功的数量。当测试一直在运行的时候，数据也会随测试的运行而改变。</p>\r\n<p>The actual contents of the page are the test results. Each entry in the numbered list starts with the name of the test followed by, in parentheses, the number of failed, passed, and total assertions. Clicking the entry will show the results of each assertion, usually with details about expected and actual results. The "Rerun" link at the end will run that test on its own.</p>\r\n<p>&nbsp;最重要的内容是测试的结果。包含每个测试用例测更具编号排列，括号里显示失败，通过和用例的数量，点击进入将显示每个用例的结果，通畅由异常的详情和期望的结果组成。点击&ldquo;Rerun&rdquo;链接，可以重新单独运行本条测试。</p>\r\n<p>&nbsp;</p>\r\n<h2 id="asserting-results" class="title">Asserting Results 断言结果</h2>\r\n<h3 id="problem-163" class="title">Problem 问题</h3>\r\n<p>Essential elements of any unit test are assertions. The author of the test needs to express the results expected and have the unit testing framework compare them to the actual values that an implementation produces.</p>\r\n<p>&nbsp; &nbsp;任何单元测试框架的必要的的元素就是断言。需要测试的作者表达期望的结果，然后单元测试框架会拿去和测试中产生的实际值做比较。</p>\r\n<h3 id="solution-159" class="title">Solution 解决方案</h3>\r\n<p>QUnit provides a number of&nbsp;<a href="http://api.qunitjs.com/category/assert/">built-in assertions</a>. Let''s look at three of those:</p>\r\n<p>&nbsp; &nbsp;QUnit提供了大量的内置断言，让我们看以下这几个：</p>\r\n<h4 id="ok-open-parenthesis-boolean-open-square" class="title">ok( truthy [, message ] )&nbsp;</h4>\r\n<p>The most basic one is&nbsp;<code class="literal">ok()</code>, which requires just one argument. If the argument evaluates to true, the assertion passes; otherwise, it fails. In addition, it accepts a string to display as a message in the test results:</p>\r\n<p>&nbsp; 使用最基本的一个就是ok()，仅仅只有一个请求的参数，如果返回值TRUE，这个断言通过，否则就失败。另外它接受1个字符串作为测试测试结果的显示。</p>\r\n<div class="cnblogs_Highlighter">\r\n<pre class="brush:javascript;gutter:true;">QUnit.test( "ok test", function( assert ) {\r\n  assert.ok( true, "true succeeds" );\r\n  assert.ok( "non-empty", "non-empty string succeeds" );\r\n \r\n  assert.ok( false, "false fails" );\r\n  assert.ok( 0, "0 fails" );\r\n  assert.ok( NaN, "NaN fails" );\r\n  assert.ok( "", "empty string fails" );\r\n  assert.ok( null, "null fails" );\r\n  assert.ok( undefined, "undefined fails" );\r\n});\r\n</pre>\r\n</div>\r\n<p>　　</p>\r\n<h4 id="equal-open-parenthesis-actual-comma-exp" class="title">equal( actual, expected [, message ] )</h4>\r\n<p>The&nbsp;<code class="literal">equal</code>&nbsp;assertion uses the simple comparison operator (<code class="literal">==</code>) to compare the actual and expected arguments. When they are equal, the assertion passes; otherwise, it fails. When it fails, both actual and expected values are displayed in the test result, in addition to a given message:</p>\r\n<p>&nbsp; &nbsp;这个 equal断言常常用于简单的使用（==）运算符比较期望参数和真实值，当他们相等的时候，断言通过，否则断言失败。这2个值都会在测试结果中显示，额外的也会显示测试消息。</p>\r\n<div class="cnblogs_Highlighter">\r\n<pre class="brush:javascript;gutter:true;">QUnit.test( "equal test", function( assert ) {\r\n  assert.equal( 0, 0, "Zero, Zero; equal succeeds" );\r\n  assert.equal( "", 0, "Empty, Zero; equal succeeds" );\r\n  assert.equal( "", "", "Empty, Empty; equal succeeds" );\r\n  assert.equal( 0, false, "Zero, false; equal succeeds" );\r\n \r\n  assert.equal( "three", 3, "Three, 3; equal fails" );\r\n  assert.equal( null, false, "null, false; equal fails" );\r\n});\r\n</pre>\r\n</div>\r\n<p>Compared to&nbsp;<code class="literal">ok()</code>,&nbsp;<code class="literal">equal()</code>&nbsp;makes it much easier to debug tests that failed, because it''s obvious which value caused the test to fail.</p>\r\n<p>When you need a strict comparison (<code class="literal">===</code>), use&nbsp;<code class="literal">strictEqual()</code>&nbsp;instead.</p>\r\n<p>相比ok()，equal() 可以更容易的测试失败，因为这是很明显的返回值不匹配就会失败。如果需要严格比较（===），使用 strccEqual() 代替。</p>\r\n<h4 id="deepEqual-open-parenthesis-actual-comma-expec" class="title">deepEqual( actual, expected [, message ] )</h4>\r\n<p>The&nbsp;<code class="literal">deepEqual()</code>&nbsp;assertion can be used just like&nbsp;<code class="literal">equal()</code>&nbsp;and is a better choice in most cases. Instead of the simple comparison operator (<code class="literal">==</code>), it uses the more accurate comparison operator (<code class="literal">===</code>). That way,&nbsp;<code class="literal">undefined</code>&nbsp;doesn''t equal&nbsp;<code class="literal">null</code>,&nbsp;<code class="literal">0</code>, or the empty string (<code class="literal">""</code>). It also compares the content of objects so that&nbsp;<code class="literal">{key: value}</code>&nbsp;is equal to&nbsp;<code class="literal">{key: value}</code>, even when comparing two objects with distinct identities.</p>\r\n<p>&nbsp; &nbsp; deepEqual()断言，能更好使用比 equal() 并且有更多选项。代替使用简单的比较运算符(==),使用更加准确的比较运算符（===）。这种情况下，undefined 不会等于 null，0 不会等于</p>\r\n<p>空字符串。同时也能比较对象如{key:value} 会等于{key:value}，即使使用严格模式（use strict）下的比较2个对象。</p>\r\n<p><code class="literal">deepEqual()</code>&nbsp;also handles NaN, dates, regular expressions, arrays, and functions, while&nbsp;<code class="literal">equal()</code>&nbsp;would just check the object identity:</p>\r\n<p>&nbsp; &nbsp; deepEqual() 也能操作NaN，dates，正则表达式，数组，方法等类型，而 equal() 只能测试基本对象类型。</p>\r\n<div class="cnblogs_Highlighter">\r\n<pre class="brush:javascript;gutter:true;">QUnit.test( "deepEqual test", function( assert ) {\r\n  var obj = { foo: "bar" };\r\n \r\n  assert.deepEqual( obj, { foo: "bar" }, "Two objects can be the same in value" );\r\n});\r\n</pre>\r\n</div>\r\n<p>　　In case you want to explicitly not compare the content of two values,&nbsp;<code class="literal">equal()</code>&nbsp;can still be used. In general,&nbsp;<code class="literal">deepEqual()</code>&nbsp;is the better choice.</p>\r\n<p>&nbsp; &nbsp; &nbsp;一般而言，只要你不需要非常准确的比较，equal()依然可以使用，只是通常来说，deepEqual() 是更好的选择。&nbsp;&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<h2 id="synchronous-callbacks" class="title">Synchronous Callbacks 同步回调</h2>\r\n<h3 id="problem-164" class="title">Problem 问题</h3>\r\n<p>Occasionally, circumstances in your code may prevent callback assertions to never be called, causing the test to fail silently.</p>\r\n<p>&nbsp; &nbsp; 偶尔，你需要预防你的代码中因为有回调方法，永远也不会被调用，于是测试失败。</p>\r\n<h3 id="solution-160" class="title">Solution 方案</h3>\r\n<p>QUnit provides a special assertion to define the number of assertions a test contains. When the test completes without the correct number of assertions, it will fail, no matter what result the other assertions, if any, produced.</p>\r\n<p>&nbsp;Qunit提供了一个特别的包含了大部分测试内容的断言的定义。如果测试完成但是包含的这些断言有不正确的，测试失败，无论其他断言是否成功，如果没有，测试通过。&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>Usage is plain and simple; just call&nbsp;<code class="literal">expect()</code>&nbsp;at the start of a test, with the number of expected assertions as the only argument:</p>\r\n<p>使用的一个例子,调用 expect() 开始测试，使用这个期望断言数量作为参数</p>\r\n<div class="cnblogs_Highlighter">\r\n<pre class="brush:javascript;gutter:true;">QUnit.test( "a test", function( assert ) {\r\n  expect( 2 );\r\n \r\n  function calc( x, operation ) {\r\n    return operation( x );\r\n  }\r\n \r\n  var result = calc( 2, function( x ) {\r\n    assert.ok( true, "calc() calls operation function" );\r\n    return x * x;\r\n  });\r\n \r\n  assert.equal( result, 4, "2 square equals 4" );\r\n});\r\n</pre>\r\n</div>\r\n<p>　实际例子</p>\r\n<div class="cnblogs_Highlighter">\r\n<pre class="brush:javascript;gutter:true;">QUnit.test( "a test", function( assert ) {\r\n  expect( 1 );\r\n \r\n  var $body = $( "body" );\r\n \r\n  $body.on( "click", function() {\r\n    assert.ok( true, "body was clicked!" );\r\n  });\r\n \r\n  $body.trigger( "click" );\r\n});\r\n</pre>\r\n</div>\r\n<p>　　</p>\r\n<h3 id="discussion-id167" class="title">Discussion 讨论</h3>\r\n<p><code class="literal">expect()</code>&nbsp;provides the most value when actually testing callbacks. When all code is running in the scope of the test function,&nbsp;<code class="literal">expect()</code>&nbsp;provides no additional value&mdash;any error preventing assertions to run would cause the test to fail anyway, because the test runner catches the error and fails the unit.</p>\r\n<p>&nbsp; &nbsp;&nbsp;<code class="literal">expect()</code>&nbsp;提供了更多的测试回调的选项。当所有的代码运行在测试方法中的作用域的时候，<code class="literal">expect()</code>&nbsp;没有额外的会导致运行测试失败的选项，因为测试运行器已经捕捉了错误并测试失败。</p>\r\n<h2 id="asynchronous-callbacks" class="title">Asynchronous Callbacks 异步回调</h2>\r\n<h3 id="problem-165" class="title">Problem</h3>\r\n<p>While&nbsp;<code class="literal">expect()</code>&nbsp;is useful to test synchronous callbacks (see&nbsp;<a class="xref" title="Synchronous Callbacks" href="http://qunitjs.com/cookbook/#synchronous-callbacks">the section called "Synchronous Callbacks"</a>), it falls short when Asynchronous callbacks. Asynchronous callbacks conflict with the way the test runner queues and executes tests. When code under test starts a timeout or interval or an Ajax request, the test runner will just continue running the rest of the test, as well as other tests following it, instead of waiting for the result of the asynchronous operation.</p>\r\n<p>&nbsp;<code class="literal">expect()</code>&nbsp;在测试同步回调的时候是非常有用得，参考（(see&nbsp;<a class="xref" title="Synchronous Callbacks" href="http://qunitjs.com/cookbook/#synchronous-callbacks">the section called "Synchronous Callbacks"</a>)），但是在测试异步回调变相形见绌。异步回调执行测试的方法和测试运行器执行队列冲突。当测试代码开始一个timeout 和 interval 或者一个ajax 请求。测试运行器仅仅简单的执行测，其他测试也是一样，而不是等待异步的返回。</p>\r\n<h3 id="solution-161" class="title">Solution 解决</h3>\r\n<p>Instead of wrapping your assertions in a&nbsp;<code class="literal">QUnit.test()</code>, use&nbsp;<code class="literal">QUnit.asyncTest()</code>&nbsp;and call&nbsp;<code class="literal">QUnit.start()</code>&nbsp;when your test block is complete and ready to resume:</p>\r\n<p>代替使用&nbsp;<code class="literal">QUnit.test()来包裹测试断言，使用&nbsp;&nbsp;<code class="literal">QUnit.asyncTest()和&nbsp;<code class="literal">QUnit.start()当测试代码块完成准备处理回调方法：</code></code></code></p>\r\n<div class="cnblogs_Highlighter">\r\n<pre class="brush:javascript;gutter:true;">QUnit.asyncTest( "asynchronous test: one second later!", function( assert ) {\r\n  expect( 1 );\r\n \r\n  setTimeout(function() {\r\n    assert.ok( true, "Passed and ready to resume!" );\r\n    QUnit.start();\r\n  }, 1000);\r\n});\r\n</pre>\r\n</div>\r\n<p>　一个实用的例子&nbsp;</p>\r\n<div class="cnblogs_Highlighter">\r\n<pre class="brush:javascript;gutter:true;">QUnit.asyncTest( "asynchronous test: video ready to play", function( assert ) {\r\n  expect( 1 );\r\n \r\n  var $video = $( "video" );\r\n \r\n  $video.on( "canplaythrough", function() {\r\n    assert.ok( true, "video has loaded and is ready to play" );\r\n    QUnit.start();\r\n  });\r\n});\r\n</pre>\r\n</div>\r\n<p>　</p>\r\n<h2 id="testing-user-actions" class="title">Testing User Actions 测试用户行为</h2>\r\n<h3 id="problem-166" class="title">Problem</h3>\r\n<p>Code that relies on actions initiated by the user can''t be tested by just calling a function. Usually an anonymous function is bound to an element''s event, e.g., a click, which has to be simulated.</p>\r\n<p>有时候代码依赖用户行为初始化，用户不能仅仅调用一个方法来测试。往往是一个被绑定到某个元素事件上的匿名方法，例如需要去模拟一个点击事件。</p>\r\n<h3 id="solution-164" class="title">Solution</h3>\r\n<p>You can trigger the event using jQuery''s&nbsp;<code class="literal">trigger()</code>&nbsp;method and test that the expected behavior occurred. If you don''t want the native browser events to be triggered, you can use&nbsp;<code class="literal">triggerHandler()</code>&nbsp;to just execute the bound event handlers. This is useful when testing a click event on a link, where&nbsp;<code class="literal">trigger()</code>&nbsp;would cause the browser to change the location, which is hardly desired behavior in a test.</p>\r\n<p>&nbsp;你可以使用jQuery的tragger()触发一个一个时间然后测试这个行为导致的异常。如果你不想一个额外的浏览器时间呗触发，你可以使用&nbsp;triggerHandler() 执行绑定在元素上的的方法。这是非常有用的在link 上测试click事件，如果trigger()则会导致浏览器产生一个默认的重定向操作，以至于我们测试它的行为变得困难.</p>\r\n<p>Let''s assume we have a simple key logger that we want to test:</p>\r\n<p>我们假定有一个 简单的key logger方法需要测试</p>\r\n<div class="syntaxhighlighter javascript nogutter">\r\n<div class="cnblogs_Highlighter">\r\n<pre class="brush:javascript;gutter:true;">function KeyLogger( target ) {\r\n  if ( !(this instanceof KeyLogger) ) {\r\n    return new KeyLogger( target );\r\n  }\r\n  this.target = target;\r\n  this.log = [];\r\n \r\n  var self = this;\r\n \r\n  this.target.off( "keydown" ).on( "keydown", function( event ) {\r\n    self.log.push( event.keyCode );\r\n  });\r\n}\r\n</pre>\r\n</div>\r\n<p>　　</p>\r\n</div>\r\n<p>We can manually trigger a keypress event to see whether the logger is working:</p>\r\n<p>我们手动触发一个按键然后看这个方法如何工作</p>\r\n<div class="syntaxhighlighter javascript nogutter">\r\n<div class="cnblogs_Highlighter">\r\n<pre class="brush:javascript;gutter:true;">QUnit.test( "keylogger api behavior", function( assert ) {\r\n \r\n  var event,\r\n      $doc = $( document ),\r\n      keys = KeyLogger( $doc );\r\n \r\n  // trigger event\r\n  event = $.Event( "keydown" );\r\n  event.keyCode = 9;\r\n  $doc.trigger( event );\r\n \r\n  // verify expected behavior\r\n  assert.equal( keys.log.length, 1, "a key was logged" );\r\n  assert.equal( keys.log[ 0 ], 9, "correct key was logged" );\r\n \r\n});\r\n</pre>\r\n</div>\r\n<p>　　</p>\r\n<h3 id="discussion-id169" class="title">Discussion 讨论</h3>\r\n<p>If your event handler doesn''t rely on any specific properties of the event, you can just call&nbsp;<code class="literal">.trigger(eventType)</code>. However, if your event handler does rely on specific properties of the event, you will need to create an event object using<code class="literal">$.Event</code>&nbsp;and set the necessary properties, as shown previously.</p>\r\n<p>如果你的事件响应方法不会依赖任何的特别的event 对象属性，你可以简单的使用 .tragger()。但是如果你的事件响应方法，依赖一些特别的属性和方法，你需要使用$.Event自定义创建一个event对象然后设置一些必要的属性，然后按照之前的方法操作。</p>\r\n<p>It''s also important to trigger all relevant events for complex behaviors such as dragging, which is comprised of mousedown, at least one mousemove, and a mouseup. Keep in mind that even some events that seem simple are actually compound; e.g., a click is really a mousedown, mouseup, and then click. Whether you actually need to trigger all three of these depends on the code under test. Triggering a click works for most cases.</p>\r\n<p>对于非常复杂的行为比如拖拽依赖相关事件是非常重要的，比如mousedown相关的还有&nbsp;mouseup和&nbsp;mousemove，记住，有些事件非常简单，但是实际上有些麻烦，比如 click 事件，实际上会触发&nbsp;mousedown&nbsp;mouseup，然后触发 click事件。无论您是否真的需要再测试中，触发这些依赖的事件。触发click都会导致更多的可能。</p>\r\n<p>If thats not enough, you have a few framework options that help simulating user events:</p>\r\n<p>如果这些还不够，你可以选用一些框架来模拟用户事件</p>\r\n<ul>\r\n<li><a href="https://github.com/bitovi/syn">syn</a>&nbsp;"is a synthetic event library that pretty much handles typing, clicking, moving, and dragging exactly how a real user would perform those actions". Used by FuncUnit, which is based on QUnit, for functional testing of web applications.</li>\r\n<li><a href="http://tinymce.ephox.com/jsrobot">JSRobot</a>&nbsp;- "A testing utility for web-apps that can generate real keystrokes rather than simply simulating the JavaScript event firing. This allows the keystroke to trigger the built-in browser behaviour which isn''t otherwise possible."</li>\r\n<li><a href="http://dojotoolkit.org/reference-guide/1.8/util/dohrobot.html">DOH Robot</a>&nbsp;"provides an API that enables testers to automate their UI tests using real, cross-platform, system-level input events". This gets you the closest to "real" browser events, but uses Java applets for that.</li>\r\n<li><a href="https://github.com/gtramontina/keyvent.js">keyvent.js</a>&nbsp;- "Keyboard events simulator."</li>\r\n</ul>\r\n<h2 id="keeping-tests-atomic" class="title">Keeping Tests Atomic 保持测试独立性</h2>\r\n<h3 id="problem-167" class="title">Problem 问题</h3>\r\n<p>When tests are lumped together, it''s possible to have tests that should pass but fail or tests that should fail but pass. This is a result of a test having invalid results because of side effects of a previous test:</p>\r\n<p>当很多测试一起运行时。可能出现本来应该通过的测试失败了，应该失败的测试通过了。这种结果是无效的，因为造成了后面的结果影响了前面的测试。</p>\r\n<div class="cnblogs_Highlighter">\r\n<pre class="brush:javascript;gutter:true;">QUnit.test( "2 asserts", function( assert ) {\r\nvar $fixture = $( "#qunit-fixture" );\r\n \r\n$fixture.append( "&lt;div&gt;hello!&lt;/div&gt;" );\r\nassert.equal( $( "div", $fixture ).length, 1, "div added successfully!" );\r\n \r\n$fixture.append( "&lt;span&gt;hello!&lt;/span&gt;" );\r\nassert.equal( $( "span", $fixture ).length, 1, "span added successfully!" );\r\n});\r\n</pre>\r\n</div>\r\n<p>　　</p>\r\n<div class="syntaxhighlighter javascript nogutter">&nbsp;</div>\r\n<p>The first&nbsp;<code class="literal">append()</code>&nbsp;adds a&nbsp;<code class="literal">&lt;div&gt;</code>&nbsp;that the second&nbsp;<code>equal()</code>&nbsp;doesn''t take into account.</p>\r\n<p>第一个&nbsp;append() 添加一个 &lt;div&gt; 导致第二个equal()不能成功运行。</p>\r\n<h3 id="solution-165" class="title">&nbsp;Solution</h3>\r\n<p>Use the&nbsp;<code class="literal">QUnit.test()</code>&nbsp;method to keep tests atomic, being careful to keep each assertion clean of any possible side effects. You should only rely on the fixture markup, inside the&nbsp;<code class="literal">#qunit-fixture</code>&nbsp;element. Modifying and relying on anything else can have side effects:</p>\r\n<p>使用 QUnit.test()方法保持测试独立，注意小心清理掉每个测试后造成的影响，你应该使用fixture 标记代替 #qunit-fixture 路由。修改然后没有任何依赖能产生邻近的影响。</p>\r\n<div class="cnblogs_Highlighter">\r\n<pre class="brush:javascript;gutter:true;">QUnit.test( "Appends a div", function( assert ) {\r\nvar $fixture = $( "#qunit-fixture" );\r\n \r\n$fixture.append( "&lt;div&gt;hello!&lt;/div&gt;" );\r\nequal( $( "div", $fixture ).length, 1, "div added successfully!" );\r\n});\r\n \r\nQUnit.test( "Appends a span", function( assert ) {\r\nvar $fixture = $( "#qunit-fixture" );\r\n \r\n$fixture.append("&lt;span&gt;hello!&lt;/span&gt;" );\r\nassert.equal( $( "span", $fixture ).length, 1, "span added successfully!" );\r\n});\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>QUnit will reset the elements inside the&nbsp;<code class="literal">#qunit-fixture</code>&nbsp;element after each test, removing any events that may have existed. As long as you use elements only within this fixture, you don''t have to manually clean up after your tests to keep them atomic.</p>\r\n<p>QUnit 将重置#qunit-fixture元素里面的这个元素在每个测试完成之后，移除所有可能存在在事件。所以你可以全程使用 这个元素，也不用手动在每个测试完成之后清理这个元素 。</p>\r\n<h3 id="discussion-id170" class="title">Discussion 讨论</h3>\r\n<p>In addition to the&nbsp;<code class="literal">#qunit-fixture</code>&nbsp;fixture element and the filters explained in&nbsp;<a class="xref" title="Efficient Development" href="http://qunitjs.com/cookbook/#efficient-development">the section called "Efficient Development"</a>, QUnit also offers a&nbsp;<code class="literal">?noglobals</code>&nbsp;flag. Consider the following test:</p>\r\n<p>更多的&nbsp;#qunit-fixture 这个元素内容和这个元素的解释在&nbsp;&nbsp;<a class="xref" title="Efficient Development" href="http://qunitjs.com/cookbook/#efficient-development">the section called "Efficient Development"</a>, QUnit also 提供了<code class="literal">noglobals</code>&nbsp;标记，考虑了下面的测试</p>\r\n<p>&nbsp;</p>\r\n<div class="syntaxhighlighter javascript nogutter">\r\n<div class="cnblogs_Highlighter">\r\n<pre class="brush:javascript;gutter:true;">QUnit.test( "global pollution", function( assert ) {\r\nwindow.pollute = true;\r\nassert.ok( pollute, "nasty pollution" );\r\n});\r\n</pre>\r\n</div>\r\n<p>　　</p>\r\n</div>\r\n<p>In a normal test run, this passes as a valid result. Running the&nbsp;<code>ok()</code>&nbsp;test with the&nbsp;<a href="http://qunitjs.com/resources/example-cookbook-noglobals.html?noglobals" target="_top">noglobals flag</a>&nbsp;will cause the test to fail, because QUnit detected that it polluted the window object.</p>\r\n<p>作为一个普通的测试，这个通过是无效的。运行 ok() 使用&nbsp;&nbsp;<a href="http://qunitjs.com/resources/example-cookbook-noglobals.html?noglobals" target="_top">noglobals flag</a>&nbsp;将导致测试失败。因为QUnit讲删除Window 对象。</p>\r\n<p>There is no need to use this flag all the time, but it can be handy to detect global namespace pollution that may be problematic in combination with third-party libraries. And it helps to detect bugs in tests caused by side effects.</p>\r\n<p>使用这个选项往往是不必要的，但是却能够控制全局命名空间导致的因为引入三方库产生的问题并且也能帮助处理因为相邻测试用例引发的BUG。</p>\r\n<h2 id="grouping-tests" class="title">Grouping Tests 组测试</h2>\r\n<h3 id="problem-168" class="title">Problem 问题</h3>\r\n<p>You''ve split up all of your tests to keep them atomic and free of side effects, but you want to keep them logically organized and be able to run a specific group of tests on their own.</p>\r\n<p>你可以拆开所有的测试用例，保持测试独立，避免相互影响，但是你也可能想要根据逻辑组织测试然后能够按照特别的组来运行你的测试。</p>\r\n<h3 id="solution-166" class="title">Solution</h3>\r\n<p>You can use the&nbsp;<code class="literal">QUnit.module()</code>&nbsp;function to group tests together:</p>\r\n<p>你能使用 QUnit.module() 方法来每组一起测试。</p>\r\n<div class="syntaxhighlighter javascript nogutter">\r\n<div class="cnblogs_Highlighter">\r\n<pre class="brush:javascript;gutter:true;">QUnit.module( "group a" );\r\nQUnit.test( "a basic test example", function( assert ) {\r\nassert.ok( true, "this test is fine" );\r\n});\r\nQUnit.test( "a basic test example 2", function( assert ) {\r\nassert.ok( true, "this test is fine" );\r\n});\r\n \r\nQUnit.module( "group b" );\r\nQUnit.test( "a basic test example 3", function( assert ) {\r\nassert.ok( true, "this test is fine" );\r\n});\r\nQUnit.test( "a basic test example 4", function( assert ) {\r\nassert.ok( true, "this test is fine" );\r\n});\r\n</pre>\r\n</div>\r\n<p>　　</p>\r\n</div>\r\n<p>All tests that occur after a call to&nbsp;<code class="literal">QUnit.module()</code>&nbsp;will be grouped into that module. The test names will all be preceded by the module name in the test results. You can then use that module name to select tests to run (see&nbsp;<a class="xref" title="Efficient Development" href="http://qunitjs.com/cookbook/#efficient-development">the section called "Efficient Development"</a>).</p>\r\n<p>所有的测试被打包进入模块&nbsp;然后在调用QUnit.module()后一次性被执行。这个测试名将以模块名显示在测试结果中，你可以选择你需要的模块进行测试。具体看see&nbsp;<a class="xref" title="Efficient Development" href="http://qunitjs.com/cookbook/#efficient-development">the section called "Efficient Development"</a></p>\r\n<h3 id="discussion-id171" class="title">Discussion</h3>\r\n<p>In addition to grouping tests,&nbsp;<code class="literal">QUnit.module()</code>&nbsp;can be used to extract common code from tests within that module. The<code class="literal">QUnit.module()</code>&nbsp;function takes an optional second parameter to define functions to run before and after each test within the module:</p>\r\n<p>关于更多的组合测试，QUnit.module() 能从模块内部解压相关代码，QUnit.module() 方法提供了第二个参数定义了这个模块运行时包含的前置用例和后置用例。</p>\r\n<div class="cnblogs_Highlighter">\r\n<pre class="brush:javascript;gutter:true;">QUnit.module( "module", {\r\nsetup: function( assert ) {\r\nassert.ok( true, "one extra assert per test" );\r\n}, teardown: function( assert ) {\r\nassert.ok( true, "and one extra assert after each test" );\r\n}\r\n});\r\nQUnit.test( "test with setup and teardown", function() {\r\nexpect( 2 );\r\n});\r\n</pre>\r\n</div>\r\n<p>　　</p>\r\n<p>You can specify both setup and teardown properties together, or just one of them.</p>\r\n<p>Calling&nbsp;<code class="literal">QUnit.module()</code>&nbsp;again without the additional argument will simply reset any setup/teardown functions defined by another module previously.</p>\r\n<p>你可以一起使用 setup 和 teardown属性，也可以单独使用其中一个，调用 QUnit.module() 不带额外的参数 将使用之前的一个模块来重置这2个属性。</p>\r\n<h2 id="custom-assertions" class="title">Custom Assertions 自定义断言</h2>\r\n<h3 id="problem-170" class="title">Problem 问题</h3>\r\n<p>You have several tests that duplicate logic for asserting some expectation. This repetitive code lessens the readability of your tests and increases the surface for bugs.</p>\r\n<div class="syntaxhighlighter javascript nogutter">\r\n<div class="cnblogs_Highlighter">\r\n<pre class="brush:javascript;gutter:true;">QUnit.test( "retrieving object keys", function( assert ) {\r\nvar objectKeys = keys( { a: 1, b: 2 } );\r\nassert.ok( objectKeys.indexOf("a") &gt; -1, "Object keys" );\r\nassert.ok( objectKeys.indexOf("b") &gt; -1, "Object keys" );\r\n \r\nvar arrayKeys = keys( [1, 2] );\r\nassert.ok( arrayKeys.indexOf("1") &gt; -1, "Array keys" );\r\nassert.ok( arrayKeys.indexOf("2") &gt; -1, "Array keys" );\r\n});\r\n</pre>\r\n</div>\r\n<p>　　</p>\r\n</div>\r\n<h3 id="solution-168" class="title">Solution</h3>\r\n<p>Define a function to encapsulate the expectation in a reusable unit. Invoke&nbsp;<code><a href="http://api.qunitjs.com/QUnit.push/">QUnit.push</a></code>&nbsp;within the body to notify QUnit that an assertion has taken place.</p>\r\n<p>定义一个可以重复使用的方法。条用Qunit.push 在方法内部然后告诉QUnit断言已经发生。</p>\r\n<div class="syntaxhighlighter javascript nogutter">\r\n<div class="cnblogs_Highlighter">\r\n<pre class="brush:javascript;gutter:true;">QUnit.assert.contains = function( needle, haystack, message ) {\r\nvar actual = haystack.indexOf(needle) &gt; -1;\r\nQUnit.push(actual, actual, needle, message);\r\n};\r\nQUnit.test("retrieving object keys", function( assert ) {\r\nvar objectKeys = keys( { a: 1, b: 2 } );\r\nassert.contains( "a", objectKeys, "Object keys" );\r\nassert.contains( "b", objectKeys, "Object keys" );\r\n \r\nvar arrayKeys = keys( [1, 2] );\r\nassert.contains( "1", arrayKeys, "Array keys" );\r\nassert.contains( "2", arrayKeys, "Array keys" );\r\n});\r\n</pre>\r\n</div>\r\n<p>　　</p>\r\n</div>\r\n<h3 id="dicussion-id173" class="title">Discussion 讨论</h3>\r\n<p>Custom assertions can help make test suites more readable and more maintainable. At a minimum, they are simply functions that invoke&nbsp;<code><a href="http://api.qunitjs.com/QUnit.push/">QUnit.push</a></code>&nbsp;with a Boolean value--this is how QUnit detects that an assertion has taken place and the result of that assertion.</p>\r\n<p>自定义断言可以使测试套件，更加可读和更加健壮。至少，这个简单的方法可以使用一个布尔值调用Qunit.push ，Qunit便能够知道断言已经产生或者断言的结果。</p>\r\n<p>It is a good practice to define this function as a method on the global&nbsp;<code><a href="http://api.qunitjs.com/QUnit.assert/">QUnit.assert</a></code>&nbsp;object. This helps communicate the purpose of the function to other developers. You may accomplish this by directly assigning a new property on the object (i.e.&nbsp;<code>QUnit.assert.myAssertion = myAssertion;</code>) or using&nbsp;<code><a href="http://api.qunitjs.com/QUnit.extend/">QUnit.extend</a></code>&nbsp;(i.e.&nbsp;<code>QUnit.extend(QUnit.assert, { myAssertion: myAssertion });</code>).</p>\r\n<p>一个非常适合练习的例子是定义全局的方法到Qunit.assert 。能够帮助其他的开发者交流这个方法的目的。你也可以在这个对象上定义一个新的属性。&nbsp;(i.e.&nbsp;<code>QUnit.assert.myAssertion = myAssertion;</code>) or using&nbsp;<code><a href="http://api.qunitjs.com/QUnit.extend/">QUnit.extend</a></code>&nbsp;(i.e.&nbsp;<code>QUnit.extend(QUnit.assert, { myAssertion: myAssertion });</code>).</p>\r\n<h2 id="efficient-development" class="title">Efficient Development</h2>\r\n<h3 id="problem-169" class="title">Problem</h3>\r\n<p>Once your testsuite takes longer than a few seconds to run, you want to avoid wasting a lot of time just waiting for test results to come in.</p>\r\n<p>一旦你开始测试，测试套件可能运行很长的时间，可能你想要避免浪费大量的额时间在获取测试结果上。</p>\r\n<h3 id="solution-167" class="title">Solution</h3>\r\n<p>QUnit has a bunch of features built in to make up for that. The most interesting ones require just a single click to activate. Toggle the "Hide passed tests" checkbox at the top, and QUnit will only show you tests that failed. That alone doesn''t make a difference in speed, but already helps focusing on failing tests.</p>\r\n<p>Qunit 提供给了一组特性对这些进行改进。仅仅通过鼠标点击即可开启，切换顶部的&ldquo;Hide passed tests&rdquo;选框，Qunit仅仅显示了失败的测试，单独使用不会有任何效果，但是帮助快速定位到失败的用例。</p>\r\n<p>It gets more interesting if you take another QUnit feature into account, which is enabled by default and usually not noticable. Whenever a test fails, QUnit stores the name of that test in&nbsp;<code>sessionStorage</code>. The next time you run a testsuite, that failing test will run before all other tests. The output order isn''t affected, only the execution order. In combination with the "Hide passed tests" checkbox you will then get to see the failing test, if it still fails, at the top, as soon as possible.</p>\r\n<p>另外一个有趣的的特性，默认开启但是不常常被注意到。当一个测试失败，Qunit会记住这个测试的名字，存储在本地存储。下次运行这个测试的时候，失败的测试将会在所有的测试之前运行。输出的顺序不会被改变，但是执行的顺讯会被改变。因此，Hide passed tests 选项，你仍然看到测试失败的用例，如果它仍然失败，你可以立即处理。</p>\r\n<h3 id="discussion-id172" class="title">Discussion 讨论</h3>\r\n<p>The automatic reordering happens by default. It implies that your tests need to be atomic,&nbsp;<a href="http://qunitjs.com/cookbook/">as discussed previously</a>. If your tests aren''t, you''ll see random non-deterministic errors. Fixing that is usually the right approach. If you''re really desperate, you can set&nbsp;<code><a href="http://api.qunitjs.com/QUnit.config/">QUnit.config</a>.reorder = false</code>.</p>\r\n<p>自动重新排序会自动产生，意味着，你测试必须是独立的，就像前面讨论的哪样。如果你测试不是独立的，你可能会看到一些随机导致的错误。你可以使用正常的方法进行修复。如果你真的不想使用，你可以使用 Qunit.config.reorder = false 关闭这个功能。</p>\r\n<p>In addition to the automatic reordering, there are a few manual options available. You can rerun any test by clicking the "Rerun" link next to that test. That will add a "testNumber=N" parameter to the query string, where "N" is the number of the test you clicked. You can then reload the page to keep running just that test, or use the browser''s back button to go back to running all tests.</p>\r\n<p><span>除了自动排序，有一些手动选项。<span>你可以通过点击Rerun重新运行任何测试。<span>这将添加一个&ldquo;testnumber = N&rdquo;参数查询字符串，&ldquo;N&rdquo;是测试你的点击数。<span>然后你可以<span>重新载入页面<span>保持运行<span><span>测试<span>，<span>或<span>使用浏览器的<span>返回按钮，<span><span>运行<span>所有的测试<span>。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\r\n<p>Running all tests within a module works pretty much the same way, except that you choose the module to run using the select at the top right. It''ll set a "module=N" query string, where "N" is the encoded name of the module, for example "?module=testEnvironment%20with%20object".</p>\r\n<p><span>包含在模块里面的测试将被以特定的方式全部运行，除非你在右上方选择特定的模块运行。<span>它<span>将<span>建立一个&ldquo;<span>模块＝<span>N&rdquo;<span>查询字符串<span>，<span>&ldquo;<span>N&rdquo;<span>是模块的<span>编码<span>名称<span>，<span>例如<span>&ldquo;?module=testEnvironment%20with%20object<span><span><span><span><span><span><span><span><span>&rdquo;<span>。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\r\n<h2 id="more-tutorials" class="title">Further tutorials 更多的教程</h2>\r\n<ul>\r\n<li><a class="external text" title="http://www.swift-lizard.com/2009/11/24/test-driven-development-with-jquery-qunit/" href="http://www.swift-lizard.com/2009/11/24/test-driven-development-with-jquery-qunit/">A short QUnit introduction in english</a></li>\r\n<li><a class="external text" title="http://www.aspnetzone.de/blogs/robertobez/archive/2009/12/02/jQuery-javascript-qunit-unit-test-framework.aspx" href="http://www.aspnetzone.de/blogs/robertobez/archive/2009/12/02/jQuery-javascript-qunit-unit-test-framework.aspx">A short QUnit introduction in german</a></li>\r\n<li><a class="external text" title="http://net.tutsplus.com/tutorials/javascript-ajax/how-to-test-your-javascript-code-with-qunit/" href="http://net.tutsplus.com/tutorials/javascript-ajax/how-to-test-your-javascript-code-with-qunit/">Nettuts on Testing with QUnit</a></li>\r\n<li><a class="external text" title="http://twoguysarguing.wordpress.com/2010/11/02/make-javascript-tests-part-of-your-build-qunit-rhino/" href="http://twoguysarguing.wordpress.com/2010/11/02/make-javascript-tests-part-of-your-build-qunit-rhino/">Running QUnit tests with Rhino</a></li>\r\n<li><a class="external text" title="http://martinfowler.com/articles/nonDeterminism.html" href="http://martinfowler.com/articles/nonDeterminism.html">Martin Fowler on Eradicating Non-Determinism in Tests. Not QUnit specific, but very useful advice and a lot of it applies to JavaScript</a></li>\r\n<li><a class="external text" title="http://msdn.microsoft.com/en-us/scriptjunkie/gg749824.aspx" href="http://msdn.microsoft.com/en-us/scriptjunkie/gg749824.aspx">ScriptJunkie article on Automating JavaScript Testing with QUnit</a></li>\r\n<li><a href="http://benalman.com/talks/unit-testing-qunit.html">Ben Alman''s slides on "Unit Testing with QUnit"</a></li>\r\n</ul>\r\n<p>If you want to read more on unit testing JavaScript (not specific to QUnit), check out the book&nbsp;<a class="external text" title="http://tddjs.com/" href="http://tddjs.com/">Test-Driven JavaScript Development</a>.</p>\r\n<p>如果你想阅读更多关于JavasScript 单元测试（不仅仅是Qunit），参考书籍&nbsp;<a class="external text" title="http://tddjs.com/" href="http://tddjs.com/">Test-Driven JavaScript Development</a>.</p>\r\n<p><em>*This section was first published, under a non-exclusive license, as the last chapter in the jQuery Cookbook, authored by Scott Gonz&aacute;lez and J&ouml;rn Zaefferer. As QUnit changed since the book was printed, this version is more up-to-date.</em></p>\r\n<p><em>*这个章节是第一次出版，属于公共署名协议，座位Jquery CookBook的最后一个章节，作者是<em>Scott Gonz&aacute;lez 和 J&ouml;rn Zaefferer 随着Qunit的修改以及此书被印刷，这个版本是目前最新。</em></em></p>\r\n</div>', 0, 1, NULL, 'post', 'publish', NULL, 0, '1', '1', '1', 0);
INSERT INTO `typecho_contents` (`cid`, `title`, `slug`, `created`, `modified`, `text`, `order`, `authorId`, `template`, `type`, `status`, `password`, `commentsNum`, `allowComment`, `allowPing`, `allowFeed`, `parent`) VALUES
(35, 'QQ Photo20150513194835.jpg', 'QQ-Photo20150513194835-jpg', 1431517723, 1431517723, 'a:5:{s:4:"name";s:26:"QQ Photo20150513194835.jpg";s:4:"path";s:34:"/usr/uploads/2015/05/864021467.jpg";s:4:"size";i:60304;s:4:"type";s:3:"jpg";s:4:"mime";b:0;}', 1, 1, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 38),
(36, 'QQ Photo20150513194835.jpg', 'QQ-Photo20150513194835-jpg-1', 1431518485, 1431518485, 'a:5:{s:4:"name";s:26:"QQ Photo20150513194835.jpg";s:4:"path";s:35:"/usr/uploads/2015/05/1314062709.jpg";s:4:"size";i:146104;s:4:"type";s:3:"jpg";s:4:"mime";b:0;}', 2, 1, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 38),
(37, 'QQ Photo20150513194835.jpg', 'QQ-Photo20150513194835-jpg-2', 1431519035, 1431519035, 'a:5:{s:4:"name";s:26:"QQ Photo20150513194835.jpg";s:4:"path";s:35:"/usr/uploads/2015/05/3095763438.jpg";s:4:"size";i:243429;s:4:"type";s:3:"jpg";s:4:"mime";b:0;}', 3, 1, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 38),
(38, 'ajaxfileupload.js 原理、常见错误及注意事项', '38', 1431519060, 1432778932, '<!--markdown-->刚刚接到一个BUG任务，在IE8中使用ajaxfileupload组件无法上传文件到服务器，根据单步调试（IE的单步调试还是比较有用）并分析了ajaxfileupload组件。\r\n\r\n**问题**\r\n 组件抛出错误为“拒绝访问”，使用控制台发现数据已经返回，服务器上已经成功上传，但是客户端无法获取到结果，因此提示上传失败。\r\n\r\n![QQ Photo20150513194835.jpg][1]\r\n\r\n\r\n\r\n**使用该组件**\r\n\r\n下载该组件 [点击下载][2]    \r\n\r\n    $.ajaxFileUpload({\r\n        url: ''upload.php'', //上传地址，需要注意跨域问题\r\n        secureuri: false,\r\n        data: data,\r\n        fileElementId: ''fileToUpload'', //该上传input 的ID\r\n        dataType: ''json'',\r\n        success: function (data) {\r\n            alert(data.msg);\r\n \r\n        },\r\n        error: function (data) {\r\n            alert("error");\r\n        }\r\n    });\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n**ajaxfileupload 主要原理**\r\n    \r\n\r\n 1. 创建一个iframe 和 form 然后把需要上传的表单装载\r\n 2. 发起POST请求，然后从IFrame中获取返回来的结果\r\n\r\n\r\n**解决方法**\r\n 在IE8中获取iframe 得到拒绝访问错误，但是没有发生跨域问题，应该不存在这个问题，跟踪了很久，其中使用HTTP请求的查看工具发现一个问题\r\n\r\n其中一个接口响应了如图所示\r\n\r\n![QQ Photo20150513194835.jpg][3]\r\n\r\nHTTP请求返回的content type 字段和期望的不一致，发现并不是text/html，IE8会使用active 控件解析返回来的，但是Js无法和解析的内容通信，造成错误 服务器修复了之后解决了这个问题\r\n\r\n修改后的请求\r\n\r\n![QQ Photo20150513194835.jpg][4]\r\n\r\n\r\n**IE8下使用ajaxfileupload的其他注意事项**\r\n1. 文件控件file input被挡住，IE8会认为不是用户直接点击无法发起form请求\r\n2. 跨域上传问题，如果跨域了，自然无法上传了，IE8无法访问iframe里面的资源\r\n3. 设置了document.domain 如果设置了这个，可能造成跨域的问题\r\n\r\n\r\n  [1]: http://bcs.duapp.com/helpjs/usr/uploads/2015/05/864021467.jpg\r\n  [2]: http://files.jb51.net/file_images/article/201306/js/ajaxfileupload.js\r\n  [3]: http://bcs.duapp.com/helpjs/usr/uploads/2015/05/1314062709.jpg\r\n  [4]: http://bcs.duapp.com/helpjs/usr/uploads/2015/05/3095763438.jpg', 0, 1, NULL, 'post', 'publish', NULL, 0, '1', '1', '1', 0),
(13, 'javascript 从去重到排序的考量', '13', 1421293740, 1421294166, '<!--markdown-->写这篇文章的原因是因为在某个简单的问题上翻船，往往高手和新手的区别就在于看似平常的地方，一直以来都在思考高手和新手的本质区别，高手绝非工作经验和工作时间的堆积造就的，10年工作经验的人也许是1年工作经验用了十年也不一定。\r\n\r\n这里有一道题目，是这样：**数组去重、并按倒数第二个字母排序**\r\n\r\n这个问题实在是非常简单\r\n   去重：定义一个新的数组，取出原数组的元素，依次放入新的数组，放入之前需要检查是否在新的数组已经存在即可。\r\n   排序：使用数组的sort()方法，javascript 默认使用冒泡排序，只需要传入2个元素的比较结果即可，按照题目，只需要取出字母，然后比较即可。\r\n   于是得到代码：\r\n\r\n    function uniqe(arr){\r\n    var tmp = {};\r\n    var result = [];\r\n    for(var i = 0,len = arr.length;i < len;i ++){\r\n        var item = arr[i];\r\n        if(item in tmp){\r\n            continue;\r\n        }\r\n        result.push(item);\r\n    }\r\n    return result.sort(function(a,b){\r\n        return a.charCodeAt(a.length-2) - b.charCodeAt(b.length-2);\r\n    });\r\n}\r\n\r\nvar arr =[''hello'',''world'',''nodejs'',''javascript'',\r\n          ''html'',''world'',''css'',''flash'',''adobe'',''java'',''hello''];\r\nuniqe(arr)\r\n\r\n那么我们把这个问题继续简化！！**数字数组去重、并排序。**\r\n看这个问题是否更加简单？但是等等，这种基础函数，一般都需要承载丰富的业务逻辑，被大量引用，也许是在循环等复杂的逻辑中，因此要求足够健壮、高效。我们不仅需要检查输入还需要选择更好算法，解决这个问题的思路应该是：step1 排序 setp2 查找 step3 去重\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n**快速排序算法**\r\n\r\n    function quickSort(arr) {\r\n    if (arr.length <= 1) { return arr; }\r\n    var pivotIndex = Math.floor(arr.length / 2);\r\n　　var pivot = arr.splice(pivotIndex, 1)[0];\r\n　　var left = [];\r\n　　var right = [];\r\n　　for (var i = 0; i < arr.length; i++){\r\n　　　　if (arr[i] < pivot) {\r\n　　　　　　left.push(arr[i]);\r\n　　　　} else {\r\n　　　　　　right.push(arr[i]);\r\n　　　　}\r\n　　}\r\n    return _.quickSort(left).concat([pivot], _.quickSort(right));\r\n}\r\n\r\n**二分法查找**\r\n\r\n    function binarySearch(items,value){\r\n    var startIndex = 0, \r\n    stopIndex = items.length - 1, \r\n    middle = Math.floor((stopIndex + startIndex)/2); \r\n    while(items[middle] != value && startIndex < stopIndex){ \r\n        if (value < items[middle]){ \r\n            stopIndex = middle - 1; \r\n        } else if (value > items[middle]){ \r\n            startIndex = middle + 1; \r\n        } \r\n        middle = Math.floor((stopIndex + startIndex)/2); \r\n    } \r\n    return (items[middle] != value) ? -1 : middle; \r\n}\r\n\r\n**去重**\r\n\r\n    function distinct(arr){\r\n    arr = this.quickSort(arr);\r\n　　for (var i = 0; i < arr.length; i++){\r\n        var cell = arr.pop();\r\n        if (this.binarySearch(arr,cell) == -1) {\r\n            arr.push(cell);\r\n        };\r\n　　}\r\n    return arr;\r\n}\r\n\r\n但是到了这里绝对还没完！\r\n高质量的代码还需要测试，我们引入Qunit，但是我们需要产生模拟数据，我们可以使用Mock.js\r\n', 0, 1, NULL, 'post', 'publish', NULL, 1, '1', '1', '1', 0);
INSERT INTO `typecho_contents` (`cid`, `title`, `slug`, `created`, `modified`, `text`, `order`, `authorId`, `template`, `type`, `status`, `password`, `commentsNum`, `allowComment`, `allowPing`, `allowFeed`, `parent`) VALUES
(15, '对小菜同学整理的web前端面试题的答案', '15', 1426655160, 1426780835, '<!--markdown-->**题目来源小菜同学，花了一点时间把答案写了下，顺便检验下水平**\r\nhttp://icaife.github.io/2015/03/02/fe-interview-summarize/\r\n\r\n**什么是HTML？**    \r\n> 超文本标记语言，标准通用标记语言下的一个应用。\r\n\r\n**DOCTYPE的作用？严格模式与混杂模式，如何触发？**\r\n> DOCTYPE标签是一种标准通用标记语言的文档类型声明，它的目的是要告诉标准通用标记语言解析器，它应该使用什么样的文档类型定义（DTD）来解析文档。\r\n\r\n**HTML语义化，以及好处。**\r\n> 语义化是指用合理HTML标记以及其特有的属性去格式化文档内容。通俗地讲,语义化就是对数据和信息进行处理,使得机器可以理解.\r\n\r\n**HTML5新增的几个标签，flash和HTML5的优缺点。**\r\n> \\<canvas>\r\n\\<source>\r\n\\<audio>\r\n\\<embed>\r\n\\<track>\r\n\\<video>\r\n\\<datalist>\r\n\\<keygen>\r\n\\<output>\r\n\\<article>\r\n\\<aside>\r\n\\<bdi>\r\n\\<command>\r\n\\<details>\r\n\\<dialog>\r\n\\<summary>\r\n\\<figcaption>\r\n\\<figure>\r\n\\<footer>\r\n\\<header>\r\n\\<mark>\r\n\\<meter>\r\n\\<nav>\r\n\\<progress>\r\n\\<ruby>\r\n\\<rt>\r\n\\<rp>\r\n\\<section>\r\n\\<time>\r\n\\<wbr>\r\n\r\n**ol dl ul 是什么东东？**\r\n>1.ul是无序列表，也就是说没有排列限制可以随意加li； \r\n\\<ul> \r\n\\<li>可以随意放置\\</li> \r\n\\<li>可以随意放置\\</li> \r\n\\<li>可以随意放置\\</li> \r\n\\</ul> \r\n.可以随意放置 \r\n.可以随意放置 \r\n.可以随意放置 \r\n2.ol就序列表，会按照你写的li前后依次排列； \r\n\\<ol> \r\n\\<li>我是第一\\</li> \r\n\\<li>我是第二\\</li> \r\n\\<li>我是第三\\</li> \r\n\\</ol> \r\n1.我是第一 \r\n2.我是第二 \r\n3.我是第三 \r\n3、dl是定义列表，会默认前后层级关系； \r\n\\<dl> \r\n\\<dt>我是头\\</dt> \r\n\\<dd>我是内容\\</dd> \r\n\\<dd>我是内容\\</dd> \r\n\\</dl> \r\n\r\n**对WEB标准的理解。**\r\n> WEB标准不是某一个标准，而是一系列标准的集合。网页主要由三部分组成：结构（Structure）、表现（Presentation）和行为（Behavior）。对应的标准也分三方面：结构化标准语言主要包括XHTML和XML，表现标准语言主要包括CSS，行为标准主要包括对象模型（如W3C DOM）、ECMAScript等。这些标准大部分由万维网联盟（外语缩写：W3C）起草和发布，也有一些是其他标准组织制订的标准，比如ECMA（European Computer Manufacturers Association）的ECMAScript标准。\r\n\r\n**什么是web components？**\r\n> 没有统一的解释，可以理解为web组件\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n**HTTP请求有哪几种方法？HTTP报文理解一下。HTTP握手？**\r\n>包括OPTIONS、GET、HEAD、POST、PUT、DELETE、TRACE方法\r\n报文格式![][1]<p>GET /search?hl=zh-CN&source=hp&q=domety&aq=f&oq= HTTP/1.1  \r\nAccept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/vnd.ms-excel, application/vnd.ms-powerpoint, \r\napplication/msword, application/x-silverlight, application/x-shockwave-flash, */*  \r\nReferer: <a href="http://www.google.cn/">http://www.google.cn/</a>  \r\nAccept-Language: zh-cn  \r\nAccept-Encoding: gzip, deflate  \r\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; TheWorld)  \r\nHost: <a href="http://www.google.cn">www.google.cn</a>  \r\nConnection: Keep-Alive  \r\nCookie: PREF=ID=80a06da87be9ae3c:U=f7167333e2c3b714:NW=1:TM=1261551909:LM=1261551917:S=ybYcq2wpfefs4V9g; \r\nNID=31=ojj8d-IygaEtSxLgaJmqSjVhCspkviJrB6omjamNrSm8lZhKy_yMfO2M4QMRKcH1g0iQv9u-2hfBW7bUFwVh7pGaRUb0RnHcJU37y-\r\nFxlRugatx63JLv7CWMD6UB_O_r  \r\n\r\n**ajax是什么？由哪几种技术组成？ajax的优缺点？服务器怎么判断请求是一个ajax请求？不同浏览器之间创建xhr 差异？**\r\n>AJAX即“Asynchronous Javascript And XML”（异步JavaScript和XML），是指一种创建交互式网页应用的网页开发技术\r\n\r\n**浏览器的缓存策略，啥是协商缓存？**\r\n>首先抄来一段cache-control 的value定义:\r\nttp协议-缓存控制:no-cache/must-revalidate/no-store\r\n  客户端从服务器请求数据经历如下基本步骤:\r\n  1、如果请求命中本地缓存则从本地缓存中获取一个对应资源的"copy"；\r\n  2、检查这个"copy"是否fresh,是则直接返回，否则继续向服务器转发请求。\r\n  3、服务器接收到请求，然后判断资源是否变更，是则返回新内容，否则返回304，未变更。\r\n  4、客户端更新本地缓存。\r\n  no-cache的作用是：强制客户端跳过步骤2，直接向服务器发送请求。也就是说每次请求都必须向服务器发送。\r\n  must-revalidate:作用与no-cache相同，但更严格，强制意味更明显。但这只是理论上的描述，根据我在ff6上的测试，它几乎不起作用：只要请求的频率加快到一定程度，服务器就接收不到请求。\r\n  no-store:缓存将不存储response,包括header和body。测试结果表明，除每次请求都必发送到服务器外，响应代码均是200，且request并没有发送"If-Modified-Since"和"If-None-Match"头，这意味着缓存的确没有存储response。\r\n来自:http://blog.163.com/silver9886@126/blog/static/35971862201422375614469/\r\n\r\n**HTTP状态码，200 302 304 403 404 500….**\r\n<table class="toolTable table" width="100%" cellspacing="0" cellpadding="0">\r\n	<tbody><tr>\r\n		<th class="separateColor" width="60px;">状态码</th>\r\n		<th>含义</th>\r\n	</tr>\r\n	<tr>\r\n		<td>100</td>\r\n		<td>客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。</td>\r\n	</tr>\r\n	<tr>\r\n		<td>101</td>\r\n		<td>服务器已经理解了客户端的请求，并将通过Upgrade 消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade 消息头中定义的那些协议。\r\n　　只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP 版本比旧版本更有优势，或者切换到一个实时且同步的协议以传送利用此类特性的资源。</td>\r\n	</tr>\r\n	<tr>\r\n		<td>102</td>\r\n		<td>由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行。</td>\r\n	</tr>\r\n	<tr>\r\n		<td>200</td>\r\n		<td>请求已成功，请求所希望的响应头或数据体将随此响应返回。</td>\r\n	</tr>\r\n	<tr>\r\n		<td>201</td>\r\n		<td>请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回。假如需要的资源无法及时建立的话，应当返回 ''202 Accepted''。</td>\r\n	</tr>\r\n	<tr>\r\n		<td>202</td>\r\n		<td>服务器已接受请求，但尚未处理。正如它可能被拒绝一样，最终该请求可能会也可能不会被执行。在异步操作的场合下，没有比发送这个状态码更方便的做法了。\r\n　　返回202状态码的响应的目的是允许服务器接受其他过程的请求（例如某个每天只执行一次的基于批处理的操作），而不必让客户端一直保持与服务器的连接直到批处理操作全部完成。在接受请求处理并返回202状态码的响应应当在返回的实体中包含一些指示处理当前状态的信息，以及指向处理状态监视器或状态预测的指针，以便用户能够估计操作是否已经完成。</td>\r\n	</tr>\r\n	<tr>\r\n		<td>203</td>\r\n		<td>服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超级。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。</td>\r\n	</tr>\r\n	<tr>\r\n		<td>204</td>\r\n		<td>服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。\r\n　　如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。\r\n　　由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。</td>\r\n	</tr>\r\n	<tr>\r\n		<td>205</td>\r\n		<td>服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。\r\n　　与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。</td>\r\n	</tr>\r\n	<tr>\r\n		<td>206</td>\r\n		<td>服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。\r\n　　该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。\r\n　　响应必须包含如下的头部域：\r\n　　Content-Range 用以指示本次响应中返回的内容的范围；如果是 Content-Type 为 multipart/byteranges 的多段下载，则每一 multipart 段中都应包含 Content-Range 域用以指示本段的内容范围。假如响应中包含 Content-Length，那么它的数值必须匹配它返回的内容范围的真实字节数。\r\n　　Date\r\n　　ETag 和/或 Content-Location，假如同样的请求本应该返回200响应。\r\n　　Expires, Cache-Control，和/或 Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。\r\n　　假如本响应请求使用了 If-Range 强缓存验证，那么本次响应不应该包含其他实体头；假如本响应的请求使用了 If-Range 弱缓存验证，那么本次响应禁止包含其他实体头；这避免了缓存的实体内容和更新了的实体头信息之间的不一致。否则，本响应就应当包含所有本应该返回200响应中应当返回的所有实体头部域。\r\n　　假如 ETag 或 Last-Modified 头部不能精确匹配的话，则客户端缓存应禁止将206响应返回的内容与之前任何缓存过的内容组合在一起。\r\n　　任何不支持 Range 以及 Content-Range 头的缓存都禁止缓存206响应返回的内容。</td>\r\n	</tr>\r\n	<tr>\r\n		<td>207</td>\r\n		<td>由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</td>\r\n	</tr>\r\n	<tr>\r\n		<td>300</td>\r\n		<td>被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。\r\n　　除非这是一个 HEAD 请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由 Content-Type 定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616规范并没有规定这样的自动选择该如何进行。\r\n　　如果服务器本身已经有了首选的回馈选择，那么在 Location 中应当指明这个回馈的 URI；浏览器可能会将这个 Location 值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。</td>\r\n	</tr>\r\n	<tr>\r\n		<td>301</td>\r\n		<td>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。\r\n　　新的永久性的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。\r\n　　如果这不是一个 GET 或者 HEAD 请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。\r\n　　注意：对于某些使用 HTTP/1.0 协议的浏览器，当它们发送的 POST 请求得到了一个301响应的话，接下来的重定向请求将会变成 GET 方式。</td>\r\n	</tr>\r\n	<tr>\r\n		<td>302</td>\r\n		<td>请求的资源现在临时从不同的 URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。\r\n　　新的临时性的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。\r\n　　如果这不是一个 GET 或者 HEAD 请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。\r\n　　注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用 GET 方式访问在 Location 中规定的 URI，而无视原先请求的方法。状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。</td>\r\n	</tr>\r\n		<tr>\r\n		<td>303</td>\r\n		<td>对应当前请求的响应可以在另一个 URI 上被找到，而且客户端应当采用 GET 的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的 URI 不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。\r\n　　新的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。\r\n　　注意：许多 HTTP/1.1 版以前的 浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</td>\r\n	</tr>\r\n		<tr>\r\n		<td>304</td>\r\n		<td>如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。\r\n　　该响应必须包含以下的头信息：\r\n　　Date，除非这个服务器没有时钟。假如没有时钟的服务器也遵守这些规则，那么代理服务器以及客户端可以自行将 Date 字段添加到接收到的响应头中去（正如RFC 2068中规定的一样），缓存机制将会正常工作。\r\n　　ETag 和/或 Content-Location，假如同样的请求本应返回200响应。\r\n　　Expires, Cache-Control，和/或Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。\r\n　　假如本响应请求使用了强缓存验证，那么本次响应不应该包含其他实体头；否则（例如，某个带条件的 GET 请求使用了弱缓存验证），本次响应禁止包含其他实体头；这避免了缓存了的实体内容和更新了的实体头信息之间的不一致。\r\n　　假如某个304响应指明了当前某个实体没有缓存，那么缓存系统必须忽视这个响应，并且重复发送不包含限制条件的请求。\r\n　　假如接收到一个要求更新某个缓存条目的304响应，那么缓存系统必须更新整个条目以反映所有在响应中被更新的字段的值。</td>\r\n	</tr>\r\n		<tr>\r\n		<td>305</td>\r\n		<td>被请求的资源必须通过指定的代理才能被访问。Location 域中将给出指定的代理所在的 URI 信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能建立305响应。\r\n　　注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果。</td>\r\n	</tr>\r\n		<tr>\r\n		<td>306</td>\r\n		<td>在最新版的规范中，306状态码已经不再被使用。</td>\r\n	</tr>\r\n		<tr>\r\n		<td>307</td>\r\n		<td>请求的资源现在临时从不同的URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。\r\n　　新的临时性的URI 应当在响应的 Location 域中返回。除非这是一个HEAD 请求，否则响应的实体中应当包含指向新的URI 的超链接及简短说明。因为部分浏览器不能识别307响应，因此需要添加上述必要信息以便用户能够理解并向新的 URI 发出访问请求。\r\n　　如果这不是一个GET 或者 HEAD 请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</td>\r\n	</tr>\r\n		<tr>\r\n		<td>400</td>\r\n		<td>1、语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。\r\n　　2、请求参数有误。</td>\r\n	</tr>\r\n			<tr>\r\n		<td>401</td>\r\n		<td>当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。参见RFC 2617。</td>\r\n	</tr>		<tr>\r\n		<td>402</td>\r\n		<td>该状态码是为了将来可能的需求而预留的。</td>\r\n	</tr>		<tr>\r\n		<td>403</td>\r\n		<td>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</td>\r\n	</tr>		<tr>\r\n		<td>404</td>\r\n		<td>请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</td>\r\n	</tr>		<tr>\r\n		<td>405</td>\r\n		<td>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。\r\n　　鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</td>\r\n	</tr>		<tr>\r\n		<td>406</td>\r\n		<td>请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。\r\n　　除非这是一个 HEAD 请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由 Content-Type 头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。</td>\r\n	</tr>		<tr>\r\n		<td>407</td>\r\n		<td>　与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个 Proxy-Authenticate 用以进行身份询问。客户端可以返回一个 Proxy-Authorization 信息头用以验证。参见RFC 2617。</td>\r\n	</tr>		<tr>\r\n		<td>408</td>\r\n		<td>请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。</td>\r\n	</tr>		<tr>\r\n		<td>409</td>\r\n		<td>由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。\r\n　　冲突通常发生于对 PUT 请求的处理中。例如，在采用版本检查的环境下，某次 PUT 提交的对特定资源的修改请求所附带的版本信息与之前的某个（第三方）请求向冲突，那么此时服务器就应该返回一个409错误，告知用户请求无法完成。此时，响应实体中很可能会包含两个冲突版本之间的差异比较，以便用户重新提交归并以后的新版本。</td>\r\n	</tr>		<tr>\r\n		<td>410</td>\r\n		<td>被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用404状态码。除非额外说明，否则这个响应是可缓存的。\r\n　　410响应的目的主要是帮助网站管理员维护网站，通知用户该资源已经不再可用，并且服务器拥有者希望所有指向这个资源的远端连接也被删除。这类事件在限时、增值服务中很普遍。同样，410响应也被用于通知客户端在当前服务器站点上，原本属于某个个人的资源已经不再可用。当然，是否需要把所有永久不可用的资源标记为''410 Gone''，以及是否需要保持此标记多长时间，完全取决于服务器拥有者。</td>\r\n	</tr>		<tr>\r\n		<td>411</td>\r\n		<td>服务器拒绝在没有定义 Content-Length 头的情况下接受请求。在添加了表明请求消息体长度的有效 Content-Length 头之后，客户端可以再次提交该请求。</td>\r\n	</tr>		<tr>\r\n		<td>412</td>\r\n		<td>服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</td>\r\n	</tr>		<tr>\r\n		<td>413</td>\r\n		<td>服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。\r\n　　如果这个状况是临时的，服务器应当返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试。</td>\r\n	</tr>		<tr>\r\n		<td>414</td>\r\n		<td>请求的URI 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括：\r\n　　本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query String）过长。\r\n　　重定向URI “黑洞”，例如每次重定向把旧的 URI 作为新的 URI 的一部分，导致在若干次重定向后 URI 超长。\r\n　　客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的 URI，当 GET 后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行[1]。没有此类漏洞的服务器，应当返回414状态码。</td>\r\n	</tr>		<tr>\r\n		<td>415</td>\r\n		<td>对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。</td>\r\n	</tr>		<tr>\r\n		<td>416</td>\r\n		<td>如果请求中包含了 Range 请求头，并且 Range 中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义 If-Range 请求头，那么服务器就应当返回416状态码。\r\n　　假如 Range 使用的是字节范围，那么这种情况就是指请求指定的所有数据范围的首字节位置都超过了当前资源的长度。服务器也应当在返回416状态码的同时，包含一个 Content-Range 实体头，用以指明当前资源的长度。这个响应也被禁止使用 multipart/byteranges 作为其 Content-Type。</td>\r\n	</tr>		<tr>\r\n		<td>417</td>\r\n		<td>在请求头 Expect 中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服务器，它有明显的证据证明在当前路由的下一个节点上，Expect 的内容无法被满足。</td>\r\n	</tr>		<tr>\r\n		<td>421</td>\r\n		<td>从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。</td>\r\n	</tr>		<tr>\r\n		<td>422</td>\r\n		<td>从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。</td>\r\n	</tr>		<tr>\r\n		<td>422</td>\r\n		<td>请求格式正确，但是由于含有语义错误，无法响应。（RFC 4918 WebDAV）423 Locked\r\n　　当前资源被锁定。（RFC 4918 WebDAV）</td>\r\n	</tr>		<tr>\r\n		<td>424</td>\r\n		<td>由于之前的某个请求发生的错误，导致当前请求失败，例如 PROPPATCH。（RFC 4918 WebDAV）</td>\r\n	</tr>		<tr>\r\n		<td>425</td>\r\n		<td>在WebDav Advanced Collections 草案中定义，但是未出现在《WebDAV 顺序集协议》（RFC 3658）中。</td>\r\n	</tr>		<tr>\r\n		<td>426</td>\r\n		<td>客户端应当切换到TLS/1.0。（RFC 2817）</td>\r\n	</tr>		<tr>\r\n		<td>449</td>\r\n		<td>由微软扩展，代表请求应当在执行完适当的操作后进行重试。</td>\r\n	</tr>		<tr>\r\n		<td>500</td>\r\n		<td>服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器的程序码出错时出现。</td>\r\n	</tr>		<tr>\r\n		<td>501</td>\r\n		<td>服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。</td>\r\n	</tr>		<tr>\r\n		<td>502</td>\r\n		<td>作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</td>\r\n	</tr>		<tr>\r\n		<td>503</td>\r\n		<td>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理500响应的方式处理它。\r\n　　注意：503状态码的存在并不意味着服务器在过载的时候必须使用它。某些服务器只不过是希望拒绝客户端的连接。</td>\r\n	</tr>		<tr>\r\n		<td>504</td>\r\n		<td>作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。\r\n　　注意：某些代理服务器在DNS查询超时时会返回400或者500错误</td>\r\n	</tr>		<tr>\r\n		<td>505</td>\r\n		<td>服务器不支持，或者拒绝支持在请求中使用的 HTTP 版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。</td>\r\n	</tr>		<tr>\r\n		<td>506</td>\r\n		<td>由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误：被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。</td>\r\n	</tr>\r\n	<tr>\r\n		<td>507</td>\r\n		<td>服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。WebDAV (RFC 4918)</td>\r\n	</tr>\r\n		<tr>\r\n		<td>509</td>\r\n		<td>服务器达到带宽限制。这不是一个官方的状态码，但是仍被广泛使用。</td>\r\n	</tr>\r\n		<tr>\r\n		<td>510</td>\r\n		<td>获取资源所需要的策略并没有没满足。（RFC 2774）</td>\r\n	</tr>\r\n</tbody></table>\r\n\r\n**cookie是什么？如何设置cookie，如何删除cookie，如何设置cookie 的存在时间？cookie优化？**\r\n>Cookie，有时也用其复数形式Cookies，指某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密）。定义于RFC2109和2965都已废弃，最新取代的规范是RFC6265[1] 。\r\n\r\n**session是什么？cookie和session的区别。session的实现原理？如果浏览器禁用了cookie，session怎么实现的？（java中的servlet的生命周期？）**\r\n>计算机中指的是会话，注意不一定是HTTP请求会话也就是对应Cookie的session\r\n\r\n**从用户在浏览器里面输入地址敲击回车到页面完全展示出来经历了哪些过程，越详细越好。**\r\n>换个描述方式，即HTTP请求过程 \r\n1、建立TCP连接\r\n在HTTP工作开始之前，Web浏览器首先要通过网络与Web服务器建立连接，该连接是通过TCP来完成的，该协议与IP协议共同构建Internet，即著名的TCP/IP协议族，因此Internet又被称作是TCP/IP网络。HTTP是比TCP更高层次的应用层协议，根据规则，只有低层协议建立之后才能，才能进行更层协议的连接，因此，首先要建立TCP连接，一般TCP连接的端口号是80。\r\n2、 Web浏览器向Web服务器发送请求命令 \r\n一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令。例如：GET/sample/hello.jsp HTTP/1.1。\r\n3、Web浏览器发送请求头信息 \r\n浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。 \r\n4、 Web服务器应答 \r\n客户机向服务器发出请求后，服务器会客户机回送应答， HTTP/1.1 200 OK ，应答的第一部分是协议的版本号和应答状态码。\r\n5、 Web服务器发送应答头信息 \r\n正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。 \r\n6、Web服务器向浏览器发送数据 \r\nWeb服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据。\r\n7、 Web服务器关闭TCP连接 \r\n一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，然后如果浏览器或者服务器在其头信息加入了这行代码：\r\nConnection:keep-alive \r\n\r\n**什么是跨域？跨域的解决方法？**\r\n>同源策略（Same origin policy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。\r\n一般推荐使用jsonp 图片ping\r\n\r\n**json是什么，用json描述一段话：有一个小男孩，他的名字叫小明，他的头发颜色是黑色的，会弹钢琴，他的好朋友有 小红、小华、小东。**\r\n>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它基于JavaScript（Standard ECMA-262 3rd Edition - December 1999）的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。这些特性使JSON成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成(网络传输速度)。\r\n\r\n**HTML 和 XHTML 、HTML5 简要 谈谈区别。**\r\n>XHTML 1.0 是 XML 风格的 HTML 4.01。\r\nXHTML 1.1 主要是初步进行了模块化。\r\nHTML5 是下一代 HTML，取代 HTML 4.01。\r\nW3C 原本确实计划用 XHTML 系列替代 HTML 4.01，但 XHTML 系列实际上只活到了 1.1（1.1 和夭折的 1.2 已经体现出过分 XML 的迹象，而 W3C 的理想其实在疯狂的 XHTML 2 身上，当然，它没能诞生），还没脱离 HTML 4.01 的阴影就死了。\r\n还没等 XHTML 兴起，它的地位就被 HTML5 取代了。\r\n另外，HTML5 规定了两种 serialization 形式，一种是宽松的 HTML 风格，一种是严格的 XML/XHTML 风格。人们有时把 XML/XHTML 风格的 HTML5 serialization 称作「XHTML5」，但这个「XHTML」只剩下名号了，和 XHTML 1/2 的独立规范不一样，应当避免混淆。\r\n\r\n\r\n**块级元素、行内元素，行内块级元素？分别说几个标签。**\r\n>HTML中的元素可分为两种类型：块级元素和行级元素。这些元素的类型是通过文档类型定义（DTD）来指明。块级元素：显示在一块内，会自动换行，元素会从上到下垂直排列，各自占一行，如p,ul,form,div等标签元素。行内元素：元素在一行内水平排列，高度由元素的内容决定，height属性不起作用，如span,input等元素。\r\n\r\n**location.href location.host location.pathname location.search location.hash是什么？**\r\n>问题不严谨，欺负面试官的好机会，\r\nURL通用格式 protocol :// hostname[:port] / path / [;parameters][?query]#fragment\r\nprotocol（协议）\r\n指定使用的传输协议，下表列出 protocol 属性的有效方案名称。 最常用的是HTTP协议，它也是目前WWW中应用最广的协议。\r\nfile 资源是本地计算机上的文件。格式file://\r\nftp 通过 FTP访问资源。格式 FTP://\r\ngopher 通过 Gopher 协议访问该资源。\r\nhttp 通过 HTTP 访问该资源。 格式 HTTP://\r\nhttps 通过安全的 HTTPS 访问该资源。 格式 HTTPS://\r\nmailto 资源为电子邮件地址，通过 SMTP 访问。 格式 mailto:\r\nMMS 通过 支持MMS（流媒体）协议的播放该资源。（代表软件：Windows Media Player）格式 MMS://\r\ned2k 通过 支持ed2k（专用下载链接）协议的P2P软件访问该资源。（代表软件：电驴） 格式 ed2k://\r\nFlashget 通过 支持Flashget:（专用下载链接）协议的P2P软件访问该资源。（代表软件：快车） 格式 Flashget://\r\nthunder 通过 支持thunder（专用下载链接）协议的P2P软件访问该资源。（代表软件：迅雷） 格式 thunder://\r\nnews 通过 NNTP 访问该资源。\r\nhostname（主机名）\r\n是指存放资源的服务器的域名系统(DNS) 主机名或 IP 地址。有时，在主机名前也可以包含连接到服务器所需的用户名和密码（格式：username:password@hostname）。\r\nport（端口号）\r\n整数，可选，省略时使用方案的默认端口，各种传输协议都有默认的端口号，如http的默认端口为80。如果输入时省略，则使用默认端口号。有时候出于安全或其他考虑，可以在服务器上对端口进行重定义，即采用非标准端口号，此时，URL中就不能省略端口号这一项。\r\npath（路径）\r\n由零或多个“/”符号隔开的字符串，一般用来表示主机上的一个目录或文件地址。\r\nparameters（参数）\r\n这是用于指定特殊参数的可选项。\r\nquery(查询)\r\n可选，用于给动态网页（如使用CGI、ISAPI、PHP/JSP/ASP/ASP。NET等技术制作的网页）传递参数，可有多个参数，用“&”符号隔开，每个参数的名和值用“=”符号隔开。\r\nfragment（信息片断）\r\n字符串，用于指定网络资源中的片断。例如一个网页中有多个名词解释，可使用fragment直接定位到某一名词解释。\r\n\r\n**form 的 action target 是什么？如何遍历form里面的元素？input有哪几种？分别怎么获取值？fmethod有哪几种？如何异步提交form？**\r\n<table class="dataintable">\r\n  <tbody><tr>\r\n    <th>属性</th>\r\n    <th>值</th>\r\n    <th>描述</th>\r\n  </tr>\r\n\r\n  <tr>\r\n    <td>accept</td>\r\n    <td><i>MIME_type</i></td>\r\n    <td><span class="deprecated">HTML 5 中不支持。</span></td>\r\n  </tr>\r\n\r\n  <tr>\r\n    <td><a href="/tags/att_form_accept-charset.asp" title="HTML5 <form> accept-charset 属性">accept-charset</a></td>\r\n    <td><i>charset_list</i></td>\r\n    <td>规定服务器可处理的表单数据字符集。</td>\r\n  </tr>\r\n\r\n  <tr>\r\n    <td><a href="/tags/att_form_action.asp" title="HTML5 <form> action 属性">action</a></td>\r\n    <td><i>URL</i></td>\r\n    <td>规定当提交表单时向何处发送表单数据。</td>\r\n  </tr>\r\n\r\n  <tr>\r\n    <td class="html5_new"><a href="/tags/att_form_autocomplete.asp" title="HTML5 <form> autocomplete 属性">autocomplete</a></td>\r\n    <td>\r\n      <ul>\r\n      <li>on</li>\r\n      <li>off</li>\r\n      </ul>\r\n    </td>\r\n    <td>规定是否启用表单的自动完成功能。</td>\r\n  </tr>\r\n\r\n  <tr>\r\n    <td><a href="/tags/att_form_enctype.asp" title="HTML5 <form> enctype 属性">enctype</a></td>\r\n    <td>见说明</td>\r\n    <td>规定在发送表单数据之前如何对其进行编码。</td>\r\n  </tr>\r\n\r\n  <tr>\r\n    <td><a href="/tags/att_form_method.asp" title="HTML5 <form> method 属性">method</a></td>\r\n    <td>\r\n      <ul>\r\n      <li>get</li>\r\n      <li>post</li>\r\n      </ul>\r\n    </td>\r\n    <td>规定用于发送 form-data 的 HTTP 方法。</td>\r\n  </tr>\r\n\r\n  <tr>\r\n    <td><a href="/tags/att_form_name.asp" title="HTML5 <form> name 属性">name</a></td>\r\n    <td><i>form_name</i></td>\r\n    <td>规定表单的名称。</td>\r\n  </tr>\r\n\r\n  <tr>\r\n    <td class="html5_new"><a href="/tags/att_form_novalidate.asp" title="HTML5 <form> novalidate 属性">novalidate</a></td>\r\n    <td>novalidate</td>\r\n    <td>如果使用该属性，则提交表单时不进行验证。</td>\r\n  </tr>\r\n\r\n  <tr>\r\n    <td><a href="/tags/att_form_target.asp" title="HTML5 <form> target 属性">target</a></td>\r\n    <td>\r\n      <ul>\r\n      <li>_blank</li>\r\n      <li>_self</li>\r\n      <li>_parent</li>\r\n      <li>_top</li>\r\n      <li><i>framename</i></li>\r\n      </ul>\r\n    </td>\r\n    <td>规定在何处打开 action URL。</td>\r\n  </tr>\r\n</tbody></table>\r\n\r\n>遍历代码：  //遍历所有的form表单\r\n   for(var f=0;f<document.forms.length;f++){\r\n     var form=document.forms[f];\r\n     if(form.name==formName){\r\n       alert(form.name);\r\n       //遍历指定form表单所有元素\r\n       for(var i=0;i<form.length;i++){\r\n         var element=form[i];\r\n         if(element.type=="checkbox"){\r\n         alert("hello world");\r\n       }\r\n      }\r\n     break;\r\n     }\r\n   }\r\n\r\n**如何延迟加载js？**\r\n>手动创建script标签即可\r\n\r\n**dom ready 和 window.onload的区别？jq是怎么实现dom ready的？**\r\n>页面加载完成有两种事件，一是ready，表示文档结构已经加载完成（不包含图片等非文字媒体文件），二是onload，指示页 面包含图片等文件在内的所有元素都加载完成。(可以说：ready 在onload 前加载！！！)\r\n实现起来比较复杂参看\r\nhttp://www.cnblogs.com/fullhouse/archive/2012/03/07/2384016.html\r\n\r\n**IE6下如何将突出来的select遮住？IE6常见的几个bug和解决方法？如何让IE6支持**\r\n>这里有一个BUG手册，http://css.doyoe.com/experience/bugs.htm\r\n\r\n**position:fixed？zoom是啥？IE6如何设置高为1px 的div？**\r\n>相对浏览器的绝对定位\r\n\r\n<table class="dataintable">\r\n<tbody><tr>\r\n<th>值</th>\r\n<th>描述</th>\r\n</tr>\r\n<tr>\r\n<td>absolute</td>\r\n<td>\r\n<p>生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。</p>\r\n<p>元素的位置通过 "left", "top", "right" 以及 "bottom" 属性进行规定。</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td>fixed</td>\r\n<td>\r\n<p>生成绝对定位的元素，相对于浏览器窗口进行定位。</p>\r\n<p>元素的位置通过 "left", "top", "right" 以及 "bottom" 属性进行规定。</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td>relative</td>\r\n<td>\r\n<p>生成相对定位的元素，相对于其正常位置进行定位。</p>\r\n<p>因此，"left:20" 会向元素的 LEFT 位置添加 20 像素。</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td>static</td>\r\n<td>默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。</td>\r\n</tr>\r\n<tr>\r\n<td>inherit</td>\r\n<td>规定应该从父元素继承 position 属性的值。</td>\r\n</tr>\r\n</tbody></table>\r\n\r\n**如何创建一个元素？如何创建一个script？iframe呢？style呢？tagName tagType nodeName nodeValue是啥子？**\r\n>一句话说不完请学习js DOM\r\nhttp://www.w3school.com.cn/xmldom/index.asp\r\n\r\n**css中position、display有哪些？position 中 relative 和 absolute的区别？**\r\n>上文 有了\r\n\r\n**如何动态插入css和js？**\r\n>尼玛重复问题\r\n\r\n**window.open是啥？如何在open之后的页面刷新父页面？如何防止浏览器阻止window.open？\r\nwindow.opener是个啥**\r\n>去手册window 对象 http://www.w3school.com.cn/js/js_window.asp\r\n\r\n**如果没有ajax，你将如何异步更新页面呢？**\r\n>在没有ajax 的年代，使用iframe 隐藏实现\r\n\r\n**attribute什么？ property是什么？jq中的attr 和 prop的区别？**\r\n>attribute是DOM 元素属性，JQ中对DOM 包装提供统一的访问方法\r\n\r\n**如何实现一个可编辑的select？**\r\n>HTML+CSS+javascript 参看JQ UI的实现\r\n\r\n**什么是行为与结构分离？什么是表现与结构分离？前后端分离？**\r\n>MVC模式\r\n\r\n**简述一下MVC是个啥？有啥好处？MVVM是个啥？对backbone angular 了解吗？**\r\n>上面说了MVC的意义，angular可以理解为功能更为丰富的backbone,提供了双向绑定。\r\n\r\n**对jq了解多少？jq链式操作的原理？eq 、get的区别？如何获得jq获取到的元素的原生对象？**\r\n>jq链式操作的原理每次返回this供下一次调用使用。jq[index]即可访问到,参看jq 的get eq 方法\r\n\r\n**什么是异步调用？什么是回调函数？如何解决异步回调函数金字塔？promise？defered?**\r\n>其实就是一种设计模式，异步模式在web编程中变得越来越重要，对于web主流语言Javascript来说，这种模式实现起来不是很利索，为此，许多Javascript库（比如 jQuery和Dojo）添加了一种称为promise的抽象（有时也称之为deferred）\r\n\r\n**script标签中 defer是什么？async是什么？区别？**\r\n>先来试个一句话解释仨，当浏览器碰到 script 脚本的时候：\r\n\\<script src="script.js">\\</script>\r\n没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。\r\n\\<script async src="script.js">\\</script>\r\n有 async，加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。\r\n\\<script defer src="myscript.js">\\</script>\r\n有 defer，加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。\r\n然后从实用角度来说呢，首先把所有脚本都丢到 \\</body> 之前是最佳实践，因为对于旧浏览器来说这是唯一的优化选择，此法可保证非脚本的其他一切元素能够以最快的速度得到加载和解析。\r\n\r\n**CSS如何实现元素绝对居中呢？如何实现单行文本垂直居中？多行文本垂直居中？未知图片垂直居中。**\r\n>1、text-align:cenert;2、使用line-heihgt:父元素高度实现垂直居中\r\nhttp://www.cnblogs.com/asqq/archive/2012/04/09/2438745.html\r\n\r\n**简述一下 CSS BFC是什么？**\r\n>Box、Formatting Context 缩写，装逼专用\r\nhttp://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html\r\n\r\n**CSS盒子模型？IE盒子和标准盒子的差异？CSS3中的 flex box？**\r\n>如上\r\n\r\n**margin负值简单的几个应用？**\r\n>见bootstrap源码中的.container 下的span1-span12 实现多列对齐\r\n\r\n**如何实现汉字两端对齐？比如 “用户名” 和 “密码” 对齐。**\r\n>　text-align: justify; \r\n\r\n**子元素float 的时候，如何防止高度塌陷？**\r\n>margin不重叠就行\r\n\r\n**margin重叠的原理？**\r\n>重叠：蓝色的上20边距与灰色背景div的20上边距重叠；蓝色方块的下20像素边距与红色方块的上20像素布局重叠；红色方块的20像素的下边距与灰色盒子的20像素下边距重叠。\r\n由于IE浏览器和非IE浏览器两大阵营对处理margin重叠问题上有较大差异，所以解决margin重叠问题一般是没有什么兼容性的好方法的。一般而言，想这里同向重叠异向重叠的情况同时出现还是比较少见的。在实际项目中遇到重叠只是一部分的重叠。重叠有利有弊，关键是你要了解什么情况下会发生margin重叠，深刻理解它，这样当你不希望发生重叠的时候可以避免出现重叠，希望利用这种重叠属性的就利用它，正所谓，知己知彼，百战百胜。\r\nhttp://www.zhangxinxu.com/study/200908/margin-overlap.html\r\n\r\n**querySelector 和 querySelectorAll是什么？区别？**\r\n>基本没用到，因为我也不懂，html5高级特性，各个框架实现好了（Jquery 中有用到）\r\nhttp://www.cnblogs.com/snandy/archive/2011/03/30/1999388.html\r\n\r\n**CSS选择器的优先级？简述一下css hack？有哪几种？IE6 IE7等，属性前缀 -webkit- -o- -ms-CSS3中，实现动画的方式有几种？**\r\n>很多人都不知道，其实是按照10的步长权重设计的\r\n1\\.最高优先级是 (直接在标签中的设置样式，假设级别为1000)<div style="color:Red;"></div>\r\n2\\.次优先级是（ID选择器 ,假设级别为100）   #myDiv{color:Red;}\r\n3\\.其次优先级是（类选择器，假设级别为10） \\.divClass{color:Red;}\r\n4\\.最后优先级是 （标签选择器，假设级别是 1）  div{color:Red;}\r\n5\\.那么后代选择器的优先级就可以计算了啊\r\n比如 \\.divClass  span { color:Red;}   优先级别就是：10+1=11\r\n\r\n**HTML5本地存储？ 可以用来做什么？**\r\n>上图![请输入图片描述][2]\r\nhttp://www.cnblogs.com/xiaowei0705/archive/2011/04/19/2021372.html\r\n\r\n**amd cmd 规范？区别？**\r\n>两种模块化规范，代表的有requirejs 和 seajs\r\n\r\n**模块化开发？CSS模块化开发？**\r\n>上个问题\r\n\r\n**innerHTML，innerText，outerHTML,nodeValue**\r\n>innerHTML 设置或获取位于对象起始和结束标签内的 HTML\r\nouterHTML 设置或获取对象及其内容的 HTML 形式\r\ninnerText 设置或获取位于对象起始和结束标签内的文本\r\nouterText 设置(包括标签)或获取(不包括标签)对象的文本\r\n\r\n**简单回答一下box-sizing。**\r\n>这个是好东西 \r\nbox-sizing 属性允许您以特定的方式定义匹配某个区域的特定元素。\r\n例如，假如您需要并排放置两个带边框的框，可通过将 box-sizing 设置为 "border-box"。这可令浏览器呈现出带有指定宽度和高度的框，并把边框和内边距放入框中。\r\n<table class="dataintable">\r\n<tbody><tr>\r\n<th style="width:25%;">值</th>\r\n<th>描述</th>\r\n</tr>\r\n\r\n<tr>\r\n<td>content-box</td>\r\n<td>\r\n	<p>这是由 CSS2.1 规定的宽度高度行为。</p>\r\n	<p>宽度和高度分别应用到元素的内容框。</p>\r\n	<p>在宽度和高度之外绘制元素的内边距和边框。</p>\r\n</td>\r\n</tr>\r\n\r\n<tr>\r\n<td>border-box</td>\r\n<td>\r\n	<p>为元素设定的宽度和高度决定了元素的边框盒。</p>\r\n	<p>就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。</p>\r\n	<p>通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。</p>\r\n</td>\r\n</tr>\r\n\r\n<tr>\r\n<td>inherit</td>\r\n<td>规定应从父元素继承 box-sizing 属性的值。</td>\r\n</tr>\r\n</tbody></table>\r\n\r\n\r\n**简单介绍下jquery 的动画队列、jquery的selector原理。jquery extend**\r\n>jquery 的动画队列使用了前面说的promise jquery的selector用了sizzle引擎不是高手写不出来 jquery extend用来合并两个对象，可以选择是否深度合并\r\n\r\n\r\n**原生js中只有insertBefore,请问insertAfter怎么实现，有的浏览器不支持outerHTML，模拟一个outerHTML。**\r\n>有本书写了，《JavaScript DOM编程艺术(第2版)2》\r\n\r\n**reapp ionic angular less gulp react vue.js koajs requirejs seajs**\r\n>这、、、、自己百度\r\n\r\n**栅格布局**\r\n>把页面划分为很多栅格，比如960布局、bootstraop 中span布局\r\n\r\n**行内元素如何设置宽高？有几种方法？**\r\n>首先要变为非行内元素\r\n\r\n**解释下css sprite**\r\n>css sprite图片精灵，用来把图标合并到一起使用背景定位，然后减少http 请求的优化方法\r\n\r\n**简述一下css hack。**\r\n>http://css.doyoe.com/hack/index.htm 一个hack 手册放上来\r\n\r\n\r\n  [1]: http://pic002.cnblogs.com/images/2012/426620/2012072810301161.png\r\n  [2]: http://pic002.cnblogs.com/images/2011/219983/2011052411382518.jpg', 0, 1, NULL, 'post', 'publish', NULL, 0, '1', '1', '1', 0);
INSERT INTO `typecho_contents` (`cid`, `title`, `slug`, `created`, `modified`, `text`, `order`, `authorId`, `template`, `type`, `status`, `password`, `commentsNum`, `allowComment`, `allowPing`, `allowFeed`, `parent`) VALUES
(16, '活跃网络前端面试题', '16', 1426675620, 1431009524, '<!--markdown-->这个公司非常专业，同时也是一个外资企业，问的问题也很基础，但是基础的东西并不简单。\r\n\r\n1、写出下面代码执行结果\r\n\r\n        function foo(a,b,c) {\r\n            return a + b + c;\r\n        }\r\n        foo.apply(null,[2,3]);\r\n    \r\n答案：NaN。因为第三个参数c没有传入，所以是 undefined 所以根据+号的类型转换，被转换为NaN\r\n    \r\n2、写出下面代码执行结果\r\n\r\n        function foo(a,b,c) {\r\n            return a + b + c;\r\n        }\r\n        foo.apply(null,[2,3，3]);\r\n\r\n答案:8。因为不需要类型转换直接得到8，没什么说的。\r\n\r\n3、下面代码中第第二行和第四行有什么区别\r\n\r\n        var db = new DB;\r\n        db.write();\r\n        var write = db.write;\r\n        write();\r\n\r\n答案:this不同。因为JS传引用的事实，这种调用方式中使用的this对象不同。\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n4、设计一个方法每次调用返回一个增长的序列，例如 1 2 3，不允许使用全局变量\r\n\r\n        inc(...); //返回1 \r\n        inc(...); //返回2 \r\n        inc(...); //返回3    \r\n答案：\r\n    \r\n\r\n        function inc() {\r\n            if(typeof arguments.callee.index != "undefined"){\r\n                arguments.callee.index++;\r\n            }else{\r\n                arguments.callee.index = 1;\r\n            }\r\n            return arguments.callee.index;\r\n        }', 0, 1, NULL, 'post', 'publish', NULL, 0, '1', '1', '1', 0),
(19, 'html&amp;css思维导图.jpg', 'html-css思维导图-jpg', 1426688925, 1426688925, 'a:5:{s:4:"name";s:24:"html&css思维导图.jpg";s:4:"path";s:35:"/usr/uploads/2015/03/3537460323.jpg";s:4:"size";i:235263;s:4:"type";s:3:"jpg";s:4:"mime";b:0;}', 1, 1, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 20),
(20, 'HTML/CSS知识点脑图', '20', 1426688940, 1426689135, '<!--markdown-->![html&css思维导图.jpg][1]\r\n\r\n    \r\n  [1]: http://bcs.duapp.com/helpjs/usr/uploads/2015/03/3537460323.jpg', 0, 1, NULL, 'post', 'publish', NULL, 0, '1', '1', '1', 0),
(21, 'angularjs.jpg', 'angularjs-jpg', 1426689484, 1426689484, 'a:5:{s:4:"name";s:13:"angularjs.jpg";s:4:"path";s:35:"/usr/uploads/2015/03/3364051122.jpg";s:4:"size";i:183280;s:4:"type";s:3:"jpg";s:4:"mime";b:0;}', 1, 1, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 22),
(22, 'Angularjs学习笔记脑图', '22', 1426689480, 1426689615, '<!--markdown-->angularjs\r\n\r\n![angularjs.jpg][1]\r\n**1、第一章 angularjs简介**\r\n\r\n客户端模板：html 模板\r\n\r\nMVC:Model View Controller\r\n\r\n数据绑定：模板和上的值和变量绑定\r\n\r\n依赖注入：通过应用需要的东西，而不必再创建一次的一种模块化机制\r\n\r\n指令：用户增加VIEW层功能的拓展html 标签\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n**2、第二章 Angularjs 应用骨架**\r\n\r\n1、调用Angularjs\r\n\r\n2、ng-app声明angularjs 边界\r\n\r\n3、创建基本骨架\r\n\r\n1、model\r\n\r\n创建容纳数据的模型，模型代码当前应用的状态\r\n\r\n2、View\r\n\r\n用来展示数据的一些视图\r\n\r\n3、Controller\r\n\r\n管理模型和视图关系的一些控制器\r\n\r\n4、基本的运作流程\r\n\r\n1、用户请求起始页\r\n\r\n2、用户的浏览器发送http请求，然后下载index.html 页面，这个页面包含了模板\r\n\r\n3、angular被加载到页面中，等待页面加载完成，查找ng-app指令，用来定义模板边界\r\n\r\n4、angular开始运作，初始化，应用启动，模板被转换成DOM 视图\r\n\r\n5、链接服务器加载需要展示给用户的其他数据\r\n\r\n5、常用内置指令\r\n\r\nng-repeat\r\n\r\n显示列表数据\r\n\r\nng-show:隐藏和显示\r\n\r\nng-class:更具条件加载class\r\n\r\nng-style:更具条件加载样式\r\n\r\nng-href：a标签用于绑定的方法\r\n\r\nng-src:用于加载图片\r\n\r\n6、$scope暴露模型数据\r\n\r\n7、 $watch用来监控数据模型的变化\r\n\r\n双向绑定时，监听变量值得变化,这个方法在使用较大的集合的时候会存在一些性能的问题\r\n\r\n8、使用模块\r\n\r\n依赖注入：自动解析依赖的机制\r\n\r\n9、过滤器\r\n\r\n{{expression | filtername:parameter1:parameterN}}\r\n\r\n10、路由\r\n\r\n使用$route服务切换局部视图，使用$localtion 对页面进行跳转\r\n\r\n**3、第三章 使用AngularJs 进行开发**\r\n\r\n包括的文件\r\n\r\njs文件\r\n\r\nhtml模板文件\r\n\r\njs依赖\r\n\r\n静态资源\r\n\r\n单元测试\r\n\r\n集成测试\r\n\r\n配置文件\r\n\r\n测试驱动开发TDD karma\r\n\r\n单元测试\r\n\r\n集成测试\r\n\r\n自动\r\n\r\n手动\r\n\r\n编译压缩\r\n\r\nchrome浏览器调试插件:batarang\r\n\r\nModel标签页\r\n\r\n性能标签页\r\n\r\n服务依赖关系\r\n\r\n元素属性和访问控制台\r\n\r\n使用Yeoman 优化工作流程\r\n\r\n预览服务器,代码保存时自动刷新浏览器\r\n\r\n包管理功能\r\n\r\n构建\r\n\r\nPhantomJS单元测试\r\n\r\n项目自动化构建\r\n\r\n1、合并js压缩\r\n\r\n2、文件打上版本号\r\n\r\n3、优化图片\r\n\r\n4、生成应用缓存清单\r\n\r\n和RequireJS 集成\r\n\r\n**4、第四章 一款AngularJS应用分析**\r\n\r\n5、服务器交互\r\n\r\n$Http服务使用\r\n\r\nGET请求\r\n\r\nPOST请求\r\n\r\n设置请求参数\r\n\r\n设置HTTP头\r\n\r\n缓存响应数据\r\n\r\n转换请求和响应\r\n\r\nJSON转换\r\n\r\nkey/value转换\r\n\r\nRESTFul 资源\r\n\r\npromise模式\r\n\r\n$q 和 Promise\r\n\r\n拦截响应\r\n\r\n安全\r\n\r\nJSON漏洞\r\n\r\nXSRF 跨站请求伪造\r\n\r\n**6、第六章 指令**\r\n\r\n(略)还未升入学习\r\n\r\n\r\n  [1]: http://bcs.duapp.com/helpjs/usr/uploads/2015/03/3364051122.jpg', 0, 1, NULL, 'post', 'publish', NULL, 0, '1', '1', '1', 0),
(31, 'nodejs 常用api笔记.png', 'nodejs-常用api笔记-png', 1431077066, 1431077066, 'a:5:{s:4:"name";s:26:"nodejs 常用api笔记.png";s:4:"path";s:35:"/usr/uploads/2015/05/2996502054.png";s:4:"size";i:957126;s:4:"type";s:3:"png";s:4:"mime";b:0;}', 1, 1, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 32),
(23, '《JavaScript语言精髓与编程实践》笔记和习题', '23', 1426728916, 1426728916, '<!--markdown-->', 0, 1, NULL, 'post_draft', 'publish', NULL, 0, '1', '1', '1', 0),
(24, 'JavaScript作用域练习题总结', '24', 1426731180, 1430967019, '<!--markdown-->1、var的含义是什么？下面函数f1中两行代码有什么区别?\r\n\r\n        function f1() {\r\n            var a = 10; \r\n            b = 10;\r\n        }\r\n\r\n  解析：var 是变量声明语句，=是赋值语句。第一行和第二行的区别为一个是变量声明和赋值，第二个缺省了变量申明的赋值，如果在严格模式下，为一个没有声明的变量赋值就会报错，而在非严格模式下解释器就会自动写入一个元素到window。\r\n\r\n2、控制台输出什么内容？\r\n\r\n        function f1() {\r\n            var a ;\r\n            function f2() {\r\n                a = 5;\r\n                b = 6;\r\n            }\r\n        }\r\n        f2();\r\n        console.log(a);\r\n        console.log(b);\r\n\r\n  解析：抛出异常，6。根据作用域的原理。变量a 被申明但是在f1 内部，f2给a赋值的时候a能够找到于是a在f1作用域下被赋值，而在引用a的时候a在全局下没有被申明。b没有被声明过，因此在全局下被自动声明（非严格模式）。因此得出，不能说没有使用var 就是全局变量，使用了var 就是局部变量。\r\n', 0, 1, NULL, 'post', 'publish', NULL, 0, '1', '1', '1', 0),
(32, 'nodejs常用API模块介绍及思维导图', '32', 1431078000, 1431079075, '<!--markdown-->分享一组nodejs 中文版api地址 [http://nodeapi.ucdok.com/#/api/][1]\r\n\r\nnodejs中较为常用的有这几个模块，现在简单说明这几个模块在实际项目中的作用\r\n    全局常量\r\n\r\n>   __filename：当前文件解析后的绝对路径\r\n    __dirname：当前文件所在的目录\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n 1.断言模块(assert)\r\n>断言这部分主要就是为了做单元测试，如果对TDD测试驱动开发很感兴趣的可以了解下，敏捷开发模式下的TDD\r\n\r\n 2.C/C++ 扩展\r\n>这块比较难，但是还是很有用，但是在实际工程中用到很少。\r\n\r\n 3.控制台\r\n>调试是必须用的，这里最好配合使用debugger 部分的内容，以及 util 里面的一些方法作为调试使用\r\n\r\n 4.加密 (crypto)\r\n>加密也是非常有用的，比如对密码的md5加密等方法由这个模块提供\r\n\r\n 5.文件系统 (fs)\r\n>操作文件用处非常大，有时候需要编码系统 (Punycode)配合\r\n\r\n 6.HTTP \r\n>这里面包含做http服务器和http客户端发起http请求两部分，可以说这里是nodejs的核心价值\r\n\r\n 7.HTTP \r\n>提供解析URL和格式化URL方法\r\n\r\n 8.路径处理 (Path)\r\n>提供解析路径 和 格式化路径方法，还有就是绝对路径和相对路径的转换特别有意思\r\n\r\n 9.Query Strings\r\n>URL key-alue字符串的解析和格式化\r\n\r\n 10.定时器\r\n>和javascript差异不大\r\n\r\n 11.实用工具(util)  \r\n>一些类型检测工具，util.inspect(object, [options])可以序列化对象用于调试输出，实际工作中使用JSON对象序列化\r\n\r\n 12.模块 (Modules)\r\n>这个比较重要主要有两个\r\n    module.exports 编写模块，用于暴露模块接口\r\n    require(id) 引入模块\r\n\r\n\r\n根据API绘制的思维导图，API非常多绘制了常用的即可\r\n\r\n\r\n![nodejs 常用api笔记.png][2]\r\n\r\n\r\n  [1]: http://nodeapi.ucdok.com/#/api/\r\n  [2]: http://bcs.duapp.com/helpjs/usr/uploads/2015/05/2996502054.png', 0, 1, NULL, 'post', 'publish', NULL, 0, '1', '1', '1', 0),
(33, 'express 重要接口思维导图.png', 'express-重要接口思维导图-png', 1431323436, 1431323436, 'a:5:{s:4:"name";s:36:"express 重要接口思维导图.png";s:4:"path";s:35:"/usr/uploads/2015/05/1132934048.png";s:4:"size";i:487522;s:4:"type";s:3:"png";s:4:"mime";b:0;}', 1, 1, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 34),
(34, 'nodejs 框架express重要接口思维导图', '34', 1431323460, 1432779052, '<!--markdown-->	express() 程序入口，启动一个应用，返回application对象\r\n	Application 对象\r\n		简介：app应用单例\r\n		app.set(name, value) 设置应用\r\n		app.get(name) 获取应用设置\r\n		app.enable(name) 启用一项设置\r\n		app.disable(name) 禁用一项设置\r\n		app.use([path], function) 使用中间件方法\r\n		settings 可配置项\r\n			env 运行时环境，默认为 process.env.NODE_ENV 或者 "development"\r\n			trust proxy 激活反向代理，默认未激活状态\r\n			jsonp callback name 修改默认?callback=的jsonp回调的名字\r\n			json replacer JSON replacer 替换时的回调, 默认为null\r\n			json spaces JSON 响应的空格数量，开发环境下是2 , 生产环境是0\r\n			case sensitive routing 路由的大小写敏感, 默认是关闭状态， "/Foo" 和"/foo" 是一样的\r\n			strict routing 路由的严格格式, 默认情况下 "/foo" 和 "/foo/" 是被同样对待的\r\n			view cache 模板缓存，在生产环境中是默认开启的\r\n			view engine 模板引擎\r\n			views 模板的目录, 默认是"process.cwd() + ./views"\r\n		app.engine(ext, callback) 模板引擎\r\n		app.param([name], callback) 实现路由方法\r\n		app.VERB(path, [callback...], callback)  根据请求头部类型快捷实现路由方法\r\n		app.all(path, [callback...], callback) 响应所有的路由请求\r\n		app.locals 放置用于渲染给模板的变量对象\r\n		app.render(view, [options], callback) 渲染模板\r\n		app.routes 存放实现的路由方法列表\r\n		app.listen() 启动http监听\r\n	Request 对象\r\n		简介：用于存放客户端发起的请求信息\r\n		req.params 例如路由/user/:name 相似的参数表\r\n		req.query urlget 参数\r\n		req.body 请求体参数\r\n		req.files  bodyParser() 中间件提供 的文件上传后的参数体\r\n		req.param(name) 获取参数通用方法\r\n			请求优先级 req.params > req.body > req.query\r\n		req.route 请求的路由信息\r\n		req.cookies  请求的cookie\r\n		req.get(field) 获取头部字段\r\n		req.accepts(types) 获取客户端接收类型\r\n		req.is(type)  头部类型\r\n		req.ip  返回IP注意代理的情况\r\n		req.ips 返回IP和代理IP数组\r\n		req.path 请求路径\r\n		req.host\r\n		req.xhr 是否是ajax请求\r\n		req.protocol 请求协议\r\n		req.subdomains 获取子域\r\n		req.originalUrl 获取url\r\n		req.acceptedCharsets 获取请求字符集\r\n	Response 响应客户端对象\r\n		res.status(code) 返回响应码\r\n		res.set(field, [value]) 设置头部\r\n		res.get(field) 获取响应头部信息\r\n		res.cookie(name, value, [options]) 返回cookie\r\n		res.clearCookie(name, [options]) 清除cookie\r\n		res.redirect([status], url)  res.location  重定向\r\n		res.charset 设置字符集\r\n		res.send([body|status], [body]) 发送响应数据\r\n		res.json([status|body], [body]) \r\n		res.jsonp([status|body], [body])\r\n		res.attachment([filename]) 设置响应类型为附件，系统根据后缀名自动设置http类型\r\n		res.sendfile(path, [options], [fn]]) 发送文件\r\n		res.download(path, [filename], [fn]) 下载\r\n		res.render(view, [locals], callback) 渲染模板\r\n	重要的几个中间中间件\r\n		basicAuth()  用户验证\r\n		bodyParser() 请求体解析 对几个常用的中间件再封装\r\n			json()\r\n			 urlencoded()\r\n			multipart() \r\n		compress() 压缩\r\n		cookieParser() cookies解析\r\n		cookieSession() 利用cookies实现的session\r\n		csrf() CSRF 防护中间件\r\n		directory() 目录解析中间件\r\n	其他常用模块\r\n		path nodejs提供\r\n		static-favicon icon模块\r\n		morgan 日志模块\r\n		connect-mongo mongodb 模块\r\n		connect-flash 用户提示消息模块\r\n		multer 比较重要的模块，用于文件上传\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n![express 重要接口思维导图.png][1]\r\n\r\n\r\n  [1]: http://bcs.duapp.com/helpjs/usr/uploads/2015/05/1132934048.png', 0, 1, NULL, 'post', 'publish', NULL, 0, '1', '1', '1', 0),
(28, 'http.png', 'http-png', 1431009136, 1431009136, 'a:5:{s:4:"name";s:8:"http.png";s:4:"path";s:35:"/usr/uploads/2015/05/4034528140.png";s:4:"size";i:24995;s:4:"type";s:3:"png";s:4:"mime";b:0;}', 1, 1, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 30),
(29, 'api测试工具.zip', 'api测试工具-zip', 1431009233, 1431009233, 'a:5:{s:4:"name";s:19:"api测试工具.zip";s:4:"path";s:34:"/usr/uploads/2015/05/518815520.zip";s:4:"size";i:35735;s:4:"type";s:3:"zip";s:4:"mime";b:0;}', 2, 1, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 30),
(30, '易用的api接口调试工具', '30', 1431009300, 1432778991, '<!--markdown-->用于调试 api 请求，一个小工具\r\n\r\n![http.png][1]\r\n\r\n\r\n欢迎下载使用，如果有问题请联系我，这个软件的源码大部分使用国外一个人的httpclient 库\r\n\r\n下载地址 [点击下载][2]\r\n\r\n\r\n  [1]: http://bcs.duapp.com/helpjs/usr/uploads/2015/05/4034528140.png\r\n  [2]: http://bcs.duapp.com/helpjs/usr/uploads/2015/05/518815520.zip', 0, 1, NULL, 'post', 'publish', NULL, 0, '1', '1', '1', 0),
(40, '为什么我们需要TypeScript', '40', 1431876720, 1431911576, '<!--markdown-->ps:阅读文章前，先引用一段百度百科关于TypeScript的介绍，具体可以搜索TypeScript以及相关的CoffeeScript \r\n\r\n> TypeScript是一种由微软开发的自由和开源的编程语言。它是JavaScript的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。\r\n\r\n从1.0的发布开始，我已经对TypeScript项目关注了超过一年。它的理念吸引着我，但是正是因为具有了和大多数语言一样的习惯和特性，我还不能确定它最终是否可以发展起来。无论如何，最近的消息称TypeScript可能会被用于创建 AngularJS2.0，给我了相信TypeScript可以成为主流编程语言的可能以及值得去学习的信心。\r\n\r\n我认为是时候开始一个小的项目(下面会贴出来)并且开始体验TypeScript的特性了。\r\n\r\n当开始创建上面我说过的项目并且开始写这篇文章的时候，我浏览过大量的"介绍TypeScript"的文章。这里我不想写成和他们类似文章，这些文章有相应的定位，而且在事实上，我使用它们来开始我的TypeScript 旅程。无论如何，我想使用一个不同的视角——我想回到看这篇文章读者的位置，回答某些问题的答案和当我开始关注TypeScript项目的时候在我脑中的一些问题:\r\n\r\n 1. 为什么你应该在下一个web或者移动项目中使用TypeScript ？    \r\n 2. 什么让TypeScript看起来如此美好——如何使你的工作更加简单并且使项目质量提高？ \r\n 3. 回到TypeScript本身，它是如何给javascript加上语法糖以及这些特性？\r\n\r\n**TypeScript可以比我自己创建更好的JavaScript**\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n我承认这，但这并不感到羞愧。当我职业生涯还处在web 1.0的时代时，并不要求我很早就开始使用JavaScript 但是最后通过JQuery开始工作。TypeScript似乎就是适合连接鸿沟的两端。你仍然需要知道怎么去编写TypeScript以及使用，但是"compiler"就像用来操作重物做一些体力活，特别是当需要把类语法习惯转到到嵌套的函数，从类方法转到原型。在以前，我可能不得不学习怎么自己去做，但是到现在，我很高兴享受这些方便。我能写出就像我在其他语言中熟悉的对象和方法，并且最终得到原生的JavaScript。另一方面，我很认同 TypeScript代码相较于原生的JavaScript更加干净并且易于维护。下载我提供的示例文件并且编译，对比查看这两个文件。你认为哪一个更加利于维护？虽然JavaScript看起来非常干净，但是即使如此相对于TypeScript，你懂得。。\r\n\r\n**TypeScript可以很好的帮助组织代码**\r\n\r\n我想在每一个大型的web项目中用一种方式来描述JavaScript代码的状况，我学习到了一个词就是“大杂烩”。有一些写在页面文件中，有一些又在.js文件中。一些重复的代码遍布所有地方，通常情况下是因为没有一种良好的代码组织方式，在这种状态下工作是一种只有前端开发者才能理解的痛。\r\nTypeScript 提供了一种创建模块的能力并且在下面几种情况中可能帮到你：\r\n\r\n1. 模块提供就像C#一样的命名空间。它们可以帮助你把相似的对象收集到一个集合，很好的避免因为其他对象以及在全局命名空间中重复声明引起的命名冲突。\r\n2. export关键字严格约束了模块外代码的访问，干净的定义了什么是需要暴露给使用者的接口还是私有属性，任何一个人都能制订相应规则。\r\n3. 一组类的集合允许一个模块能被分为多个文件为了更简便维护，可读性，重用（以及更多的情况）\r\n你可能注意到，我没有把我的代码放在单独的文件中。我决定不这样做是因为我想一次把所有的代码一次贴出来以供演示。但是如果它是一个更大的项目的一部分，我可能就会更具每一个类使用一个单独的文件了。\r\n\r\n**TypeScript可以帮助你分享和重用你的代码**\r\n\r\n这是第一部分和第二部分观点的结果。在显而易见的风险，如果你有高质量的代码，很好的组织，共享或重用在多个项目中很容易。例如，如果你要分割我下面的代码，让每一类在一个单独的.ts文件，它会很容易保持类作为一个公共库的一部分，但也可以只选择你想要一个特定的应用程序模块。也许你不需要做API调用，但你需要一个Timer 或 resultlog？那么TypeScript的这种结构和约定会更加方便。\r\n\r\n当我向同事提到我按照这篇文章中的方式工作的时候，他的第一个问题是"如何在类似Angular的环境下工作?"换句话说，就是如何用新的TypeScript的方式分发和重用你目前存在的JavaScript代码。这个问题的答案是- 一个d.ts文件，或者一个库定义文件。这样允许TypeScript通过接口理解和同存在的Javascript代码库交互。在Angular的栗子中，你能使用GIT从仓库或者NuGet命令下载库定义文件。d.ts文件大多数的重要的JS库是有效的。对于你自己的JavaScript库，你将需要创建你自己的定义，或者直接使用TypeScript 重写代码库（例如Angular正在这样做一样）。\r\n\r\n\r\n**********************\r\nTypeScript当然提供了同样优秀的其他益处，但是上面说的这些内容真的打动我，并投入实际使用。我很喜欢使用这种方式，并且打算在以后的项目中使用它。事实上，目前我不打算在不使用TypeScript的情况下去创建一个重量级JavaScript项目。随着JavaScript在各种不同软件项目中被使用是一件司空见惯的事情，你必须能够写出高质量可重用的JavaScript代码，那么TypeScript可以帮你做到这一点。\r\n\r\n这里链接了一个我的简单项目——这是一个API测试模块模拟一个我写了几个月的PowerShell脚本[点击下载][1]。包含TypeScript 模块代码之外， 还有一个html示例页面说明如何执行它。\r\n\r\n版权声明    \r\n\r\n> 文章，以及附带的任何源码和文件，在Code Project Open License(CPOL)署名下。欢迎转载，但请保留文章版权声明以及译者、原文信息。\r\n\r\n翻译    \r\n\r\n> 少个分号 http://www.printf.cn\r\n\r\n原文地址    \r\n\r\n> http://www.codeproject.com/Articles/989913/Exploring-TypeScript-and-What-Makes-It-Sweet\r\n\r\n  [1]: http://bryanoconnell.blogspot.com/2014/11/test-your-restapi-with-powershell.html', 0, 1, NULL, 'post', 'publish', NULL, 0, '1', '1', '1', 0),
(41, 'Unnamed QQ Screenshot20150519183149.png', 'Unnamed-QQ-Screenshot20150519183149-png', 1432031800, 1432031800, 'a:5:{s:4:"name";s:39:"Unnamed QQ Screenshot20150519183149.png";s:4:"path";s:35:"/usr/uploads/2015/05/3335647934.png";s:4:"size";i:54983;s:4:"type";s:3:"png";s:4:"mime";b:0;}', 0, 1, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 40),
(77, 'ZU86Ly2.jpg', 'ZU86Ly2-jpg', 1432739909, 1432739909, 'a:5:{s:4:"name";s:11:"ZU86Ly2.jpg";s:4:"path";s:34:"/usr/uploads/2015/05/938565203.jpg";s:4:"size";i:9145;s:4:"type";s:3:"jpg";s:4:"mime";b:0;}', 34, 1, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(78, 'ZZZZtAW.jpg', 'ZZZZtAW-jpg', 1432740229, 1432740229, 'a:5:{s:4:"name";s:11:"ZZZZtAW.jpg";s:4:"path";s:35:"/usr/uploads/2015/05/2184557441.jpg";s:4:"size";i:28067;s:4:"type";s:3:"jpg";s:4:"mime";b:0;}', 35, 1, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(43, '青年文明号.pptx', '青年文明号-pptx', 1432133871, 1432133871, 'a:5:{s:4:"name";s:20:"青年文明号.pptx";s:4:"path";s:36:"/usr/uploads/2015/05/4268881160.pptx";s:4:"size";i:8003643;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 1, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(44, 'jijianWIN8fenggelansedonghuaPPTmoban.pptx', 'jijianWIN8fenggelansedonghuaPPTmoban-pptx', 1432134210, 1432134210, 'a:5:{s:4:"name";s:41:"jijianWIN8fenggelansedonghuaPPTmoban.pptx";s:4:"path";s:35:"/usr/uploads/2015/05/554353330.pptx";s:4:"size";i:411620;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 2, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(45, 'yanjinshiyonglunwendabianketihuibaomobanzhengping.pptx', 'yanjinshiyonglunwendabianketihuibaomobanzhengping-pptx', 1432134894, 1432134894, 'a:5:{s:4:"name";s:54:"yanjinshiyonglunwendabianketihuibaomobanzhengping.pptx";s:4:"path";s:36:"/usr/uploads/2015/05/3707187193.pptx";s:4:"size";i:7887799;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 3, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(46, '中铁.pptx', '中铁-pptx', 1432136113, 1432136113, 'a:5:{s:4:"name";s:11:"中铁.pptx";s:4:"path";s:36:"/usr/uploads/2015/05/1197522667.pptx";s:4:"size";i:7616480;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 4, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(47, 'caisetongyongPPTmoban.pptx', 'caisetongyongPPTmoban-pptx', 1432136581, 1432136581, 'a:5:{s:4:"name";s:26:"caisetongyongPPTmoban.pptx";s:4:"path";s:36:"/usr/uploads/2015/05/2310593437.pptx";s:4:"size";i:1359581;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 5, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(48, 'jianli.pptx', 'jianli-pptx', 1432139964, 1432139964, 'a:5:{s:4:"name";s:11:"jianli.pptx";s:4:"path";s:36:"/usr/uploads/2015/05/3399031927.pptx";s:4:"size";i:35317510;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 6, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(49, 'PPT-084.pptx', 'PPT-084-pptx', 1432140265, 1432140265, 'a:5:{s:4:"name";s:12:"PPT-084.pptx";s:4:"path";s:35:"/usr/uploads/2015/05/780375817.pptx";s:4:"size";i:4568398;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 7, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(50, 'jianlimoban.pptx', 'jianlimoban-pptx', 1432140496, 1432140496, 'a:5:{s:4:"name";s:16:"jianlimoban.pptx";s:4:"path";s:36:"/usr/uploads/2015/05/4293392588.pptx";s:4:"size";i:3862998;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 8, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(51, 'bianpinghualunwen.pptx', 'bianpinghualunwen-pptx', 1432140955, 1432140955, 'a:5:{s:4:"name";s:22:"bianpinghualunwen.pptx";s:4:"path";s:36:"/usr/uploads/2015/05/2610511250.pptx";s:4:"size";i:3669103;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 9, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(52, '2433534543545.pptx', '2433534543545-pptx', 1432141646, 1432141646, 'a:5:{s:4:"name";s:18:"2433534543545.pptx";s:4:"path";s:36:"/usr/uploads/2015/05/3011172788.pptx";s:4:"size";i:7626522;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 10, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(53, 'PPT031.pptx', 'PPT031-pptx', 1432141915, 1432141915, 'a:5:{s:4:"name";s:11:"PPT031.pptx";s:4:"path";s:34:"/usr/uploads/2015/05/42480411.pptx";s:4:"size";i:5114291;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 11, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(54, 'yanjinshiyonglunwendabianketihuibaomobanzhengping.pptx', 'yanjinshiyonglunwendabianketihuibaomobanzhengping-pptx-1', 1432142377, 1432142377, 'a:5:{s:4:"name";s:54:"yanjinshiyonglunwendabianketihuibaomobanzhengping.pptx";s:4:"path";s:35:"/usr/uploads/2015/05/483795807.pptx";s:4:"size";i:7887799;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 12, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(55, 'gerenjianliPPTmoban.ppt', 'gerenjianliPPTmoban-ppt', 1432142746, 1432142746, 'a:5:{s:4:"name";s:23:"gerenjianliPPTmoban.ppt";s:4:"path";s:35:"/usr/uploads/2015/05/1836995450.ppt";s:4:"size";i:19074560;s:4:"type";s:3:"ppt";s:4:"mime";b:0;}', 13, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(56, 'biyelunwendabian9.pptx', 'biyelunwendabian9-pptx', 1432142933, 1432142933, 'a:5:{s:4:"name";s:22:"biyelunwendabian9.pptx";s:4:"path";s:36:"/usr/uploads/2015/05/2313560569.pptx";s:4:"size";i:661320;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 14, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(57, 'gerenjianli.pptx', 'gerenjianli-pptx', 1432143224, 1432143224, 'a:5:{s:4:"name";s:16:"gerenjianli.pptx";s:4:"path";s:36:"/usr/uploads/2015/05/2085832818.pptx";s:4:"size";i:4949146;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 15, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(58, '结婚PPT5.pptx', '结婚PPT5-pptx', 1432170488, 1432170488, 'a:5:{s:4:"name";s:15:"结婚PPT5.pptx";s:4:"path";s:36:"/usr/uploads/2015/05/1389358833.pptx";s:4:"size";i:18106748;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 16, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(59, '婚庆PPT请务必使用office2010版本打开.pptx', '婚庆PPT请务必使用office2010版本打开-pptx', 1432171550, 1432171550, 'a:5:{s:4:"name";s:51:"婚庆PPT请务必使用office2010版本打开.pptx";s:4:"path";s:36:"/usr/uploads/2015/05/4056350116.pptx";s:4:"size";i:25057238;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 17, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(60, '123.pptx', '123-pptx', 1432172716, 1432172716, 'a:5:{s:4:"name";s:8:"123.pptx";s:4:"path";s:36:"/usr/uploads/2015/05/3265222865.pptx";s:4:"size";i:20624612;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 18, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(61, '婚礼ppt.pptx', '婚礼ppt-pptx', 1432173695, 1432173695, 'a:5:{s:4:"name";s:14:"婚礼ppt.pptx";s:4:"path";s:36:"/usr/uploads/2015/05/2933333325.pptx";s:4:"size";i:29003506;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 19, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(62, 'weimeixinxinglangmanhunlikaichePTmoban.pptx', 'weimeixinxinglangmanhunlikaichePTmoban-pptx', 1432175459, 1432175459, 'a:5:{s:4:"name";s:43:"weimeixinxinglangmanhunlikaichePTmoban.pptx";s:4:"path";s:36:"/usr/uploads/2015/05/2853097302.pptx";s:4:"size";i:37890922;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 20, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(79, '通过单元测试写出高质量的前端代码', '79', 1432740360, 1432742254, '<!--markdown-->> 编写JavaScript有时候很痛苦。往往从一段简单而有趣的脚本，慢慢的就变得一团糟。我曾经发现我自己陷入到充满回调和耦合的大杂烩中。因此，我想必须寻找一种有效的方式解决这些问题。\r\n\r\n**简介**\r\n\r\n编写JavaScript有时候很痛苦。往往从一段简单而有趣的脚本，慢慢的就变得一团糟。我曾经发现我自己陷入到充满回调和耦合的大杂烩中。因此，我想必须寻找一种有效的方式解决这些问题。在这篇文章中，我想通过书写单元测试来探索这种更好的书写Javascript的方式。\r\n\r\n我准备了一个demo来演示这种方式。通过精简不必要的逻辑，仅仅包含一个普通的带过滤功能的商品列表。没啥花哨的东西，但是能够表达出我了解到的这种产生高质量代码的解决方案的要点。\r\n\r\n[Download source code from Github][1]\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n**工具和环境搭建**\r\n\r\n我使用ASP.NET MVC 提供后端服务。在这个例子中，仅仅用到非常简单的数据库源，本文不会涉及后端相关的内容。\r\n\r\n但是对于前端，我将使用Grunt和Mocha来编写单元测试。这个工具运行在node.js下面，因此需要在你的机器上安装相应环境。你可以在他们相关的网站上找到关于这些工具的介绍。所以这里也不便赘述。不必多说，但是你可能需要通过全局安装的方式安装grunt-cli 的npm 包。\r\n\r\n下面是Gruntfile.js文件\r\n\r\n    module.exports = function (grunt) {\r\n    grunt.initConfig({\r\n        pkg: grunt.file.readJSON(''package.json''),\r\n        simplemocha: {\r\n            all: {\r\n                src: [''Scripts/spec/**/*.js''],\r\n                options: {\r\n                    ui: ''bdd'',\r\n                    reporter: ''spec''\r\n                }\r\n            }\r\n        }\r\n    });\r\n    grunt.loadNpmTasks(''grunt-simple-mocha'');\r\n    grunt.registerTask(''default'', [''simplemocha'']);\r\n};\r\n\r\n\r\n以及package.json 文件：\r\n\r\n    {\r\n    "name": "WriteDomLessJavaScriptUnitTests",\r\n    "version": "0.1.0",\r\n    "devDependencies": {\r\n        "grunt": "~0.4.5",\r\n        "grunt-simple-mocha": "~0.4.0",\r\n        "should": "~5.2.0"\r\n    }\r\n    }\r\n\r\n到这里，我们已经准备好所有的单元测试环境。在控制台(译者ps：linux shell 或 windows 的命令提示符)输入 npm install 命令,这些应该很简单完成。确认你所在的目录和配置文件的目录相同。\r\n\r\n**用户界面**\r\n\r\n在我开始前，希望你能开始思考这个问题，怎样更好的组织这些代码。这个表格看起来如下：\r\n![ZU86Ly2.jpg][2]\r\n\r\n不需要什么设计的内容。我们的工作是让下拉框和按钮相应用户的操作。下拉菜单过滤由提交的条件和通过ajax刷新获取数据。Razor代码如下(PS:翻译到这里才发现使用的Razor,读者可以百度下，这里的代码是服务器端模板语言):\r\n\r\n    @model ProductAllViewModel\r\n    @{\r\n        ViewBag.Title = "Demo";\r\n        var departments = Model\r\n            .Departments\r\n            .Select(d => new SelectListItem { Value = d.Id.ToString(), Text = d.Name })\r\n            .ToList();\r\n        departments.Insert(0, new SelectListItem { Value = "0", Text = "All" });\r\n    }\r\n    @Html.DropDownList("departments", departments)\r\n    <button id="retrieve" data-url="@Url.Action("Index", "Product")">Retrieve</button>\r\n    <p>List of products:</p>\r\n    <table>\r\n        <thead>\r\n            <tr>\r\n                <th>Name</th>\r\n                <th>Price</th>\r\n                <th>Department</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody id="products"\r\n               data-products="@Json.Encode(Model.Products)"\r\n               data-departments="@Json.Encode(Model.Departments)">\r\n            @foreach (var product in Model.Products)\r\n            {\r\n                <tr data-department="@product.DepartmentId">\r\n                    <td>@product.Name</td>\r\n                    <td>@product.Price.ToString("c")</td>\r\n                    <td>@Model.Departments.First(x => x.Id == product.DepartmentId).Name</td>\r\n                </tr>\r\n            }\r\n        </tbody>\r\n    </table>\r\n\r\n正如你看到的这样，这些只是干净的html 代码,没有任何JavaScript,对代码保持分开，是出于一个很好的原因，后面你会了解到。\r\n\r\n**分而治之**\r\n\r\n看到Html，你能想象到JavaScript是怎么样的呢？我把产品列表中的数据对产品属性里面#products标签。注意我使用了ID作为排序时的参考。这是为了容易从DOM中查到该记录，但是实际中不应该这样写。\r\n\r\n基本的思想是DOM是承载数据的一种结构。当你看到这种结构的时候，JavaScript本身应该从DOM拆解。\r\n这样JavaScript就可以做好不依赖DOM元素的方式，这样更加易于测试和解耦。试着重新思考DOM，DOM是数据的元素，就像灵魂和肉体的关系。这样获得一个新的抽象层次，我们可以换以用一种新的方式思考问题。\r\n\r\n    describe(''A product module'', function () {\r\n    it(''filters by department'', function () {\r\n        var list = [{ "DepartmentId": 1, "Name": "X" }, \r\n        { "DepartmentId": 2, "Name": "Y" }],\r\n            result = product.findByDepartmentId(list, 2);\r\n        result.length.should.equal(1);\r\n        result[0].Name.should.equal(''Y'');\r\n        result = product.findByDepartmentId(list, 0);\r\n        result.length.should.equal(2);\r\n    });\r\n});\r\n\r\n单元测试帮我们更加明确的思考问题。测试驱动开发的目的是开发出更加好的代码。让我们通过测试编写出业务代码：\r\n\r\n    var product = (function () {\r\n    return {\r\n        findByDepartmentId: function (list, departmentId) {\r\n            return list.filter(function (prod) {\r\n                return departmentId === 0 || prod.DepartmentId === departmentId;\r\n            });\r\n        }\r\n    };\r\n    }());\r\n    if (typeof module === ''object'') {\r\n        module.exports = product;\r\n    }\r\n\r\n需要注意的是我使用了module.exports,因为我可以在Node.js使用相同的代码却不需要一个浏览器解析。我编写了了简单个filter()方法完成这些工作。\r\n\r\n**DOM事件测试**\r\n\r\n原来，DOM元素不需要在线JavaScript响应事件。从固定思维中跳出，DOM元素不需要和具体的业务逻辑结合得太过紧密，因此可以像下面这样：\r\n\r\n    (function () {\r\n    var departmentSelect = document.getElementById(''departments''),\r\n        retrieve = document.getElementById(''retrieve''),\r\n        elProducts = document.getElementById(''products'');\r\n\r\n    if (departmentSelect) {\r\n        departmentSelect.addEventListener(''change'', function (e) {\r\n            var departmentId = parseInt(e.currentTarget.value, 10),\r\n                productList = JSON.parse(elProducts.dataset.products),\r\n                departmentList = JSON.parse(elProducts.dataset.departments),\r\n                filteredList = product.findByDepartmentId(productList, departmentId);\r\n            elProducts.innerHTML = product.renderTable(filteredList, departmentList);\r\n        });\r\n    }\r\n    }());\r\n\r\n我是使用一个新的模块product.findByDepartmentId() 这样来封装具体的操作。这个组件能够通过测试即可，我们就可以知道它能正常工作。需要注意使用 需要检查departmentSelect DOM元素存在。为了检查是否存在，我使用了if来判断。如果找到了这个元素就动态的绑定一个元素。至于product.renderTable()呢？同样的需要用同样的方式检查，请继续向下看。\r\n\r\n**The DOM API**\r\n最后，elProducts.innerHTML获取到的必须是一个我们期望的字符串，因此我们可以编写单元测试：\r\n\r\n    it(''renders a table'', function () {\r\n    var products = [\r\n            { "DepartmentId": 1, "Name": "X", "Price": 3.2 },\r\n            { "DepartmentId": 2, "Name": "Y", "Price": 1.11 }],\r\n        departments = [{ "Id": 1, "Name": "A" }, { "Id": 2, "Name": "B" }],\r\n        html = ''<tr><td>X</td><td>$3.20</td><td>A</td>'' +\r\n            ''</tr><tr><td>Y</td><td>$1.11</td><td>B</td></tr>'',\r\n        result = product.renderTable(products, departments);\r\n    result.should.equal(html);\r\n    });\r\n编写需要被测试的业务代码如下:\r\n\r\n    renderTable: function (products, departments) {\r\n    var html = '''';\r\n    products.forEach(function (p) {\r\n        var department;\r\n        departments.forEach(function (d) {\r\n            department = d.Id === p.DepartmentId ? d.Name : department;\r\n        });\r\n        html +=\r\n            ''<tr>'' +\r\n                ''<td>'' + p.Name + ''</td>'' +\r\n                ''<td>$'' + p.Price.toFixed(2) + ''</td>'' +\r\n                ''<td>'' + department + ''</td>'' +\r\n            ''</tr>'';\r\n    });\r\n    return html;\r\n    }\r\n\r\n**Ajax**\r\n有的时候对于一个大而复杂的ajax应用，简直就是打BOSS（PS:游戏里面术语，你懂得）。我们依然需要想些办法保持良好的设计原则。往下看：\r\n\r\n    retrieve.addEventListener(''click'', function (e) {\r\n    var bustCache = ''?'' + new Date().getTime(),\r\n        oReq = new XMLHttpRequest();\r\n    elProducts.innerHTML = ''loading...'';\r\n    oReq.onload = function () {\r\n        var data = JSON.parse(this.responseText),\r\n            departmentId = parseInt(departmentSelect.value, 10),\r\n            fileredList = product.findByDepartmentId(data.Products, departmentId);\r\n        elProducts.innerHTML = product.renderTable(fileredList, data.Departments);\r\n    };\r\n    oReq.open(''GET'', e.currentTarget.dataset.url + bustCache, true);\r\n    oReq.setRequestHeader(''X-Requested-With'', ''XMLHttpRequest'');\r\n    oReq.send();\r\n    });\r\n\r\n总之，这里没有必要增加一个新的模块的必要。这个product 模块的职责很明确，所以我能够重用这些代码。这里最巧妙的是所有的product 数据没有耦合到DOM上面，因此我可以灵活的运用并测试它。\r\n现在使用grunt运行你的测试并且可以看到代表通过测试的绿色指示。\r\n![ZZZZtAW.jpg][3]\r\n\r\n从上面的图片中我们无法看出是否写出了干净的代码，但是每个干净的测试标签显示了每个模块具有清晰的职责。例如 本文中"A product filters by"就是你的代码职责的体现。在这个解决方案中通过简单的测试，我便能够找出那些前端模块具体做了什么。当然，不要奢望你能够把一些设计很糟糕的代码通过测试。\r\n\r\n**结论**\r\n\r\n我希望你能看到一个更好的组织代码的方案。在我的心目中，可测试的代码是编写良好的代码。尤其是在编写JavaScript这种很难组织的代码。有的时候，我浪费了很多时间在仅仅处理一个JavaScript问题，却把整个项目加载到浏览器中分析。所以，通过grunt的自动化单元测试是一个巨大的生产力的提高。\r\n\r\n单元测试的背后思想可以让你避免在无用的地方花费大量时间，同时有更多的时间写代码。如果有兴趣，你可以在GitHub找到整个解决方案的代码。\r\n\r\n版权声明\r\n\r\n> 文章，以及附带的任何源码和文件，在Code Project Open License(CPOL)署名下。欢迎转载，但请保留文章版权声明以及译者、原文信息。\r\n\r\n翻译\r\n\r\n> 少个分号 [http://www.printf.cn][4]\r\n\r\n原文地址\r\n\r\n> http://www.codeproject.com/Articles/989913/Exploring-TypeScript-and-What-Makes-It-Sweet\r\n\r\n\r\n  [1]: https://github.com/beautifulcoder/WriteDomLessJavaScriptUnitTests\r\n  [2]: http://bcs.duapp.com/helpjs/usr/uploads/2015/05/938565203.jpg\r\n  [3]: http://bcs.duapp.com/helpjs/usr/uploads/2015/05/2184557441.jpg\r\n  [4]: http://www.printf.cn', 0, 1, NULL, 'post', 'publish', NULL, 0, '1', '1', '1', 0),
(64, '演示文稿1.pptx', '演示文稿1-pptx', 1432193843, 1432193843, 'a:5:{s:4:"name";s:18:"演示文稿1.pptx";s:4:"path";s:36:"/usr/uploads/2015/05/2937454222.pptx";s:4:"size";i:701288;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 21, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(65, '三严三实.pptx', '三严三实-pptx', 1432597288, 1432597288, 'a:5:{s:4:"name";s:17:"三严三实.pptx";s:4:"path";s:36:"/usr/uploads/2015/05/3733012766.pptx";s:4:"size";i:9299542;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 22, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(66, 's1-01.pptx', 's1-01-pptx', 1432598753, 1432598753, 'a:5:{s:4:"name";s:10:"s1-01.pptx";s:4:"path";s:36:"/usr/uploads/2015/05/2495536861.pptx";s:4:"size";i:13909962;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 23, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(67, 'PPT140424请务必使用office2010以上版本打开.pptx', 'PPT140424请务必使用office2010以上版本打开-pptx', 1432600101, 1432600101, 'a:5:{s:4:"name";s:57:"PPT140424请务必使用office2010以上版本打开.pptx";s:4:"path";s:36:"/usr/uploads/2015/05/2295645033.pptx";s:4:"size";i:24096958;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 24, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(68, 'ppt模板.ppt', 'ppt模板-ppt', 1432600782, 1432600782, 'a:5:{s:4:"name";s:13:"ppt模板.ppt";s:4:"path";s:35:"/usr/uploads/2015/05/2809093130.ppt";s:4:"size";i:35783168;s:4:"type";s:3:"ppt";s:4:"mime";b:0;}', 25, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(69, 'bpb-2015-3.pptx', 'bpb-2015-3-pptx', 1432602588, 1432602588, 'a:5:{s:4:"name";s:15:"bpb-2015-3.pptx";s:4:"path";s:35:"/usr/uploads/2015/05/249299188.pptx";s:4:"size";i:9517307;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 26, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(70, '工作总结.pptx', '工作总结-pptx', 1432603101, 1432603101, 'a:5:{s:4:"name";s:17:"工作总结.pptx";s:4:"path";s:36:"/usr/uploads/2015/05/1820892637.pptx";s:4:"size";i:9126551;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 27, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(71, 'banjiangshengdian2.pptx', 'banjiangshengdian2-pptx', 1432606318, 1432606318, 'a:5:{s:4:"name";s:23:"banjiangshengdian2.pptx";s:4:"path";s:33:"/usr/uploads/2015/05/5100508.pptx";s:4:"size";i:59852249;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 28, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(72, '颁奖典礼3.pptx', '颁奖典礼3-pptx', 1432607583, 1432607583, 'a:5:{s:4:"name";s:18:"颁奖典礼3.pptx";s:4:"path";s:36:"/usr/uploads/2015/05/1070717392.pptx";s:4:"size";i:61700916;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 29, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(73, '2015颁奖完整模板精简3.pptx', '2015颁奖完整模板精简3-pptx', 1432609391, 1432609391, 'a:5:{s:4:"name";s:34:"2015颁奖完整模板精简3.pptx";s:4:"path";s:35:"/usr/uploads/2015/05/344351698.pptx";s:4:"size";i:53052357;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 30, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(74, '2015颁奖47.pptx', '2015颁奖47-pptx', 1432610318, 1432610318, 'a:5:{s:4:"name";s:17:"2015颁奖47.pptx";s:4:"path";s:35:"/usr/uploads/2015/05/590501465.pptx";s:4:"size";i:54189522;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 31, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(75, 'biyezuopinji.pptx', 'biyezuopinji-pptx', 1432631861, 1432631861, 'a:5:{s:4:"name";s:17:"biyezuopinji.pptx";s:4:"path";s:36:"/usr/uploads/2015/05/2982624998.pptx";s:4:"size";i:6972480;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 32, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(76, 'PPT140620请务必使用office2010以上版本打开.pptx', 'PPT140620请务必使用office2010以上版本打开-pptx', 1432636603, 1432636603, 'a:5:{s:4:"name";s:57:"PPT140620请务必使用office2010以上版本打开.pptx";s:4:"path";s:35:"/usr/uploads/2015/05/816920792.pptx";s:4:"size";i:64383609;s:4:"type";s:4:"pptx";s:4:"mime";b:0;}', 33, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 79),
(80, 'article1.png', 'article1-png', 1433861916, 1433861916, 'a:5:{s:4:"name";s:12:"article1.png";s:4:"path";s:35:"/usr/uploads/2015/06/3320549605.png";s:4:"size";i:79406;s:4:"type";s:3:"png";s:4:"mime";b:0;}', 1, 1, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 87),
(81, 'youtube.png', 'youtube-png', 1433861989, 1433861989, 'a:5:{s:4:"name";s:11:"youtube.png";s:4:"path";s:35:"/usr/uploads/2015/06/3617316733.png";s:4:"size";i:138476;s:4:"type";s:3:"png";s:4:"mime";b:0;}', 2, 1, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 87),
(83, 'mario.png', 'mario-png', 1433862235, 1433862235, 'a:5:{s:4:"name";s:9:"mario.png";s:4:"path";s:35:"/usr/uploads/2015/06/1434031608.png";s:4:"size";i:120769;s:4:"type";s:3:"png";s:4:"mime";b:0;}', 3, 1, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 87),
(84, 'spritesheet.png', 'spritesheet-png', 1433862950, 1433862950, 'a:5:{s:4:"name";s:15:"spritesheet.png";s:4:"path";s:34:"/usr/uploads/2015/06/203518402.png";s:4:"size";i:35310;s:4:"type";s:3:"png";s:4:"mime";b:0;}', 4, 1, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 87),
(85, 'diagram-preview.png', 'diagram-preview-png', 1433863046, 1433863046, 'a:5:{s:4:"name";s:19:"diagram-preview.png";s:4:"path";s:35:"/usr/uploads/2015/06/1958798755.png";s:4:"size";i:75353;s:4:"type";s:3:"png";s:4:"mime";b:0;}', 5, 1, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 87),
(86, 'victory1.png', 'victory1-png', 1433863230, 1433863230, 'a:5:{s:4:"name";s:12:"victory1.png";s:4:"path";s:35:"/usr/uploads/2015/06/3037098784.png";s:4:"size";i:45532;s:4:"type";s:3:"png";s:4:"mime";b:0;}', 6, 1, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 87);
INSERT INTO `typecho_contents` (`cid`, `title`, `slug`, `created`, `modified`, `text`, `order`, `authorId`, `template`, `type`, `status`, `password`, `commentsNum`, `allowComment`, `allowPing`, `allowFeed`, `parent`) VALUES
(87, '使用HTML5创建超级马里奥游戏 ', '87', 1433863260, 1433864105, '<!--markdown--> > 原文作者在浏览器中实现一个可以玩的著名的跳跃游戏，作者介绍了动画、面向对象、位运算、图片精灵等诸多干货\r\n    [下载本文项目源文件 - 0.99 MB][1]\r\n \r\n**简介**\r\n\r\n![article1.png][2]\r\n\r\n在历史上很多优秀的电脑游戏被创造出来，同时奠定了游戏行业发展的基础。这些游戏其中包括了超级马里奥。马里奥这个人物形象第一次出现是在大金刚,随后在1983年的马里奥系列中变得非常出名。现在出现了大量的围绕马里奥形象的衍生版本以及3D版本的游戏。在这篇文章中，我们将开发一个非常简单的超级马里奥山寨版本，为了适合讲解，我们设计得更具有拓展性，具有新的敌人、物品、英雄。\r\n\r\n游戏的代码使用OOP的方式来组织。虽然目前JavaScript被认为是一种基于原型的脚本语言，面向对象可能有很多坑，但是我们还是可以尝试使用面向对象。我们将介绍一些关于面向对象的知识和约定，这种模式在整个编码过程会极其有用。\r\n\r\n**背景**\r\n\r\n![youtube.png][3]\r\n\r\n\r\n最开始的代码是我的两个学生用我给他们提供的“HTML5编程开发Web应用，CSS3和JavaScript”课程代码为基础。他们开发的游戏包括一个关卡编辑器，声音和图形。游戏本身到没有什么BUG，但是性能比较差，并且代码不是很容易拓展，主要原因是使用了jQuery 的插件。主要是我的责任，因为开始我推荐使用最简单的方法去实现，在简单的情况下使用jQuery插件做动画并没啥问题，但是一旦动画多了就会导致性能问题。因为每一个新的动画（即使同时产生）将会占用CPU的时间片段。\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n所以在这篇文章中，专注于处理在游戏中需要注意的问题。通过这个文章和重写整个游戏，解决上文的几个问题。\r\n\r\n - 游戏应该能容易拓展。\r\n - 不会因为太多动画元素导致性能变差。\r\n - 游戏的开始或者暂停动作将直接对所有的元素起作用。\r\n - 游戏的运行不应该强依赖额外的元素，例如图片和声音，注意解耦\r\n\r\n尽管最后这一条听起来有点不可思议，但是在我看来还是非常重要，那么我们来看下面代码来阐述我的观点：\r\n\r\n    $(document).ready(function() {\r\n        var sounds = new SoundManager();//**\r\n        var level = new Level(''world'');//word 是作为相应游戏容器的DOM元素的ID\r\n        level.setSounds(sounds);//*\r\n        level.load(definedLevels[0]);\r\n        level.start();\r\n        keys.bind();\r\n    });\r\n\r\n这样代码组织起来看起来好多了，但是实际上这里无法避免的一件事就是需要使用HTML5来实现马里奥。所需要的技术细节我们会在稍后讨论。回过头去看我们上面的使用"//**"备注的语句，这里创建了一个声音管理类的实例。它会载入声音特效。加入我们想去关闭这行代码，我们的声音管理类就不在工作。接下来需要对声音实例继续解释的是它并不是在全局作用域中，仅仅在局部作用域。我们这样做是因为没有对象在全局范围内需要对游戏的声音管理类实例的依赖。那么如果想要播放声音怎么办呢?如果某个对象想要播放声音，通过level提供的方法来实现。（每个对象存在都要依赖level，level类是整个游戏中被创建的众多对象中仅有的一个核心类）\r\n\r\n现在假如用*好做注释的这样代码能够被用来播放声音，如果我们不调用level实例 的 setSounds方法，level 实例上就不会有一个适配的声音类的实例对象附加上去。因此所有调用声音的请求都会被丢弃掉。这样可以实现声音管理可以插拔，这样我们仅仅移除两行代码可以实现移除声音管理。另一方面，我们也不得不多写这两行代码。当然这些在C#中可以更加优雅的使用依赖注入来实现。\r\n\r\n剩下的一点代码就是载入一个关卡（这里我们载入定义的第一个关卡），然后启动关卡。全局的按键对象调用bind()和unbind()控制文档中键盘事件。\r\n\r\n**基本的设计**\r\n\r\n![mario.png][4]\r\n\r\n我们准备在这篇文章中跳过这个声音管理接口。那将在另外一篇关于好的关卡设计器和各种其他有趣的东西的文章中介绍，其中之一就是声音管理器的接口。那么超级马里奥游戏的基本的HTML结构就像下面这样：\r\n\r\n    <!doctype html>\r\n    <html>\r\n    <head>\r\n    <meta charset=utf-8 />\r\n    <title>Super Mario HTML5</title>\r\n    <link href="Content/style.css" rel="stylesheet" />\r\n    </head>\r\n    <body>\r\n    <div id="game">\r\n    <div id="world">\r\n    </div>\r\n    <div id="coinNumber" class="gauge">0</div>\r\n    <div id="coin" class="gaugeSprite"></div>\r\n    <div id="liveNumber" class="gauge">0</div>\r\n    <div id="live" class="gaugeSprite"></div>\r\n    </div>\r\n    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>\r\n    <script src="Scripts/testlevels.js"></script>\r\n    <script src="Scripts/oop.js"></script>\r\n    <script src="Scripts/keys.js"></script>\r\n    <script src="Scripts/sounds.js"></script>\r\n    <script src="Scripts/constants.js"></script>\r\n    <script src="Scripts/main.js"></script>\r\n    </body>\r\n    </html>\r\n\r\n不必过多的介绍这里。需要注意的是我们看到ID为world包含了一个游戏的主区域。游戏的主要区域包括一些提示标签（和一些精灵动画标签），这个简单马里奥游戏仅仅包含了两个提示标签：获得的金币，另外一个则是剩下的生命数量。\r\n\r\n一个很重要的部分就是这些JavaScript文件被引入的区域。处于性能的考虑我们把脚本代码放到页面的最低端，这也是为什么jQuery 从CDN中获取（在这个例子中使用了Google 的CDN）(PS:这个链接在国内被墙，大家可以使用其他的CDN获取，例如百度的CDN)。其他的脚本应该打包压缩的。（ASP.NET MVC 中内置了该特性），这篇文章中为了可读性，就没有这样做。我们来看一下这个文件的主要内容：\r\n\r\n - testlevels.js文件是相当大的，应尽量压缩。它包含内置的关卡。所有这些关卡，由两个学生我的课程中整理出来的。第一个关卡是对经典游戏超级马里奥第一关的山寨（如果我没记错的话）\r\n - oop.js文件包含帮助代码简化和面向对象的JavaScript。我们将稍后讨论这一点。\r\n - keys.js文件创建的按键对象。如果我们想设计一个多人游戏或其他功能，我们也应该模块化脚本（像处理声音那样抽象出来）。\r\n - 声音管理写在sounds.js文件。基本的想法是WEB音频API可能赶上现有的API(flash)。现在的问题是，web音频API仅仅Google Chrome 浏览器和后期的Safari浏览器。尽量使用一个好的方式在浏览器中实现声音效果。\r\n - 文件constants.js包含常量和非常基本的辅助方法。\r\n - 其他对象集中在文件main.js。\r\n    \r\n在开始详细讲解实现之前我们看下CSS样式文件：\r\n\r\n    @font-face {\r\n       font-family: ''SMB'';\r\n       src: local(''Super Mario Bros.''),\r\n            url(''fonts/Super Mario Bros.ttf'') format(''truetype'');\r\n       font-style: normal;\r\n    }\r\n    #game {\r\n        height: 480px; width: 640px; position: absolute; left: 50%; top: 50%;\r\n        margin-left: -321px; margin-top: -241px; border: 1px solid #ccc; overflow: hidden;\r\n    }\r\n    #world { \r\n        margin: 0; padding: 0; height: 100%; width: 100%; position: absolute;\r\n        bottom: 0; left: 0; z-index: 0;\r\n    }\r\n    .gauge {\r\n        margin: 0; padding: 0; height: 50px; width: 70px; text-align: right; font-size: 2em;\r\n        font-weight: bold; position: absolute; top: 17px; right: 52px; z-index: 1000;\r\n        position: absolute; font-family: ''SMB'';\r\n    }\r\n    .gaugeSprite {\r\n        margin: 0; padding: 0; z-index: 1000; position: absolute;\r\n    }\r\n    #coinNumber {\r\n        left: 0;\r\n    }\r\n    #liveNumber {\r\n        right: 52px;\r\n    }\r\n    #coin {\r\n        height: 32px; width: 32px; background-image : url(mario-objects.png);\r\n        background-position: 0 0; top: 15px; left: 70px;\r\n    }\r\n    #live {\r\n        height: 40px; width: 40px; background-image : url(mario-sprites.png);\r\n        background-position : 0 -430px; top: 12px; right: 8px;\r\n    }\r\n    .figure {\r\n        margin: 0; padding: 0; z-index: 99; position: absolute;\r\n    }\r\n    .matter {\r\n        margin: 0; padding: 0; z-index: 95; position: absolute; width: 32px; height: 32px;\r\n    }\r\n\r\n现在看起来代码还是比较简短（但是还是有必要做一些解释）。最上面可以看到我们给我们的游戏添加了一个好看的像素字体，和游戏更贴切。然后我们设置了主要区域的大小为 640 x 480绝对像素。添加一个overflow为hidden是非常有必要的。因此我们我们仅仅对元素内部的世界进行操纵，意味着游戏只有一个方向的视图。关卡就放置在这个区域内部，显示计分信息的标签放到视图的头部，人物和CSS class相对应。按照同样被处理的还有声音以及其他元素：每个元素使用class来影响在视图中的效果。还有一个比较重要的就是z-index，我们可以把动态的操作对象总是放到静态元素的上面（也有例外，后续会讲到）。\r\n\r\n**JavaScript 面向对象**\r\n使用JavaScript实现面向对象其实并不困难，但是还是有那么一点混乱。主要原因就是JavaScript太过于灵活，可以通过多种方式可以去实现它。每种方式都有它的优势和缺点。对游戏而言，我们希望严格的保持一种风格，因此我建议下面这种方式：\r\n\r\n\r\n    var reflection = {};\r\n\r\n    (function(){\r\n        var initializing = false, fnTest = /xyz/.test(function(){xyz;}) ? /\\b_super\\b/ : /.*/;\r\n\r\n        // The base Class implementation (does nothing)\r\n        this.Class = function(){ };\r\n       \r\n        // Create a new Class that inherits from this class\r\n        Class.extend = function(prop, ref_name) {\r\n            if(ref_name)\r\n                reflection[ref_name] = Class;\r\n                \r\n            var _super = this.prototype;\r\n\r\n            // Instantiate a base class (but only create the instance,\r\n            // don''t run the init constructor)\r\n            initializing = true;\r\n            var prototype = new this();\r\n            initializing = false;\r\n             \r\n            // Copy the properties over onto the new prototype\r\n            for (var name in prop) {\r\n            // Check if we''re overwriting an existing function\r\n            prototype[name] = typeof prop[name] == "function" && \r\n                typeof _super[name] == "function" && fnTest.test(prop[name]) ?\r\n                (function(name, fn) {\r\n                    return function() {\r\n                        var tmp = this._super;\r\n\r\n                        // Add a new ._super() method that is the same method\r\n                        // but on the super-class\r\n                        this._super = _super[name];\r\n\r\n                        // The method only need to be bound temporarily, so we\r\n                        // remove it when we''re done executing\r\n                        var ret = fn.apply(this, arguments);        \r\n                        this._super = tmp;\r\n\r\n                        return ret;\r\n                    };\r\n                })(name, prop[name]) :\r\n                prop[name];\r\n            }\r\n             \r\n            // The dummy class constructor\r\n            function Class() {\r\n                // All construction is actually done in the init method\r\n                if ( !initializing && this.init )\r\n                    this.init.apply(this, arguments);\r\n            }\r\n             \r\n            // Populate our constructed prototype object\r\n            Class.prototype = prototype;\r\n             \r\n            // Enforce the constructor to be what we expect\r\n            Class.prototype.constructor = Class;\r\n\r\n            // And make this class extendable\r\n            Class.extend = arguments.callee;\r\n             \r\n            return Class;\r\n        };\r\n    })();\r\n\r\n这段代码是非常有用的基于原型实现继承，它的作者是John Resig。他在自己的博客中写过关于整个编码问题的文章（文章来自John Resig 关于JavaScript面向对象）。这些代码被直接包裹在匿名立即执行方法中是为了避免全局作用域，尽量在局部作用域中完成任务。Class对象是window 对象的一个拓展（实际上应该是最底层的一个对象，取决于代码运行的环境，例如果被执行在web浏览器中，Class类就会被挂到window对象上）\r\n\r\n我拓展了这些代码，让它更名副其实的作为Class。JavaScript没有原生和有效的反射特性，这就是我们自己实现类的局限，不得不多写一些代码来描述类的继承关系。将构造函数放到类的一个方法的变量中（稍后我们会看到），我们就可以通过选项把父类的名称作为第二个参数传入。如果我们这样做，一个引用的构造函数被放置到作为以第二个参数传入的属性名的对象映射（PS:这句话太难理解很翻译，看代码很容易懂，就是继承的时候传个名称，到时候生成的子类中会以这个名称创建一个属性，并把父类放到这个属性上面）。 \r\n\r\n下例为一个简单的类构造过程：\r\n\r\n    var TopGrass = Ground.extend({\r\n        init: function(x, y, level) {\r\n            var blocking = ground_blocking.top;\r\n            this._super(x, y, blocking, level);\r\n            this.setImage(images.objects, 888, 404);\r\n        },\r\n    }, ''grass_top'');\r\n\r\n\r\n我们创建了一个TopGrass类，继承自Ground类。init()方法表示类的构造方法。为了调用父类的构造方法（有些时候不是必须的），我们必须调用上面的this._super() 方法. 这是一个特殊的方法，并且可以在任意方法中调用。\r\n\r\n一个很重要的提示就是：这里讲的面向对象和真正的多态（例如C#中原生支持的面向对象）之间有一个很重要的区别，那就是显然不可以从外部访问到父类的方法（因为我们无法改变我们看到的对象-它总是一个动态对象）所以仅仅访问通过this._super()来访问父类的方法包括被子类重写个方法也可以通过这种方法访问。仅仅是对上面这种方式来说的，所以这么说也并不绝对（PS：继承的方式有很多有些方式可以避免这个问题）。\r\n\r\nGround这个类相当无趣（因为只是一个中间层）。所以让我们看Ground的基类:\r\n\r\n    var Matter = Base.extend({\r\n        init: function(x, y, blocking, level) {\r\n            this.blocking = blocking;\r\n            this.view = $(DIV).addClass(CLS_MATTER).appendTo(level.world);\r\n            this.level = level;\r\n            this._super(x, y);\r\n            this.setSize(32, 32);\r\n            this.addToGrid(level);\r\n        },\r\n        addToGrid: function(level) {\r\n            level.obstacles[this.x / 32][this.level.getGridHeight() - 1 - this.y / 32] = this;\r\n        },\r\n        setImage: function(img, x, y) {\r\n            this.view.css({\r\n                backgroundImage : img ? c2u(img) : ''none'',\r\n                backgroundPosition : ''-'' + (x || 0) + ''px -'' + (y || 0) + ''px'',\r\n            });\r\n            this._super(img, x, y);\r\n        },\r\n        setPosition: function(x, y) {\r\n            this.view.css({\r\n                left: x,\r\n                bottom: y\r\n            });\r\n            this._super(x, y);\r\n        },\r\n    });\r\n\r\n在这里我们对基类进行拓展（这是一个顶级类）。所有的物体都静态的32*32像素和包含一个块变量（即使这个元素没有被设置为块元素），对于每一个物体和对象实例需要表现为一个实际的视图，所以我用JQuery 绑定一个dom 元素作为视图。所以每个对象都应该通过基类继承到setImage()方法\r\n\r\n同样的原因应用到setPosition（）方法。而 addToGrid（）方法所有的子类都需要被继承，用于给予根据关卡创建的游戏网格提供一个统一的方法。\r\n\r\n\r\n**游戏控制**\r\n\r\n游戏基本上都是根据键盘进行操纵。因此需要绑定事件处理到文档中。我们仅仅需要使用少量的几个键位，且能够按下和释放。于是我们需要监听每个键位的状态，我们拓展keys对象添加相应的属性和方法（比如左走监听左键，右走监听右键，等等），定义并调用bind()方法来实现绑定事件和取消绑定事件。我们再次使用JQuery来实现具体的工作，可以避免不同浏览器之间的差异。使用JQuery的意义在于我们可以集中精力解决具体问题而不是处理浏览器差异上。\r\n\r\n\r\n    var keys = {\r\n        //Method to activate binding\r\n        bind : function() {\r\n            $(document).on(''keydown'', function(event) {    \r\n                return keys.handler(event, true);\r\n            });\r\n            $(document).on(''keyup'', function(event) {    \r\n                return keys.handler(event, false);\r\n            });\r\n        },\r\n        //Method to reset the current key states\r\n        reset : function() {\r\n            keys.left = false;\r\n            keys.right = false;\r\n            keys.accelerate = false;\r\n            keys.up = false;\r\n            keys.down = false;\r\n        },\r\n        //Method to delete the binding\r\n        unbind : function() {\r\n            $(document).off(''keydown'');\r\n            $(document).off(''keyup'');\r\n        },\r\n        //Actual handler - is called indirectly with some status\r\n        handler : function(event, status) {\r\n            switch(event.keyCode) {\r\n                case 57392://CTRL on MAC\r\n                case 17://CTRL\r\n                case 65://A\r\n                    keys.accelerate = status;\r\n                    break;\r\n                case 40://DOWN ARROW\r\n                    keys.down = status;\r\n                    break;\r\n                case 39://RIGHT ARROW\r\n                    keys.right = status;\r\n                    break;\r\n                case 37://LEFT ARROW\r\n                    keys.left = status;            \r\n                    break;\r\n                case 38://UP ARROW\r\n                    keys.up = status;\r\n                    break;\r\n                default:\r\n                    return true;\r\n            }\r\n                \r\n            event.preventDefault();\r\n            return false;\r\n        },\r\n        //Here we have our interesting keys\r\n        accelerate : false,\r\n        left : false,\r\n        up : false,\r\n        right : false,\r\n        down : false,\r\n    };\r\n\r\n使用JQuery的另外一个强大的用处，我们可以使用相同方法同时给上键和下键绑定事件（使用JQuery 可以方便的给元素添加多个事件）。而且可以通过方法来调用手动触发事件，例如triger()方法，当然这样写也更加容易理解并且代码也更加干净。\r\n\r\n\r\n**CSS 精灵**\r\n\r\n所有的图形都是用CSS 精灵来实现，实现图片精灵很简单，但是需要注意下面几点。为了使用图片，我们需要把图片设置为对应元素的背景图。然后就是不要设置背景no-repeat 属性，我们可以利用这一点制作特殊的效果也不会出什么问题，反而可以给我们带来很多好处。\r\n\r\n然后就是设置背景图定位和偏移，通常偏移是(0,0)，指的是以元素的左上角。一般来说背景定位都是相对于当前元素的，设置为（20，10）就是左上角为原点，向下10像素，向右20像素偏移。如果设置为 (-20, -10) ,就会向下相反的地方偏移，但是只会显示包含在元素内部背景图了，超出到元素外部不会显示出来。\r\n\r\n![spritesheet.png][5]\r\n\r\n上面的图展示了CSS图片精灵如果工作。解释图片精灵的时候出了说明定位方式和原点之外还有，区分规则的CSS图片精灵和错杂的CSS图片精灵。规则的CSS图片精灵一般放到一个看不见的网格中，这样可以实现动画，错杂的CSS图片精灵就是把常用的图标都放到一起，不需要严格的网格，主要作用就是减少HTTP请求数量，提高web性能。\r\n\r\n\r\n当然我们需要实现动画，就需要把图片精灵按照网格排减少不必要的麻烦和计算。游戏使用下面的脚本来播放动画效果。\r\n\r\n    var Base = Class.extend({\r\n        init: function(x, y) {\r\n            this.setPosition(x || 0, y || 0);\r\n            this.clearFrames();\r\n        },\r\n        /* more basic methods like setPosition(), ... */\r\n        setupFrames: function(fps, frames, rewind, id) {\r\n            if(id) {\r\n                if(this.frameID === id)\r\n                    return true;\r\n                \r\n                this.frameID = id;\r\n            }\r\n            \r\n            this.frameCount = 0;\r\n            this.currentFrame = 0;\r\n            this.frameTick = frames ? (1000 / fps / constants.interval) : 0;\r\n            this.frames = frames;\r\n            this.rewindFrames = rewind;\r\n            return false;\r\n        },\r\n        clearFrames: function() {\r\n            this.frameID = undefined;\r\n            this.frames = 0;\r\n            this.currentFrame = 0;\r\n            this.frameTick = 0;\r\n        },\r\n        playFrame: function() {\r\n            if(this.frameTick && this.view) {\r\n                this.frameCount++;\r\n                \r\n                if(this.frameCount >= this.frameTick) {            \r\n                    this.frameCount = 0;\r\n                    \r\n                    if(this.currentFrame === this.frames)\r\n                        this.currentFrame = 0;\r\n                        \r\n                    var $el = this.view;\r\n                    $el.css(''background-position'', ''-'' + (this.image.x + this.width * \r\n                      ((this.rewindFrames ? this.frames - 1 : 0) - this.currentFrame)) + \r\n                      ''px -'' + this.image.y + ''px'');\r\n                    this.currentFrame++;\r\n                }\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n我们在基类中实现了图片精灵动画效果，因此具体的人物类和物品类继承了改方法，保证了动画的统一。基本上每个对象都有一个setupframes()来设置精灵动画的效果。当然精灵动画的原理就是背景从左到右定时切换，可以看做逐帧动画。需要设置动画的参数就是帧率（FPS）。\r\n\r\n\r\n这个方法还有一个很重要的参数就是ID。在这里，我们可以指定一个值，可以确定当前的动画，作为动画对象的标示符。这可以用来区分如果动画即将创建并开始运行。如果动画还没处理完成，我们不去充值内部你一些参数。那么我们怎么来使用这个动画类呢？最好的方法就是写一个类，我们看下马里奥人物的怎么动起来的：\r\n\r\n\r\n    var Mario = Hero.extend({\r\n        /*...*/\r\n        setVelocity: function(vx, vy) {\r\n            if(this.crouching) {\r\n                vx = 0;\r\n                this.crouch();\r\n            } else {\r\n                if(this.onground && vx > 0)\r\n                    this.walkRight();\r\n                else if(this.onground && vx < 0)\r\n                    this.walkLeft();\r\n                else\r\n                    this.stand();\r\n            }\r\n        \r\n            this._super(vx, vy);\r\n        },\r\n        walkRight: function() {\r\n            if(this.state === size_states.small) {\r\n                if(!this.setupFrames(8, 2, true, ''WalkRightSmall''))\r\n                    this.setImage(images.sprites, 0, 0);\r\n            } else {\r\n                if(!this.setupFrames(9, 2, true, ''WalkRightBig''))\r\n                    this.setImage(images.sprites, 0, 243);\r\n            }\r\n        },\r\n        walkLeft: function() {\r\n            if(this.state === size_states.small) {\r\n                if(!this.setupFrames(8, 2, false, ''WalkLeftSmall''))\r\n                    this.setImage(images.sprites, 81, 81);\r\n            } else {\r\n                if(!this.setupFrames(9, 2, false, ''WalkLeftBig''))\r\n                    this.setImage(images.sprites, 81, 162);\r\n            }\r\n        },\r\n        /* ... */\r\n    });\r\n\r\n在这里，我们重写setvelocity()方法。根据当前状态执行相应的行为，例如walkright()或walkleft()。然后根据具体的行为执行动画。使用ID标示获取动画对象，如果想要改变人物的位置那就创建一个新的动画即可。否则动画就一直保持存在，直到人物到达合适的位置上去。\r\n\r\n**类结构图**\r\n\r\n写一个游戏可以让激励我们学习面向对象。因为面向对象的游戏可以让代码更加简单好玩。同时也更少BUG，下面是游戏的类图：\r\n\r\n![diagram-preview.png][6]\r\n\r\n\r\n游戏的类结构图显示了各个类的依赖和关系。其中的好处就是可以非常容易的拓展游戏，下一节会讲到怎么拓展游戏，我们先把游戏部分说完。\r\n\r\n在JavaScript面向对象中，继承只是面向对象带给我们的一个要点。与之类似的特性还有就是类的实例化。我们怎么判断一个对象是某个类的实例呢？我们看下面例子：\r\n\r\n    var Item = Matter.extend({\r\n        /* Constructor and methods */\r\n        bounce: function() {\r\n            this.isBouncing = true;\r\n            \r\n            for(var i = this.level.figures.length; i--; ) {\r\n                var fig = this.level.figures[i];\r\n                \r\n                if(fig.y === this.y + 32 && fig.x >= this.x - 16 && fig.x <= this.x + 16) {\r\n                    if(fig instanceof ItemFigure)\r\n                        fig.setVelocity(fig.vx, constants.bounce);\r\n                    else if(fig instanceof Enemy)\r\n                        fig.die();\r\n                }\r\n            }\r\n        },\r\n    })\r\n\r\n这个例子显示了 item类的一部分。这个类包括了一个新的方法bounce(),这个方法用来控制人物的跳动，并且设置isBouncing变量为 true。就像原本的马里奥游戏中，恰好在跳跃人物的下面的怪物会被杀死。其他用处场景就是比如在蘑菇被顶了后，蘑菇会被弹起。\r\n\r\n\r\n**拓展游戏**\r\n\r\n有些时候总会遇到需要加入新的动画和图片。一个例子就是在fire（火力？）模式下给马里奥找一件合适衣服，于是这个例子使用了一个大号的马里奥图片。下面图片就是在火力模式下胜利的马里奥形象。\r\n\r\n![victory1.png][7]\r\n\r\n游戏中有本身的几个扩展点。一个典型的扩展点是建立一个新的类，给它一个适当的表现出它的用处的名字。关卡可以用这个名字，最后在关卡创建这个类的一个实例。我们创建一个例子来换一个新的样式：\r\n\r\n    var LeftBush = Decoration.extend({\r\n        init: function(x, y, level) {\r\n            this._super(x, y, level);\r\n            this.setImage(images.objects, 178, 928);\r\n        },\r\n    }, ''bush_left'');\r\n\r\n这样就很简单实现。我们仅仅需要继承从Decoration类，然后覆盖setImage()方法即可。可以为这个新的样式取一个名称为bush_left。\r\n\r\n现在让我们考虑一个新的敌人延长游戏的情况：鬼（不包括在源代码）！这是一个有点困难，但不是从原则。这个问题跟这一特定类型的敌人也要遵守规则。基本建设是直线前进：\r\n\r\n现在，我们能考虑引入一个新的敌人（一个没在原来代码中出现的形象：鬼魂），来延长故事线路。还是有些难度，但是这不是借口。对待这个问题和对待敌人的原则也是一致的，基本意见就是直线前进：\r\n\r\n    var Ghost = Enemy.extend(\r\n        init: function(x, y, level) {\r\n            this._super(x, y, level);\r\n            this.setSize(32, 32);\r\n        },\r\n        die: function() {\r\n            //Do nothing here!\r\n        },\r\n    });\r\n\r\n所以首先我们看到这里没有在die()方法里面，调用 _super()方法，结果就是这个怪物永远不会死（即使ta已经死了），这是我们定好的一个规则，其他规则还有：\r\n\r\n - 怪物只要看到马里奥，就会一直朝马里奥移动。\r\n - 如果马里奥回头，这个怪物停止\r\n - 即使马里奥有星星状态或者射击能力，怪物也不会死\r\n\r\n而这里也不在使用通用的setVelocity() 方法，为了实现这个例子，重新定义一个move()方法来代替：\r\n\r\n - 重力对幽灵不起作用\r\n - 幽灵满足上面的条件，然后移动就可以了\r\n\r\n了解完幽灵敌人的剩下信息，于是我们根据分析写出下面的代码，就像这样\r\n\r\n    var Ghost = Enemy.extend({\r\n        init: function(x, y, level) {\r\n            this._super(x, y, level);\r\n            this.setSize(33, 32);\r\n            this.setMode(ghost_mode.sleep, directions.left);\r\n        },\r\n        die: function() {\r\n                    //Do nothing here!\r\n            },\r\n        setMode: function(mode, direction) {\r\n            if(this.mode !== mode || this.direction !== direction) {\r\n                this.mode = mode;\r\n                this.direction = direction;\r\n                this.setImage(images.ghost, 33 * (mode + direction - 1), 0);\r\n            }\r\n        },\r\n        getMario: function() {\r\n            for(var i = this.level.figures.length; i--; )\r\n                if(this.level.figures[i] instanceof Mario)\r\n                    return this.level.figures[i];\r\n        },\r\n        move: function() {\r\n            var mario = this.getMario();\r\n            \r\n            if(mario && Math.abs(this.x - mario.x) <= 800) {\r\n                var dx = Math.sign(mario.x - this.x);\r\n                var dy = Math.sign(mario.y - this.y) * 0.5;\r\n                var direction = dx ? dx + 2 : this.direction;\r\n                var mode = mario.direction === direction ? ghost_mode.awake : ghost_mode.sleep;\r\n                this.setMode(mode, direction);\r\n                \r\n                if(mode)        \r\n                    this.setPosition(this.x + dx, this.y + dy);\r\n            } else \r\n                this.setMode(ghost_mode.sleep, this.direction);\r\n        },\r\n        hit: function(opponent) {           \r\n            if(opponent instanceof Mario) {\r\n                opponent.hurt(this);\r\n            }\r\n        },\r\n    }, ''ghost'');\r\n\r\n现在满足了所有的规则，幽灵只能移动。幽灵将在马里奥显示的范围内移动（实际上是800像素），为了实现干净继续添加一个用来存幽灵状态的ghost_mode对象\r\n\r\n    var ghost_mode = {\r\n        sleep : 0,\r\n        awake : 1,\r\n    };\r\n\r\n还需要介绍一些其他的新精灵。这个例子中我们使用了一个图像来放置幽灵图片。这个路径存放到images.ghost变量中然后便于引用图片\r\n\r\n![mario-ghost.png][8]\r\n\r\n\r\n**总结下有趣的地方**\r\n\r\n这篇文章用《HTML5 创建超级马里奥》命名，但事实上是并不是使用html5来实现的。HTML5中提供了\\<canvas>元素和\\<audio>元素，文章中都没有介绍到。然后另外一个有趣的例子就是我们要讲的关卡编辑器（我们将在后续的文章中讲到），稍后的课程会让游戏变得更有趣。我之所以没有讲到，限于这篇文章的篇幅。\r\n\r\n\r\n即使JavaScript是一个动态语言，但是我们仍然能够使用基于位操作定义枚举类型。就像下面这种方式来定义位计算的枚举类型。\r\ne.g.:\r\n\r\n    var ground_blocking = {\r\n        none   : 0,\r\n        left   : 1,\r\n        top    : 2,\r\n        right  : 4,\r\n        bottom : 8,\r\n        all    : 15,\r\n    };\r\n\r\n变量的值可以使用+操作符来实现区分，例如：\r\nvar blocking = ground_blocking.left + ground_blocking.top \r\n（这里使用位操作来计算，但是JavaScript操作位运算不是那么方便，还可以使用其他方法）\r\n\r\n这样可以读出变量和组合变量。\r\n也可以从组合变量中根据&操作符读出单值\r\n\r\n\r\n    //e.g. check for top-blocking\r\n    function checkTopBlocking(blocking) {\r\n        if((ground_blocking.top & blocking) === ground_blocking.top)\r\n            return true;\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n最初的文件可以在下列地址找到:\r\nhttp://www.florian-rappl.de/html5/projects/SuperMario/\r\n这个版本也在网上可以预览\r\n\r\n版权声明\r\n> 文章，以及附带的任何源码和文件，在Code Project Open License(CPOL)署名下。欢迎转载，但请保留文章版权声明以及译者、原文信息。\r\n\r\n翻译\r\n> 少个分号 http://www.printf.cn\r\n\r\n原文地址\r\n\r\n> http://www.codeproject.com/Articles/396959/Mario\r\n\r\n\r\n  [1]: http://www.codeproject.com/KB/HTML/396959/demo.zip\r\n  [2]: http://bcs.duapp.com/helpjs/usr/uploads/2015/06/3320549605.png\r\n  [3]: http://bcs.duapp.com/helpjs/usr/uploads/2015/06/3617316733.png\r\n  [4]: http://bcs.duapp.com/helpjs/usr/uploads/2015/06/1434031608.png\r\n  [5]: http://bcs.duapp.com/helpjs/usr/uploads/2015/06/203518402.png\r\n  [6]: http://bcs.duapp.com/helpjs/usr/uploads/2015/06/1958798755.png\r\n  [7]: http://bcs.duapp.com/helpjs/usr/uploads/2015/06/3037098784.png\r\n  [8]: http://bcs.duapp.com/helpjs/usr/uploads/2015/06/1378867189.png', 0, 1, NULL, 'post', 'publish', NULL, 0, '1', '1', '1', 0),
(88, 'mario-ghost.png', 'mario-ghost-png', 1433863432, 1433863432, 'a:5:{s:4:"name";s:15:"mario-ghost.png";s:4:"path";s:35:"/usr/uploads/2015/06/1378867189.png";s:4:"size";i:7111;s:4:"type";s:3:"png";s:4:"mime";b:0;}', 7, 1, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 87),
(89, '写写原生JavaScript系列(1)-使用CSS选择器选择元素', '89', 1435067580, 1446460086, '<!--markdown-->>PS:基础决定一个人是否能够在技术路线上走的更远，不积跬步，无以至千里，越来越多的公司看中员工技术基础。那么我们在享受jQuery极大便利的时候,也需要记得返璞归真看看原生的JavaScript 能给我带来些什么，有些时候是有好处的例如移动端可以减少额外的库的加载。偶然发现 plainjs.com 的一系列文章，感觉非常不错，跟着学习的同时搬运到博客，不足之处还望指正。\r\n\r\nquerySelectorAll() 是一个原生javascript （需要注意兼容性）提供的一个类似jquery选择器的方法。\r\n\r\nquerySelectorAll() 方法根据你传入的选择字符串返回一组匹配的DOM元素列表。\r\n如果你使用过JQuery操作过DOM元素，你可能对下面的写法不会感到意外：\r\n\r\n    var matches = document.querySelectorAll(''div.foo'');\r\n\r\n    for (i=0; i<matches.length; i++)\r\n        console.log(matches[i].innerHTML);\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n在这个例子中，我获取到一组以class 为"foo"的div标签构成的DOM元素列表，如果恰好没有匹配到任何元素，就会返回一个空的元素列表。这个方法支持CSS 写法的选择器，类似于jquery $(...)写法。但是需要注意就是在跨浏览器上不是很好，因此只有现代浏览器完美支持，IE8只有CSS2.1的选择器被支持，并且IE8在HTML5的标签处理上有些坑。放几个列子：\r\n\r\n\r\n    // 选择所有的DIV元素以及带有info的a标签\r\n    var matches = document.querySelectorAll("div, a.info");\r\n\r\n    // 选择所有的input单行输入框\r\n    var matches = document.querySelectorAll("input[type=''text'']");\r\n\r\n所以你看到了这个方法的好处了吧，因为可以不必依赖jQuery选择器，所以更快，并且没有额外的库引进来。另外，也可以用下面这种更快的获取到元素列表中第一个元素：\r\n\r\n    var match = document.querySelector(''div.foo'');\r\n\r\n    // 下面写法和上面写法效果一致\r\n    var match = document.querySelectorAll(''div.foo'')[0];\r\n\r\n**定义一个减少敲代码的方法吧**\r\n\r\nquerySelectorAll()和 querySelector() 确实很好，但是呢需要多打几个字，我们来定义一个  helper方法\r\n\r\n    // 根据传入的当前执行环境，然后执行querySelectorAll查找\r\n    function $(selector, context) {\r\n        return (context || document).querySelectorAll(selector);\r\n    }\r\n\r\n    // 根据传入的当前执行环境，查询第一个匹配到的元素\r\n    function $1(selector, context) {\r\n        return (context || document).querySelector(selector);\r\n    }\r\n    // 使用之\r\n\r\n    // 找出所有的"foo"类 下面的 "bar"类\r\n    var matches = $(''.foo .bar'');\r\n\r\n    // 传入执行环境的例子\r\n    var container = $1(''.foo'');\r\n    // 先找到了".foo" 再继续查找\r\n    var matches = $(''.bar'', container);\r\n\r\n这样简单的几下，就可以用$("..")但是不用引入jQuery查询出你想要的元素，并且就像你自己使用jQuery 一样，你还可以传入一个现成的DOM元素。但是jQuery 文档提供了完整的选择器API,这里需要注意的就是，jQuery 拓展了一系列选择器语法，但是不在CSS规范中，因此我们用querySelectorAll()也无法实现，但是如果不是很多特别的环境下，还是够用了。\r\n\r\n版权声明\r\n\r\n> 文章著作权归原作者所有,转载请注明出处。\r\n\r\n翻译by\r\n> 少个分号 http://www.printf.cn\r\n\r\n原文地址\r\n> https://plainjs.com/javascript/selecting/select-dom-elements-by-css-selectors-4/', 0, 1, NULL, 'post', 'publish', NULL, 0, '1', '1', '1', 0),
(92, '基于nodejs的CMS系统 ', '92', 1445241420, 1445241824, '<!--markdown-->项目地址\r\n\r\nhttps://github.com/linksgo2011/nodecms\r\n\r\n# 介绍\r\n    \r\n 学习nodejs入门项目,数据库使用的MySQL。\r\n 使用nodejs 开发定位于企业网站的简易CMS，目标为容易拓展、部署，前端开发者容易使用的CMS系统。\r\n\r\n# 特性\r\n\r\n* 使用nodejs 开发，为前端开发者准备的，前后端都使用JS，做个企业网站就很容易了\r\n* 简单（其实是懒），主要是首页、根据数据模型的列表页、详情页，单页，满足一般企业站点需要\r\n* 容易拓展，功能不满足可以容易拓展\r\n* 多模板\r\n* 支持不同模型列表、详情指定模板，更加灵活嵌入单页\r\n\r\n# 安装\r\n\r\n* 使用 克隆或直接下载项目到本地\r\n    \r\n    \r\n\r\n> git checkout https://github.com/linksgo2011/nodecms.git\r\n\r\n* 在根目录下使用命令行执行下面代码，安装nodejs 依赖的模块    \r\n\r\n> npm install \r\n\r\n* 在根目录下找到nodecms.sql文件，导入到你的MySQL数据库中\r\n\r\n* 修改config/connections.js 文件,根据上一步的数据库信息，修改数据库连接\r\n\r\n> 修改数据库连接地址\r\n    someMysqlServer: {\r\n        host: ''localhost'',\r\n        user: ''root'',\r\n        password: '''',\r\n        database: ''nodecms''\r\n    },\r\n\r\n* 启动项目 \r\n\r\n>  node app.js\r\n\r\n# 预览 \r\n\r\ndemo 地址 http://nodecms.duapp.com/\r\n\r\n后台地址 /admin/user/login  <br>\r\n默认用户 admin  admin\r\n\r\n\r\n# 贡献代码\r\n\r\n 120377843@qq.com', 0, 1, NULL, 'post', 'publish', NULL, 0, '1', '1', '1', 0),
(91, '免费域名批量扫描工具（无限制）', '91', 1438134660, 1438591364, '<!--markdown-->![免费域名批量扫描工具（无限制）][1]\r\n\r\n下载：[免费域名批量扫描工具（无限制）][2]\r\n\r\n\r\n  [1]: http://printf.cn/product/batchdomain/domain.gif\r\n  [2]:/product/batchdomain/%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D%E6%89%B9%E9%87%8F%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%EF%BC%88%E6%97%A0%E9%99%90%E5%88%B6%EF%BC%89.rar', 0, 1, NULL, 'post', 'publish', NULL, 0, '1', '1', '1', 0),
(93, '写写原生JavaScript系列(2)-根据类名选择元素', '93', 1446460037, 1446460037, '<!--markdown-->getElementsByClassName()方法可以在浏览器中快速获取DOM节点，但是需要注意不能在IE8及以下版本浏览器使用该方法。\r\n\r\n    var list = document.getElementsByClassName(''foo'');\r\n\r\n    // get the number of selected elements\r\n    console.log(listlength);\r\n\r\n    // iterate over elements and output their HTML content\r\n    for (var i=0; i<list.length; i++)\r\n    console.log(list[i].innerHTML);\r\n\r\n\r\n配合getElementById() 使用，可以快速从一个元素容器中获取一个元素节点数组\r\n\r\n    var container = document.getElementById(''header'');\r\n    var list = container.getElementByClassName(''foo'');\r\n\r\n这个方法较为性能较好，但是却只能使用class来选择元素，因此限制了它的用处，上一节说的querySelectorAll()则可以根据CSS选择器来选择元素，因此更加方便。\r\n\r\n原文\r\n\r\n> https://plainjs.com/javascript/selecting/select-elements-by-class-name-3/', 0, 1, NULL, 'post', 'publish', NULL, 0, '1', '1', '1', 0),
(94, '写写原生JavaScript系列(3)-判断当前元素匹配的CSS选择器', '94', 1446460805, 1446460805, '<!--markdown-->为了检查匹配的元素是否符合某个css选择器，现代浏览器提供了一个matches（）、matchesSelector（）方法，因此我们来写一个通用的方法，检查元素是否匹配某个css选择器。\r\n\r\n        // matches polyfill\r\n        this.Element && function(ElementPrototype) {\r\n            ElementPrototype.matches = ElementPrototype.matches ||\r\n            ElementPrototype.matchesSelector ||\r\n            ElementPrototype.webkitMatchesSelector ||\r\n            ElementPrototype.msMatchesSelector ||\r\n            function(selector) {\r\n                var node = this, nodes = (node.parentNode || node.document).querySelectorAll(selector), i = -1;\r\n                while (nodes[++i] && nodes[i] != node);\r\n                return !!nodes[i];\r\n            }\r\n        }(Element.prototype);\r\n\r\n因为现代浏览器提供了一些DOM4级别的内置方法，因此为了让其他浏览器支持，我们写出了通用的方法，但是为了速度更快，推荐使用拓展内置对象的方式实现。\r\n\r\n给一个使用的栗子：\r\n\r\n        var el = document.querySelector(''span'');\r\n        console.log(el.matches(''.foo''));\r\n\r\n原文出处\r\n  > https://plainjs.com/javascript/traversing/match-element-selector-52/', 0, 1, NULL, 'post', 'publish', NULL, 0, '1', '1', '1', 0),
(95, '写写原生JavaScript系列(4)-获取父节点、兄弟节点', '95', 1446519240, 1446601966, '<!--markdown-->## 元素节点操作\r\n\r\n获取节点父元素，直接使用一个兼容各个浏览器的方法\r\n\r\n    var el = document.querySelector(''div'');\r\n    var parent = el.parentNode;\r\n\r\n获取下一个、前一个或者所有的兄弟元素并且根据选择器过滤\r\n获取兄弟元素并过滤\r\n\r\n    function getSiblings(el, filter) {\r\n        var siblings = [];\r\n        el = el.parentNode.firstChild;\r\n        do { if (!filter || filter(el)) siblings.push(el); } while (el = el.nextSibling);\r\n        return siblings;\r\n    }\r\n\r\n    // example filter function\r\n    function exampleFilter(el) {\r\n        return elem.nodeName.toLowerCase() == ''a'';\r\n    }\r\n\r\n用法\r\n\r\n    el = document.querySelector(''div'');\r\n    // get all siblings of el\r\n    var sibs = getSiblings(el);\r\n    // get only anchor element siblings of el\r\n    var sibs_a = getSiblings(el, exampleFilter);\r\n\r\n更快速的获取前一个或者下一个兄弟节点的方法\r\n\r\n    var previous = el.previousSibling;\r\n    var next = el.nextSibling;\r\n    Get all following siblings of an element, optionally filtered:\r\n\r\n接受一个过滤条件参数的俄获取后面兄弟节点的方法\r\n\r\n    function getNextSiblings(el, filter) {\r\n        var siblings = [];\r\n        while (el= el.nextSibling) { if (!filter || filter(el)) siblings.push(el); }\r\n        return siblings;\r\n    }\r\n\r\n接受一个过滤条件参数的俄获取前面兄弟节点的方法\r\n\r\n    function getPreviousSiblings(el, filter) {\r\n        var siblings = [];\r\n        while (el = el.previousSibling) { if (!filter || filter(el)) siblings.push(el); }\r\n        return siblings;\r\n    }\r\n\r\n原文出处\r\n\r\n >https://plainjs.com/javascript/traversing/match-element-selector-52/\r\n', 0, 1, NULL, 'post', 'publish', NULL, 0, '1', '1', '1', 0),
(96, '写写原生JavaScript系列(4)-实现选择祖先元素closest()方法', '96', 1446604200, 1446604235, '<!--markdown-->匹配DOM上级元素，实现closest()方法\r\n\r\n从包含自己以及自己的祖先元素中选择出符合条件的元素，closest()类似于jQuery的$.closest() 方法，是一个在现代浏览器中内置支持的一个操作元素的方法，比如在火狐中。\r\n\r\n    // matches polyfill\r\n    this.Element && function(ElementPrototype) {\r\n        ElementPrototype.matches = ElementPrototype.matches ||\r\n        ElementPrototype.matchesSelector ||\r\n        ElementPrototype.webkitMatchesSelector ||\r\n        ElementPrototype.msMatchesSelector ||\r\n        function(selector) {\r\n            var node = this, nodes = (node.parentNode || node.document).querySelectorAll(selector), i = -1;\r\n            while (nodes[++i] && nodes[i] != node);\r\n            return !!nodes[i];\r\n        }\r\n    }(Element.prototype);\r\n\r\n    // closest polyfill\r\n    this.Element && function(ElementPrototype) {\r\n        ElementPrototype.closest = ElementPrototype.closest ||\r\n        function(selector) {\r\n            var el = this;\r\n            while (el.matches && !el.matches(selector)) el = el.parentNode;\r\n            return el.matches ? el : null;\r\n        }\r\n    }(Element.prototype);\r\n\r\n由于在现代浏览器中内置支持了这些元素，因此我们为了获得更好的性能，我们建议在原生对象上进行拓展，就可以像下面这样直接使用：\r\n\r\n    var el = document.querySelector(''span'');\r\n    console.log(el.closest(''div''));\r\n\r\n原文出处\r\n\r\n   > https://plainjs.com/javascript/traversing/match-element-selector-52/', 0, 1, NULL, 'post', 'publish', NULL, 0, '1', '1', '1', 0),
(97, '介绍.txt', '介绍-txt', 1447902160, 1447902160, 'a:5:{s:4:"name";s:10:"介绍.txt";s:4:"path";s:35:"/usr/uploads/2015/11/2277582108.txt";s:4:"size";i:92;s:4:"type";s:3:"txt";s:4:"mime";b:0;}', 1, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 99),
(98, 'c24f143390c43b2ad9f182febd33c04.jpg', 'c24f143390c43b2ad9f182febd33c04-jpg', 1447902171, 1447902171, 'a:5:{s:4:"name";s:35:"c24f143390c43b2ad9f182febd33c04.jpg";s:4:"path";s:35:"/usr/uploads/2015/11/1905007814.jpg";s:4:"size";i:243391;s:4:"type";s:3:"jpg";s:4:"mime";b:0;}', 2, NULL, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 99);
INSERT INTO `typecho_contents` (`cid`, `title`, `slug`, `created`, `modified`, `text`, `order`, `authorId`, `template`, `type`, `status`, `password`, `commentsNum`, `allowComment`, `allowPing`, `allowFeed`, `parent`) VALUES
(99, 'backbone移动webapp框架(backbone-mobile)发布', '99', 1449728400, 1449728434, '<!--markdown--># backbone-mobile\r\n 工程化构建高性能移动webAPP项目骨架。使用backbone、requirejs、amazeui等项目构建\r\n \r\n 本项目解决的问题： \r\n\r\n1.   足够好的性能\r\n2.   多人协同开发和统一的开发方式\r\n3.   包管理和打包发布\r\n4.   可维护性\r\n5.   集成UI套件以及页面过渡动画\r\n6.   资源按需加载和预加载\r\n\r\n# demo 预览\r\n\r\nhttp://linksgo2011.github.io/backbone-mobile/\r\n\r\n# 为什么需要 backbone-mobile\r\n    \r\n自己从事纯前端工作一年多而已，但是却遇到了很多的webapp项目需求。尝试过使用很多框架以及现成的解决方案，这些方案非常不错，但是对于自己项目来说\r\n借鉴意义大于拿来自己用。我把学习过的相关项目罗列出来细说12\r\n\r\n1、https://github.com/zhangxinxu/mobilebone 张鑫旭大牛的过渡动画骨架。这个是最先吸引我的一个东西，理念很好但是并没有用于项目。\r\n原因是这个项目重点在于过场动画以及切换方式，需要配合其他框架使用，需要添加路由、包管理、模型、控制器等等。还有一个项目官网\r\nhttp://www.mobilebone.org/\r\n\r\n2、https://github.com/yexiaochai/blade 叶小钗的blade框架。也有过渡动画效果，加入了requirejs，比较有特色的地方是使用了web组件。\r\n对于小型小项目还是够用，带有简单的UI，同样需要路由、包管理、模型、控制器等特性。\r\n\r\n3、https://github.com/driftyco/ionic ionic框架。非常强大的框架。使用angularjs作为路由、控制器、模型的实现。带有一套全面的UI框架，\r\n同时可以打包成APP，非常方便。不好的地方就是需要学习angularjs，这个问题不是太大，angular在移动端有个致命的问题，就是双向绑定造成的性能\r\n低下。同时也需要抛弃jquery生态系统。\r\n\r\n4、https://github.com/shixy/Jingle 和blade类似，也是比较完善的框架，同样存在无法工程化的问题。\r\n\r\n### backbone-mobile 工程化思路\r\n\r\n使用backbone + require 做项目骨架，拓展出controller 划分 controller、model、view、templetes目录来进行协作开发。\r\n\r\n# 如何使用\r\n\r\n首先我们说下目录项目的目录结构及其功能\r\n<pre>\r\n├─css\r\n├─fonts\r\n├─img\r\n└─js\r\n    ├─controller       控制相关代码\r\n    ├─lib              依赖的第三方库\r\n    │  ├─backbone\r\n    │  │  └─plugins\r\n    │  ├─jquery\r\n    │  │  └─plugins\r\n    │  ├─modernizr\r\n    │  ├─require\r\n    │  │  └─plugins\r\n    │  ├─underscore\r\n    │  └─vsf\r\n    │      ├─log\r\n    │      └─store\r\n    ├─template      模板文件，默认使用的html\r\n    │  ├─Layzload   每个控制器推荐对应一个目录\r\n    │  ├─Pages\r\n    │  └─Preload\r\n    └─view          视图目录\r\n</pre>\r\n\r\n可以看出我们依赖 backbone、requirejs 因此需要学习相关文档\r\n\r\n 下载本项目\r\n \r\n     git clone https://github.com/linksgo2011/backbone-mobile.git\r\n\r\n 需要将项目放到web服务器目录下，这里约定使用web根目录,在编辑器中打开后，我们来说明如何开始开发。我们想增加一个 http://localhost/#/Users/update/9\r\n 页面。我们需要怎么做呢？\r\n \r\n 在我们的项目中拓展backbone 增加了路由中的controller以及，因此约定路由 按照\r\n \r\n <pre>\r\n    #/controller/action/params\r\n </pre>\r\n \r\n 格式来书写。\r\n \r\n  \r\n  在template 目录下创建 Users 目录，添加一个 update.html 模板文件\r\n  \r\n  <pre>\r\n &lt;div class="page" id="users-update-page" &gt;\r\n    这是更新user的模板\r\n &lt;/div&gt;\r\n\r\n  </pre>\r\n  \r\n  为了展示页面过场效果，最外层div标签必须按照这个格式书写，并且每个html页面的ID全局唯一，避免页面切换时冲突\r\n  \r\n 接下来，我们在controller 目录下创建 \r\n UsersController.js \r\n <pre>\r\n/**\r\n */\r\ndefine(\r\n    [\r\n        ''jquery'',\r\n        ''underscore'',\r\n        ''backbone'',\r\n        ''controller/MobileController'',\r\n        ''view/BaseMobileView'',\r\n        ''ui'',\r\n        ''text!../template/Users/update.html''\r\n    ],\r\n    function($, _, Backbone, MobileController, BaseMobileView, ui, update) {\r\n        return MobileController.extend({\r\n            // 批量初始化\r\n            initialize: function() {\r\n                var views = {\r\n                    updateView: update\r\n                };\r\n                $.each(views, $.proxy(function(key,tpl){\r\n                    this[key] = new BaseMobileView({\r\n                        $container: $(''body''),\r\n                        appendable: true,\r\n                        controller: this,\r\n                        textTemplate: tpl\r\n                    });\r\n                },this));\r\n            },\r\n            update: function() {\r\n                // TODO\r\n\r\n                this.updateView.render({});\r\n                \r\n                // 给页面绑定自己的事件，因为每次render都会重新渲染页面，不必担心事件重复\r\n                this.updateView.$el.on("click", function(event) {\r\n                    $.alert("你点击了页面!");\r\n                });\r\n                \r\n            },\r\n        });\r\n    }\r\n);\r\n </pre>\r\n\r\n  \r\n  这样路由中的controller对应这文件，而第二段对应了文件中的update方法，当url第一次被请求时，控制器的initialize 方法会被执行。\r\n  然后每次请求都会执行update方法。\r\n  \r\n  我们可以在init方法中初始化view，然后在update方法中编写我们的业务逻辑\r\n  \r\n  这样你就可以根据路由划分功能和业务逻辑，更好的协作开发了。如果做过后端开发例如PHP、JAVA MVC相关的应该会很快理解这样编写代码的好处。\r\n  \r\n # 项目打包\r\n    \r\n使用requirejs开发的项目可以直接被打包成一个文件，提高加载效率，使用非常方便，项目根目录下放置了一个gruntfile文件，可以阅读该文件，使用nodejs相关模块打包即可。\r\n \r\n # 配合后端API\r\n \r\n 移步nodecms项目 https://github.com/linksgo2011/nodecms\r\n \r\n #最后说几句\r\n \r\n 这个项目不算自己完成，只能算是整合网络上一些代码然后修改整理了并在实际项目中使用过。\r\n 下面我罗列出项目中使用的代码来源\r\n \r\n \r\n 1.  backbone http://backbone.org.au/\r\n 2.  controller https://github.com/hoatle/mobile-webapp-template\r\n 3.  jquery http://jquery.com/\r\n 4.  unnderscode http://underscorejs.org/\r\n 5.  requeire http://www.requirejs.org/ \r\n 6.  amazeui  http://amazeui.org\r\n\r\n 疏漏之处请指正，谢谢！\r\n \r\n \r\n 贡献代码或者问题意见联系 120377843@qq.com', 0, 1, NULL, 'post', 'publish', NULL, 0, '1', '1', '1', 0),
(100, '首页.jpg', '首页-jpg', 1450774103, 1450774103, 'a:5:{s:4:"name";s:10:"首页.jpg";s:4:"path";s:35:"/usr/uploads/2015/12/1626350598.jpg";s:4:"size";i:466812;s:4:"type";s:3:"jpg";s:4:"mime";b:0;}', 1, 1, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 103),
(101, '新建 Microsoft PowerPoint 幻灯片.ppt', '新建-Microsoft-PowerPoint-幻灯片-ppt', 1450774156, 1450774156, 'a:5:{s:4:"name";s:41:"新建 Microsoft PowerPoint 幻灯片.ppt";s:4:"path";s:35:"/usr/uploads/2015/12/3854718930.ppt";s:4:"size";i:20992;s:4:"type";s:3:"ppt";s:4:"mime";b:0;}', 2, 1, NULL, 'attachment', 'publish', NULL, 0, '1', '0', '1', 103),
(104, 'javascript 六种基本数据类型转换', '104', 1453633320, 1453633580, '<!--markdown-->　\r\n１、显式转换\r\n\r\n	通过手动进行类型转换，Javascript提供了以下转型函数：\r\n	转换为数值类型：Number(mix)、parseInt(string,radix)、parseFloat(string)\r\n	转换为字符串类型：toString(radix)、String(mix)\r\n	转换为布尔类型：Boolean(mix)\r\n\r\n２、隐身转换\r\n\r\n	用于检测是否为非数值的函数：isNaN(mix)\r\n	递增递减操作符（包括前置和后置）、一元正负符号操作符\r\n	加法运算操作符\r\n	连接操作符\r\n	乘除、减号运算符、取模运算符\r\n	逻辑操作符（!、&&、||）\r\n	关系操作符（<, >, <=, >=）\r\n	相等操作符（==）\r\n\r\n３、转换规则\r\n\r\n\r\n<p>\r\n	<table style="width:100%;border-collapse: collapse;border:1px solid #ccc;" cellpadding="2" cellspacing="0" border="1" bordercolor="#000000">\r\n		<tbody>\r\n			<tr>\r\n				<td style="border:1px solid #ccc;">\r\n					<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					字符串<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					数字<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					布尔<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					数组<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					对象<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					null<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					undefined<br />\r\n				</td>\r\n			</tr>\r\n			<tr>\r\n				<td style="border:1px solid #ccc;">\r\n					<span>字符串</span><span></span><br />\r\n				</td>\r\n				<td style="text-align:center;">\r\n					-\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					如果字符串中只包含数字，则将其转换为十进制（忽略前导0）<br />\r\n如果字符串中包含有效的浮点格式，将其转换为浮点数值（忽略前导0）<br />\r\n如果是空字符串，将其转换为0<br />\r\n如果字符串中包含非以上格式，则将其转换为NaN<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					非空会转换为true,空字符串会转换为false<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					单个元素的数组<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					<p>\r\n						例子\r\n					</p>\r\n					<p>\r\n						Object("12")\r\n					</p>\r\nString {0: "1", 1: "2", length: 2, [[PrimitiveValue]]: "12"}<br />\r\n<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					<span>－</span><br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					-<br />\r\n				</td>\r\n			</tr>\r\n			<tr>\r\n				<td style="border:1px solid #ccc;">\r\n					<span>数</span><span>字</span><br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					字面量<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					-\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					<span>1和0 转换为false,true</span><span></span><br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					<span>单个元素的数组</span><span></span><br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					包装对象<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					－\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					－\r\n				</td>\r\n			</tr>\r\n			<tr>\r\n				<td style="border:1px solid #ccc;">\r\n					<span>布</span><span>尔</span><br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					true,false 分别转 "true","false"<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					true,false 分别转为 1,0<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					－<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					布尔数组<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					<span>包装对象</span><br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					<span>－</span><br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					<span>－</span><br />\r\n				</td>\r\n			</tr>\r\n			<tr>\r\n				<td style="border:1px solid #ccc;">\r\n					<span>数组</span><span></span><br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					使用,隔开的字符串<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					空数组为0<br />\r\n如果是一个元素是数字，undefined，null，就直接拿出来转换，undefined，null转换为0<br />\r\n否则转换为NaN<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					恒等为true\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					-\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					<span>包装对象</span><span></span><br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					<span>－</span><span></span><br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					<span>－</span><span></span><br />\r\n				</td>\r\n			</tr>\r\n			<tr>\r\n				<td style="border:1px solid #ccc;">\r\n					<span>对象</span><br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					使用 toString()<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					使用　valueof()<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					<span>恒等为true</span><br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					对象数组<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					-\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					-\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					-\r\n				</td>\r\n			</tr>\r\n			<tr>\r\n				<td style="border:1px solid #ccc;">\r\n					<span><span>n</span><span>ull(空对象)</span></span><br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					"null"<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					0\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					false\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					[null]<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					-\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					-\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					-\r\n				</td>\r\n			</tr>\r\n			<tr>\r\n				<td style="border:1px solid #ccc;">\r\n					<span>u</span><span>n</span><span>d</span><span>e</span><span>f</span><span>i</span><span>n</span><span>e</span><span>d</span><br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					"undefined"<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					0\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					false\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					[undefined]数组<br />\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					-\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					-\r\n				</td>\r\n				<td style="border:1px solid #ccc;">\r\n					-\r\n				</td>\r\n			</tr>\r\n		</tbody>\r\n	</table>\r\n</p>', 0, 1, NULL, 'post', 'publish', NULL, 0, '1', '1', '1', 0),
(103, '写给前端工程师看的运维和架构', '103', 1452592200, 1452592277, '<!--markdown-->前端童鞋接触后端机会可能大多都在API层面，甚至对session这些东西都有些不是很明白原理，当然大牛除外。那么像Linux、负载均衡、并发、热备、云计算，这些时髦的词语可能更多是听得多，如果公司有运维那么更难插手，那么我根据公司实际使用情况试着回答一些网友的问题。\r\n\r\n**1、公司实际项目中，服务器选择什么操作系统比较好？**\r\n    在服务器操作系统市场上有window server、linux、unix 三类操作系统。那我们从实际工作中来看，大多数专业公司(除了.net开发者)采用了linux，因为开源、相关软件丰富； 一些很牛的公司比如IBM使用的unix当然不用说了；还有一些公司或者个人使用了window server，因为操作非常简单，使用远程桌面即可管理。\r\n\r\n**2、负载均衡。**\r\n    一般公司都会做，是为了解决访问压力，当业务量大到单台服务器无法满足需要的情况下，使用负载均衡技术把流量导入到多个主机上，达到高并发访问的目的。负载均衡可以使用硬件（例如F5）或者软件（普通服务器+LVS软件）实现。如果访问量比较小很多公司直接使用了nginx转发到多台服务器上简单实现。\r\n\r\n**3、热备。**\r\n和上面负载均衡不同，是为了防止单台服务器宕机，然后准备了一套备用机器，这些机器会在宕机的情况下快速启用，并顶上来。实际工作中，大多数公司会使用阿里云这些云服务商提供，并不会自己来实现，已经是很成熟的技术了。\r\n\r\n**4、nginx**\r\n    这个应该大家都知道，为啥还要来说，就是很多LAMP 开发者对apache很熟悉，实际上公司Nginx 用的更多，因为不仅仅作为服务器来使用，更多作为反向代理来使用。 举个例子：Nginx 启动后监听80端口然后对外提供http服务，那么如果系统有nodejs服务为9000，就可以使用 nginx 把业务转发到9000端口，由nodejs提供服务。这样可以实现在系统中多个应用共存，也是公司普遍的做法。\r\n\r\n**5、主从数据库**\r\n    我们自己开发的时候，很多都是程序运行和数据库在一台机器上，那么当使用了多台应用服务器的时候，那就把数据库拿出来单独放到一台服务器上。因为这样才能让多台机器上应用程序使用同一个数据库。很多公司单独一台数据库服务器性能不够使用，配置主从数据库服务器来做读写分离，从主机写入数据保证数据一致，从丛机读取数据保证速度，这种优化方案在公司非常普遍，但是具体要看具体应用的读写比。', 0, 1, NULL, 'post', 'publish', NULL, 0, '1', '1', '1', 0);

-- --------------------------------------------------------

--
-- Table structure for table `typecho_fields`
--

CREATE TABLE IF NOT EXISTS `typecho_fields` (
  `cid` int(10) unsigned NOT NULL,
  `name` varchar(200) NOT NULL,
  `type` varchar(8) DEFAULT 'str',
  `str_value` text,
  `int_value` int(10) DEFAULT '0',
  `float_value` float DEFAULT '0',
  PRIMARY KEY (`cid`,`name`),
  KEY `int_value` (`int_value`),
  KEY `float_value` (`float_value`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `typecho_gathersites`
--

CREATE TABLE IF NOT EXISTS `typecho_gathersites` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) DEFAULT '',
  `url` varchar(255) DEFAULT '',
  `created` int(11) DEFAULT '0',
  `comment` varchar(255) DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=20 ;

--
-- Dumping data for table `typecho_gathersites`
--

INSERT INTO `typecho_gathersites` (`id`, `title`, `url`, `created`, `comment`) VALUES
(3, '百度浏览器', 'http://liulanqi.baidu.com/', 1450017945, '首页多屏动画，以及canvas动画非常炫酷'),
(4, 'H5技术实现教程：多屏CSS动画精进技巧', 'http://www.iguoguo.net/2015/52669.html', 1450160286, NULL),
(5, 'TAT.MinrenJX.Animate基于HTML5&CSS3的JavaScript并行动画库', 'http://www.alloyteam.com/2014/02/based-html5-css3-animation-technology-to-achieve-the-javascript-libraries-jx-animate/', 1450162366, 'http://www.alloyteam.com/2014/02/based-html5-css3-animation-technology-to-achieve-the-javascript-libraries-jx-animate/'),
(6, 'css 动画管理库', 'http://labs.bigroomstudios.com/libraries/animo-js', 1450175333, 'A powerful little tool for managing CSS animations'),
(7, 'Transit – 超平滑的 CSS 过渡和变换动画效果插件', 'http://ricostacruz.com/jquery.transit/#top', 1450235107, NULL),
(8, 'Verlet-js：超炫的开源 JavaScript 物理引擎', 'http://www.yyyweb.com/demo/verlet-js/examples/shapes.html', 1450235132, NULL),
(9, '动画生成器', 'http://isux.tencent.com/css3/tools.html', 1450322805, NULL),
(10, '在线浏览器特性监测工具', 'http://modernizr.github.io/Modernizr/test/index.html', 1450345005, NULL),
(11, 'color admin 后台管理系统框架', 'http://wrapbootstrap.com/preview/WB0N89JMK', 1450345040, NULL),
(12, 'CANVAS HTML5夜景放烟花绽放动画效果带贺词文', 'http://www.17sucai.com/pins/demoshow/4583', 1451273082, NULL),
(13, 'HTML5 CANVAS SKETCH.JS网页画图工具跟随鼠', 'http://www.17sucai.com/pins/demoshow/5567', 1451273092, NULL),
(14, '原生js html5 canvas 3D云动画效果', 'http://www.17sucai.com/pins/3529.html', 1451273112, NULL),
(15, 'hellomui', 'http://dcloud.io/hellomui/', 1451441395, 'MUI手机HTML5 应用框架'),
(16, 'H5特效集', 'http://frozenui.github.io/case.html', 1451527552, NULL),
(17, 'html5 网站作品集', 'http://vf.wbh5.com/', 1452239333, '成都一哥们做的不错'),
(18, '视察滚动特效', 'http://zhidao.baidu.com/s/10year/index.html#iknowStars', 1452495147, NULL),
(19, 'Particles.js', 'http://www.oschina.net/p/particles-js', 1454381389, 'Particles.js 一个轻量级的JavaScript库，用来在网页上创建颗粒效果。');

-- --------------------------------------------------------

--
-- Table structure for table `typecho_metas`
--

CREATE TABLE IF NOT EXISTS `typecho_metas` (
  `mid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `slug` varchar(200) DEFAULT NULL,
  `type` varchar(32) NOT NULL,
  `description` varchar(200) DEFAULT NULL,
  `count` int(10) unsigned DEFAULT '0',
  `order` int(10) unsigned DEFAULT '0',
  `parent` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`mid`),
  KEY `slug` (`slug`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=15 ;

--
-- Dumping data for table `typecho_metas`
--

INSERT INTO `typecho_metas` (`mid`, `name`, `slug`, `type`, `description`, `count`, `order`, `parent`) VALUES
(1, '计算机科学/算法', 'default', 'category', '只是一个默认分类', 15, 7, 0),
(2, 'C/C++', 'c', 'category', NULL, 1, 1, 0),
(3, 'PHP', 'PHP', 'category', NULL, 0, 2, 0),
(4, 'WEB前端开发', 'web', 'category', NULL, 10, 3, 0),
(5, '服务器技术/运维', 'server', 'category', NULL, 0, 8, 0),
(6, '闲书笔记', 'note', 'category', NULL, 1, 4, 0),
(7, '软件工程/设计模式', 'project', 'category', NULL, 0, 9, 0),
(8, '摄影', 'picture', 'category', NULL, 0, 5, 0),
(9, '设计', '设计', 'category', NULL, 0, 6, 0),
(10, 'javascript', 'javascript', 'tag', NULL, 1, 0, 0),
(11, '作用域', '作用域', 'tag', NULL, 1, 0, 0),
(12, 'nodejs', 'nodejs', 'tag', NULL, 1, 0, 0),
(13, 'typescript', 'typescript', 'tag', NULL, 1, 0, 0),
(14, '翻译', '翻译', 'tag', NULL, 1, 0, 0);

-- --------------------------------------------------------

--
-- Table structure for table `typecho_options`
--

CREATE TABLE IF NOT EXISTS `typecho_options` (
  `name` varchar(32) NOT NULL,
  `user` int(10) unsigned NOT NULL DEFAULT '0',
  `value` text,
  PRIMARY KEY (`name`,`user`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- Dumping data for table `typecho_options`
--

INSERT INTO `typecho_options` (`name`, `user`, `value`) VALUES
('theme', 0, 'Yilia'),
('theme:Yilia', 0, 'a:1:{s:12:"sidebarBlock";a:8:{i:0;s:15:"ShowRecentPosts";i:1;s:18:"ShowRecentComments";i:2;s:12:"ShowCategory";i:3;s:11:"ShowArchive";i:4;s:9:"ShowLinks";i:5;s:10:"ShowPLinks";i:6;s:9:"ShowOther";i:7;s:9:"ShowWeibo";}}'),
('timezone', 0, '28800'),
('lang', 0, NULL),
('charset', 0, 'UTF-8'),
('contentType', 0, 'text/html'),
('gzip', 0, '0'),
('generator', 0, 'Typecho 1.0/14.10.10'),
('title', 0, '@少个分号'),
('description', 0, '专注于RESTful API+富前端开发'),
('keywords', 0, '分号，少个分号，前端，思维导图'),
('rewrite', 0, '0'),
('frontPage', 0, 'recent'),
('frontArchive', 0, '0'),
('commentsRequireMail', 0, '1'),
('commentsWhitelist', 0, '0'),
('commentsRequireURL', 0, '0'),
('commentsRequireModeration', 0, '0'),
('plugins', 0, 'a:2:{s:9:"activated";a:1:{s:9:"BaeUpload";a:1:{s:7:"handles";a:5:{s:26:"Widget_Upload:uploadHandle";a:1:{i:0;a:2:{i:0;s:16:"BaeUpload_Plugin";i:1;s:12:"uploadHandle";}}s:26:"Widget_Upload:modifyHandle";a:1:{i:0;a:2:{i:0;s:16:"BaeUpload_Plugin";i:1;s:12:"modifyHandle";}}s:26:"Widget_Upload:deleteHandle";a:1:{i:0;a:2:{i:0;s:16:"BaeUpload_Plugin";i:1;s:12:"deleteHandle";}}s:30:"Widget_Upload:attachmentHandle";a:1:{i:0;a:2:{i:0;s:16:"BaeUpload_Plugin";i:1;s:16:"attachmentHandle";}}s:34:"Widget_Upload:attachmentDataHandle";a:1:{i:0;a:2:{i:0;s:16:"BaeUpload_Plugin";i:1;s:20:"attachmentDataHandle";}}}}}s:7:"handles";a:5:{s:26:"Widget_Upload:uploadHandle";a:1:{i:0;a:2:{i:0;s:16:"BaeUpload_Plugin";i:1;s:12:"uploadHandle";}}s:26:"Widget_Upload:modifyHandle";a:1:{i:0;a:2:{i:0;s:16:"BaeUpload_Plugin";i:1;s:12:"modifyHandle";}}s:26:"Widget_Upload:deleteHandle";a:1:{i:0;a:2:{i:0;s:16:"BaeUpload_Plugin";i:1;s:12:"deleteHandle";}}s:30:"Widget_Upload:attachmentHandle";a:1:{i:0;a:2:{i:0;s:16:"BaeUpload_Plugin";i:1;s:16:"attachmentHandle";}}s:34:"Widget_Upload:attachmentDataHandle";a:1:{i:0;a:2:{i:0;s:16:"BaeUpload_Plugin";i:1;s:20:"attachmentDataHandle";}}}}'),
('commentDateFormat', 0, 'F jS, Y \\a\\t h:i a'),
('siteUrl', 0, 'http://printf.cn'),
('defaultCategory', 0, '1'),
('allowRegister', 0, '0'),
('defaultAllowComment', 0, '1'),
('defaultAllowPing', 0, '1'),
('defaultAllowFeed', 0, '1'),
('pageSize', 0, '5'),
('postsListSize', 0, '10'),
('commentsListSize', 0, '10'),
('commentsHTMLTagAllowed', 0, NULL),
('postDateFormat', 0, 'Y-m-d'),
('feedFullText', 0, '0'),
('editorSize', 0, '350'),
('autoSave', 0, '0'),
('markdown', 0, '1'),
('commentsMaxNestingLevels', 0, '5'),
('commentsPostTimeout', 0, '2592000'),
('commentsUrlNofollow', 0, '1'),
('commentsShowUrl', 0, '1'),
('commentsMarkdown', 0, '0'),
('commentsPageBreak', 0, '0'),
('commentsThreaded', 0, '1'),
('commentsPageSize', 0, '20'),
('commentsPageDisplay', 0, 'last'),
('commentsOrder', 0, 'ASC'),
('commentsCheckReferer', 0, '1'),
('commentsAutoClose', 0, '0'),
('commentsPostIntervalEnable', 0, '1'),
('commentsPostInterval', 0, '60'),
('commentsShowCommentOnly', 0, '0'),
('commentsAvatar', 0, '1'),
('commentsAvatarRating', 0, 'G'),
('commentsAntiSpam', 0, '1'),
('routingTable', 0, 'a:26:{i:0;a:25:{s:5:"index";a:6:{s:3:"url";s:1:"/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";s:4:"regx";s:8:"|^[/]?$|";s:6:"format";s:1:"/";s:6:"params";a:0:{}}s:7:"archive";a:6:{s:3:"url";s:6:"/blog/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";s:4:"regx";s:13:"|^/blog[/]?$|";s:6:"format";s:6:"/blog/";s:6:"params";a:0:{}}s:2:"do";a:6:{s:3:"url";s:22:"/action/[action:alpha]";s:6:"widget";s:9:"Widget_Do";s:6:"action";s:6:"action";s:4:"regx";s:32:"|^/action/([_0-9a-zA-Z-]+)[/]?$|";s:6:"format";s:10:"/action/%s";s:6:"params";a:1:{i:0;s:6:"action";}}s:4:"post";a:6:{s:3:"url";s:24:"/archives/[cid:digital]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";s:4:"regx";s:26:"|^/archives/([0-9]+)[/]?$|";s:6:"format";s:13:"/archives/%s/";s:6:"params";a:1:{i:0;s:3:"cid";}}s:10:"attachment";a:6:{s:3:"url";s:26:"/attachment/[cid:digital]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";s:4:"regx";s:28:"|^/attachment/([0-9]+)[/]?$|";s:6:"format";s:15:"/attachment/%s/";s:6:"params";a:1:{i:0;s:3:"cid";}}s:8:"category";a:6:{s:3:"url";s:17:"/category/[slug]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";s:4:"regx";s:25:"|^/category/([^/]+)[/]?$|";s:6:"format";s:13:"/category/%s/";s:6:"params";a:1:{i:0;s:4:"slug";}}s:3:"tag";a:6:{s:3:"url";s:12:"/tag/[slug]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";s:4:"regx";s:20:"|^/tag/([^/]+)[/]?$|";s:6:"format";s:8:"/tag/%s/";s:6:"params";a:1:{i:0;s:4:"slug";}}s:6:"author";a:6:{s:3:"url";s:22:"/author/[uid:digital]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";s:4:"regx";s:24:"|^/author/([0-9]+)[/]?$|";s:6:"format";s:11:"/author/%s/";s:6:"params";a:1:{i:0;s:3:"uid";}}s:6:"search";a:6:{s:3:"url";s:19:"/search/[keywords]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";s:4:"regx";s:23:"|^/search/([^/]+)[/]?$|";s:6:"format";s:11:"/search/%s/";s:6:"params";a:1:{i:0;s:8:"keywords";}}s:10:"index_page";a:6:{s:3:"url";s:21:"/page/[page:digital]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";s:4:"regx";s:22:"|^/page/([0-9]+)[/]?$|";s:6:"format";s:9:"/page/%s/";s:6:"params";a:1:{i:0;s:4:"page";}}s:12:"archive_page";a:6:{s:3:"url";s:26:"/blog/page/[page:digital]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";s:4:"regx";s:27:"|^/blog/page/([0-9]+)[/]?$|";s:6:"format";s:14:"/blog/page/%s/";s:6:"params";a:1:{i:0;s:4:"page";}}s:13:"category_page";a:6:{s:3:"url";s:32:"/category/[slug]/[page:digital]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";s:4:"regx";s:34:"|^/category/([^/]+)/([0-9]+)[/]?$|";s:6:"format";s:16:"/category/%s/%s/";s:6:"params";a:2:{i:0;s:4:"slug";i:1;s:4:"page";}}s:8:"tag_page";a:6:{s:3:"url";s:27:"/tag/[slug]/[page:digital]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";s:4:"regx";s:29:"|^/tag/([^/]+)/([0-9]+)[/]?$|";s:6:"format";s:11:"/tag/%s/%s/";s:6:"params";a:2:{i:0;s:4:"slug";i:1;s:4:"page";}}s:11:"author_page";a:6:{s:3:"url";s:37:"/author/[uid:digital]/[page:digital]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";s:4:"regx";s:33:"|^/author/([0-9]+)/([0-9]+)[/]?$|";s:6:"format";s:14:"/author/%s/%s/";s:6:"params";a:2:{i:0;s:3:"uid";i:1;s:4:"page";}}s:11:"search_page";a:6:{s:3:"url";s:34:"/search/[keywords]/[page:digital]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";s:4:"regx";s:32:"|^/search/([^/]+)/([0-9]+)[/]?$|";s:6:"format";s:14:"/search/%s/%s/";s:6:"params";a:2:{i:0;s:8:"keywords";i:1;s:4:"page";}}s:12:"archive_year";a:6:{s:3:"url";s:18:"/[year:digital:4]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";s:4:"regx";s:19:"|^/([0-9]{4})[/]?$|";s:6:"format";s:4:"/%s/";s:6:"params";a:1:{i:0;s:4:"year";}}s:13:"archive_month";a:6:{s:3:"url";s:36:"/[year:digital:4]/[month:digital:2]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";s:4:"regx";s:30:"|^/([0-9]{4})/([0-9]{2})[/]?$|";s:6:"format";s:7:"/%s/%s/";s:6:"params";a:2:{i:0;s:4:"year";i:1;s:5:"month";}}s:11:"archive_day";a:6:{s:3:"url";s:52:"/[year:digital:4]/[month:digital:2]/[day:digital:2]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";s:4:"regx";s:41:"|^/([0-9]{4})/([0-9]{2})/([0-9]{2})[/]?$|";s:6:"format";s:10:"/%s/%s/%s/";s:6:"params";a:3:{i:0;s:4:"year";i:1;s:5:"month";i:2;s:3:"day";}}s:17:"archive_year_page";a:6:{s:3:"url";s:38:"/[year:digital:4]/page/[page:digital]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";s:4:"regx";s:33:"|^/([0-9]{4})/page/([0-9]+)[/]?$|";s:6:"format";s:12:"/%s/page/%s/";s:6:"params";a:2:{i:0;s:4:"year";i:1;s:4:"page";}}s:18:"archive_month_page";a:6:{s:3:"url";s:56:"/[year:digital:4]/[month:digital:2]/page/[page:digital]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";s:4:"regx";s:44:"|^/([0-9]{4})/([0-9]{2})/page/([0-9]+)[/]?$|";s:6:"format";s:15:"/%s/%s/page/%s/";s:6:"params";a:3:{i:0;s:4:"year";i:1;s:5:"month";i:2;s:4:"page";}}s:16:"archive_day_page";a:6:{s:3:"url";s:72:"/[year:digital:4]/[month:digital:2]/[day:digital:2]/page/[page:digital]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";s:4:"regx";s:55:"|^/([0-9]{4})/([0-9]{2})/([0-9]{2})/page/([0-9]+)[/]?$|";s:6:"format";s:18:"/%s/%s/%s/page/%s/";s:6:"params";a:4:{i:0;s:4:"year";i:1;s:5:"month";i:2;s:3:"day";i:3;s:4:"page";}}s:12:"comment_page";a:6:{s:3:"url";s:53:"[permalink:string]/comment-page-[commentPage:digital]";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";s:4:"regx";s:36:"|^(.+)/comment\\-page\\-([0-9]+)[/]?$|";s:6:"format";s:18:"%s/comment-page-%s";s:6:"params";a:2:{i:0;s:9:"permalink";i:1;s:11:"commentPage";}}s:4:"feed";a:6:{s:3:"url";s:20:"/feed[feed:string:0]";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:4:"feed";s:4:"regx";s:17:"|^/feed(.*)[/]?$|";s:6:"format";s:7:"/feed%s";s:6:"params";a:1:{i:0;s:4:"feed";}}s:8:"feedback";a:6:{s:3:"url";s:31:"[permalink:string]/[type:alpha]";s:6:"widget";s:15:"Widget_Feedback";s:6:"action";s:6:"action";s:4:"regx";s:29:"|^(.+)/([_0-9a-zA-Z-]+)[/]?$|";s:6:"format";s:5:"%s/%s";s:6:"params";a:2:{i:0;s:9:"permalink";i:1;s:4:"type";}}s:4:"page";a:6:{s:3:"url";s:12:"/[slug].html";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";s:4:"regx";s:22:"|^/([^/]+)\\.html[/]?$|";s:6:"format";s:8:"/%s.html";s:6:"params";a:1:{i:0;s:4:"slug";}}}s:5:"index";a:3:{s:3:"url";s:1:"/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";}s:7:"archive";a:3:{s:3:"url";s:6:"/blog/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";}s:2:"do";a:3:{s:3:"url";s:22:"/action/[action:alpha]";s:6:"widget";s:9:"Widget_Do";s:6:"action";s:6:"action";}s:4:"post";a:3:{s:3:"url";s:24:"/archives/[cid:digital]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";}s:10:"attachment";a:3:{s:3:"url";s:26:"/attachment/[cid:digital]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";}s:8:"category";a:3:{s:3:"url";s:17:"/category/[slug]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";}s:3:"tag";a:3:{s:3:"url";s:12:"/tag/[slug]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";}s:6:"author";a:3:{s:3:"url";s:22:"/author/[uid:digital]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";}s:6:"search";a:3:{s:3:"url";s:19:"/search/[keywords]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";}s:10:"index_page";a:3:{s:3:"url";s:21:"/page/[page:digital]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";}s:12:"archive_page";a:3:{s:3:"url";s:26:"/blog/page/[page:digital]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";}s:13:"category_page";a:3:{s:3:"url";s:32:"/category/[slug]/[page:digital]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";}s:8:"tag_page";a:3:{s:3:"url";s:27:"/tag/[slug]/[page:digital]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";}s:11:"author_page";a:3:{s:3:"url";s:37:"/author/[uid:digital]/[page:digital]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";}s:11:"search_page";a:3:{s:3:"url";s:34:"/search/[keywords]/[page:digital]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";}s:12:"archive_year";a:3:{s:3:"url";s:18:"/[year:digital:4]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";}s:13:"archive_month";a:3:{s:3:"url";s:36:"/[year:digital:4]/[month:digital:2]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";}s:11:"archive_day";a:3:{s:3:"url";s:52:"/[year:digital:4]/[month:digital:2]/[day:digital:2]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";}s:17:"archive_year_page";a:3:{s:3:"url";s:38:"/[year:digital:4]/page/[page:digital]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";}s:18:"archive_month_page";a:3:{s:3:"url";s:56:"/[year:digital:4]/[month:digital:2]/page/[page:digital]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";}s:16:"archive_day_page";a:3:{s:3:"url";s:72:"/[year:digital:4]/[month:digital:2]/[day:digital:2]/page/[page:digital]/";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";}s:12:"comment_page";a:3:{s:3:"url";s:53:"[permalink:string]/comment-page-[commentPage:digital]";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";}s:4:"feed";a:3:{s:3:"url";s:20:"/feed[feed:string:0]";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:4:"feed";}s:8:"feedback";a:3:{s:3:"url";s:31:"[permalink:string]/[type:alpha]";s:6:"widget";s:15:"Widget_Feedback";s:6:"action";s:6:"action";}s:4:"page";a:3:{s:3:"url";s:12:"/[slug].html";s:6:"widget";s:14:"Widget_Archive";s:6:"action";s:6:"render";}}'),
('actionTable', 0, 'a:0:{}'),
('panelTable', 0, 'a:0:{}'),
('attachmentTypes', 0, '@image@,@media@,@doc@,mp4'),
('secret', 0, 'q5GQjY4iSP0&XQ5msT%v)7Rxlid5zxWQ'),
('plugin:BaeUpload', 0, 'a:3:{s:2:"ak";s:24:"L4XcjrdhqylMKsHEy10TfSGa";s:2:"sk";s:32:"Wt1qqSVNYkU6YFWrKx8PTTpxKZeKunn7";s:6:"bucket";s:6:"helpjs";}');

-- --------------------------------------------------------

--
-- Table structure for table `typecho_players`
--

CREATE TABLE IF NOT EXISTS `typecho_players` (
  `session_id` varchar(45) NOT NULL,
  `user_name` varchar(45) DEFAULT NULL,
  `word` varchar(45) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `typecho_relationships`
--

CREATE TABLE IF NOT EXISTS `typecho_relationships` (
  `cid` int(10) unsigned NOT NULL,
  `mid` int(10) unsigned NOT NULL,
  PRIMARY KEY (`cid`,`mid`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- Dumping data for table `typecho_relationships`
--

INSERT INTO `typecho_relationships` (`cid`, `mid`) VALUES
(1, 6),
(6, 1),
(7, 4),
(13, 1),
(15, 4),
(16, 4),
(20, 4),
(22, 4),
(23, 1),
(24, 1),
(24, 10),
(24, 11),
(30, 2),
(32, 4),
(32, 12),
(34, 1),
(38, 4),
(40, 1),
(40, 4),
(40, 13),
(40, 14),
(79, 4),
(87, 1),
(89, 4),
(91, 1),
(92, 1),
(93, 1),
(94, 1),
(95, 1),
(96, 1),
(99, 1),
(103, 1),
(104, 1);

-- --------------------------------------------------------

--
-- Table structure for table `typecho_users`
--

CREATE TABLE IF NOT EXISTS `typecho_users` (
  `uid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(32) DEFAULT NULL,
  `password` varchar(64) DEFAULT NULL,
  `mail` varchar(200) DEFAULT NULL,
  `url` varchar(200) DEFAULT NULL,
  `screenName` varchar(32) DEFAULT NULL,
  `created` int(10) unsigned DEFAULT '0',
  `activated` int(10) unsigned DEFAULT '0',
  `logged` int(10) unsigned DEFAULT '0',
  `group` varchar(16) DEFAULT 'visitor',
  `authCode` varchar(64) DEFAULT NULL,
  PRIMARY KEY (`uid`),
  UNIQUE KEY `name` (`name`),
  UNIQUE KEY `mail` (`mail`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=3 ;

--
-- Dumping data for table `typecho_users`
--

INSERT INTO `typecho_users` (`uid`, `name`, `password`, `mail`, `url`, `screenName`, `created`, `activated`, `logged`, `group`, `authCode`) VALUES
(1, 'linksgo2011', '$P$B7rwmMHrcVwDkNMiCkAC2F.B8INzas1', '120377843@qq.com', 'http://www.typecho.org', 'linksgo2011', 1419994152, 1510303659, 1458038605, 'administrator', '35a6603467397905bd6f80dfb6aab203'),
(2, 'maomao', '$P$BgMk.xwuKzYGoZDVBBXmuTdc7X.TXj0', '565424391@qq.com', NULL, '猫猫', 1433426676, 0, 0, 'editor', NULL);

-- --------------------------------------------------------

--
-- Table structure for table `user`
--

CREATE TABLE IF NOT EXISTS `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `tel` varchar(255) NOT NULL DEFAULT '',
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=13 ;

--
-- Dumping data for table `user`
--

INSERT INTO `user` (`id`, `tel`, `name`) VALUES
(1, '13668193903', '1124123'),
(2, '13668193903', '1124123'),
(3, '13668193903', '1124123'),
(4, '13668193903', '1124123'),
(5, '13668193903', '1124123'),
(6, '13668193903', '13123'),
(7, '13668193903', '13123'),
(8, '13668193903', '132123'),
(9, '13668193903', 'box1'),
(10, '13668193903', '1124123'),
(11, '13668193903', '1124123'),
(12, '13668193903', 'xi');

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE IF NOT EXISTS `users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `email` varchar(255) NOT NULL DEFAULT '',
  `name` varchar(255) NOT NULL DEFAULT '',
  `password` varchar(255) NOT NULL DEFAULT '',
  `role` set('user','admin') NOT NULL DEFAULT 'admin',
  `created` int(11) NOT NULL DEFAULT '0',
  `last_login` int(11) NOT NULL DEFAULT '0',
  `qq` int(11) DEFAULT '0',
  `tel` varchar(255) NOT NULL DEFAULT '',
  `active` tinyint(4) NOT NULL DEFAULT '0' COMMENT '用户状态 0 为正常',
  `lock_time` int(11) DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `unique` (`email`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=13 ;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id`, `email`, `name`, `password`, `role`, `created`, `last_login`, `qq`, `tel`, `active`, `lock_time`) VALUES
(1, 'admin@qq.com', 'linksgo2011', '123456', 'admin', 1384681937, 1384681937, 120377843, '13668193903', 0, 0),
(2, 'test@qq.com', 'test@qq.com', '123456', 'user', 1386428837, 1386428837, 1203, '', 0, 1386900614),
(3, 'test2@qq.com', 'test2@qq.com', 'test2@qq.com', 'user', 1386429404, 1386429404, NULL, '', 0, 0),
(4, 'test3@qq.com', 'test3@qq.com', 'test3@qq.com', 'user', 1386429490, 1386429490, NULL, '', 0, 0),
(5, 'test5@qq.com', 'test5@qq.com', 'test5@qq.com', 'user', 1386505695, 1386505695, NULL, 'test5@qq.com', -1, 0),
(6, 'test6@qq.com', 'test6@qq.com', '123456', 'user', 1386605437, 1386605437, 120377843, '13668193903', 0, 0),
(7, 'test2011@qq.com', 'test2011@qq.com', '1234567', 'user', 1386863005, 1386863005, 1203777078, '', 0, 1386863080),
(8, 'test2012@qq.com', 'test2012@qq.com', '123456', 'user', 1386863111, 1386863111, NULL, '', 0, 0),
(9, 'test1233@qq.com', 'test1233', '123456789', 'user', 1386901948, 1386901948, NULL, '', 0, 0),
(10, 'test1111@qq.com', 'test1111', '123456789', 'user', 1387081322, 1387081322, NULL, '', 0, 0),
(11, '1203778432@qq.com', '123456', '123456', 'user', 1402668891, 1402668891, 12314123, '123', 0, 0),
(12, '335454250@qq.com', '', 'oopsxiaolan', 'user', 1402722942, 1402722942, 0, '', 0, 0);

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
