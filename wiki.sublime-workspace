{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"php",
				"phpinfo"
			],
			[
				"prin",
				"print_r"
			],
			[
				"border-c",
				"border-color\tproperty"
			],
			[
				"url",
				"urldecode"
			],
			[
				"base",
				"base64_decode"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "---\ntitle: Ubuntu上的MySQL安装\ncategories: mysql\ntoc: true\n---\n\n\n## 首先检查系统中是否已经安装了MySQL\n\n在终端里面输入 sudo netstat -tap | grep mysql\n\n若没有反映，没有显示已安装结果，则没有安装。若如下显示，则表示已经安装\n\n\n## 如果没有安装，则安装MySQL.\n\n在终端输入 sudo apt-get install mysql-server mysql-client\n\n\n\n在此安装过程中会让你输入root用户(管理MySQL数据库用户，非Linux系统用户)密码，按照要求输入即可。如下所示：\n\n\n\n## 测试安装是否成功：\n\n在终端输入 sudo netstat -tap | grep mysql\n\n\n\n## 也可通过登录MySQL测试\n\n在终端输入 mysql -uroot -p 接下来会提示你输入密码，输入正确密码，即可进入。如下所示：\n\n\n## MySQL的一些简单管理：\n\n启动MySQL服务： ssudo /etc/init.d/mysql start\n\n停止MySQL服务： sudo /etc/init.d/mysql stop\n\n修改 MySQL 的管理员密码： sudo mysqladmin -u root password newpassword\n\n设置远程访问(正常情况下，mysql占用的3306端口只是在IP 127.0.0.1上监听，拒绝了其他IP的访问（通过netstat可以查看到）。取消本地监\n\n听需要修改 my.cnf 文件：)：\n\nsudo vi /etc/mysql/mysql.conf.d/mysqld.cnf\n\nbind-address = 127.0.0.1 //找到此内容并且注释\n\n## MySQL安装后的目录结构分析(此结构只针对于使用apt-get install 在线安装情况)：\n\n数据库存放目录： /var/lib/mysql/\n\n相关配置文件存放目录： /usr/share/mysql\n\n相关命令存放目录： /usr/bin(mysqladmin mysqldump等命令)\n\n启动脚步存放目录： /etc/rc.d/init.d/\n\n## MySQL图形化管理软件\n\n一般使用的有两个比较好，一个开源，一个商业收费：\n\n开源：MySQL Workbench （具体使用介绍随着我的使用，我会慢慢总结）\n\n商业：Navicat （收费的，有30天体验，之后我相信大家会有办法的）\n\n\n## 开启bin log 日志",
			"file": "hexo/source/_posts/mysql/Mysql configuration.md",
			"file_size": 1934,
			"file_write_time": 131897418114944319,
			"settings":
			{
				"buffer_size": 1098,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "---\ntitle: Java 并发和多线程\ncategories: java\n---\n\n## Java 多线程的几种实现方式\n\n### 通过实现 Runnable 接口；\n\n```java\n\nclass RunnableDemo implements Runnable {\n   private Thread t;\n   private String threadName;\n   \n   RunnableDemo( String name) {\n      threadName = name;\n      System.out.println(\"Creating \" +  threadName );\n   }\n   \n   public void run() {\n      System.out.println(\"Running \" +  threadName );\n      try {\n         for(int i = 4; i > 0; i--) {\n            System.out.println(\"Thread: \" + threadName + \", \" + i);\n            // 让线程睡眠一会\n            Thread.sleep(50);\n         }\n      }catch (InterruptedException e) {\n         System.out.println(\"Thread \" +  threadName + \" interrupted.\");\n      }\n      System.out.println(\"Thread \" +  threadName + \" exiting.\");\n   }\n   \n   public void start () {\n      System.out.println(\"Starting \" +  threadName );\n      if (t == null) {\n         t = new Thread (this, threadName);\n         t.start ();\n      }\n   }\n}\n \npublic class TestThread {\n \n   public static void main(String args[]) {\n      RunnableDemo R1 = new RunnableDemo( \"Thread-1\");\n      R1.start();\n      \n      RunnableDemo R2 = new RunnableDemo( \"Thread-2\");\n      R2.start();\n   }   \n}\n\n```\n\n### 通过继承Thread来创建线程\n\n```java\n\nclass ThreadDemo extends Thread {\n   private Thread t;\n   private String threadName;\n   \n   ThreadDemo( String name) {\n      threadName = name;\n      System.out.println(\"Creating \" +  threadName );\n   }\n   \n   public void run() {\n      System.out.println(\"Running \" +  threadName );\n      try {\n         for(int i = 4; i > 0; i--) {\n            System.out.println(\"Thread: \" + threadName + \", \" + i);\n            // 让线程睡眠一会\n            Thread.sleep(50);\n         }\n      }catch (InterruptedException e) {\n         System.out.println(\"Thread \" +  threadName + \" interrupted.\");\n      }\n      System.out.println(\"Thread \" +  threadName + \" exiting.\");\n   }\n   \n   public void start () {\n      System.out.println(\"Starting \" +  threadName );\n      if (t == null) {\n         t = new Thread (this, threadName);\n         t.start ();\n      }\n   }\n}\n \npublic class TestThread {\n \n   public static void main(String args[]) {\n      ThreadDemo T1 = new ThreadDemo( \"Thread-1\");\n      T1.start();\n      \n      ThreadDemo T2 = new ThreadDemo( \"Thread-2\");\n      T2.start();\n   }   \n}\n```\n\n###  通过 Callable 和 Future 创建线程\n\n```java\n\npublic class CallableThreadTest implements Callable<Integer> {\n    public static void main(String[] args)  \n    {  \n        CallableThreadTest ctt = new CallableThreadTest();  \n        FutureTask<Integer> ft = new FutureTask<>(ctt);  \n        for(int i = 0;i < 100;i++)  \n        {  \n            System.out.println(Thread.currentThread().getName()+\" 的循环变量i的值\"+i);  \n            if(i==20)  \n            {  \n                new Thread(ft,\"有返回值的线程\").start();  \n            }  \n        }  \n        try  \n        {  \n            System.out.println(\"子线程的返回值：\"+ft.get());  \n        } catch (InterruptedException e)  \n        {  \n            e.printStackTrace();  \n        } catch (ExecutionException e)  \n        {  \n            e.printStackTrace();  \n        }  \n  \n    }\n    @Override  \n    public Integer call() throws Exception  \n    {  \n        int i = 0;  \n        for(;i<100;i++)  \n        {  \n            System.out.println(Thread.currentThread().getName()+\" \"+i);  \n        }  \n        return i;  \n    }  \n}\n```\n\n###  创建线程的三种方式的对比\n\n1. 采用实现 Runnable、Callable 接口的方式创建多线程时，线程类只是实现了 Runnable 接口或 Callable 接口，还可以继承其他类。\n2. 使用继承 Thread 类的方式创建多线程时，编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，直接使用 this 即可获得当前线程。\n3. 推荐使用 Callbale 方式，因为可以得到线程中的返回值和异常\n\n## 线程安全\n\n多线程代码中，变量会存在共享，但是如果操作不是原子性的，会造成一致性的问题。 在保证线程安全中Java提供了一些措施。\n\n### 同步操作和只读操作\n\n1.方法的调用是在栈中完成的，因此方法的调用不会造成线程安全的问题。这也是为什么Spring 中使用Bean管理对象，每一次请求的操作可以视为同步行为，可以避免多线程问题。\n\n2.Java中一些对象是线程安全的，是通过使用了只读操作完成的，例如每一个String都是新的对象，在解决线程安全问题的同时需要注意性能问题。\n\n### volatile\n\nJava语言提供了一种稍弱的同步机制，即volatile变量，用来确保将变量的更新操作通知到其他线程。当把变量声明为volatile类型后，编译器与运行时都会注意到这个变量是共享的，因此不会将该变量上的操作与其他内存操作一起重排序。volatile变量不会被缓存在寄存器或者对其他处理器不可见的地方，因此在读取volatile类型的变量时总会返回最新写入的值。\n\nvolatile 并不能解决线程安全问题，但是需要注意，赋值操作不是原子性的，因此需要使用volatile来保证变量的可见性。\n\n\n### synchronized\n\nsynchronized 有两种使用方法同步代码块和同步方法，同步代码块可以传入一个需要锁定的对象，通常是this，而同步方法可以用来修饰方法\n\n```java \n\n\nsynchronized void f() { /* body */ }\n\nvoid f() { synchronized(this) { /* body */ } }\n\n```\n\n需要注意的是如果是类当中的静态变量 synchronized 并不会锁住\n\n需要使用类名来锁\n\n```java \n\nsynchronized(C.class) { /* body */ }\n\n```\n\n###  Final \n\n当构造函数结束时，final类型的值是被保证其他线程访问该对象时，它们的值是可见的。 Final 修饰的变量会让其他线程保持可见。\n\n### \n\n\n\n\n\n\n\n\n\n\n\n\n",
			"file": "hexo/source/_posts/java/java-cocurrent.md",
			"file_size": 5795,
			"file_write_time": 131927913541151531,
			"settings":
			{
				"buffer_size": 4485,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "$sqlus = \"select * from  feedbackinfo where title='\" . $us_name . \"'\";\n$rsus = mysql_query($sqlus);\n$countus = mysql_fetch_assoc($rsus);\n$usercxpass = $countus[\"cx_pass\"] . ',' . $pa_cjh;//车架A\n$arr = array($countus[\"cx_pass\"]);//编码数组\n$arrsl = explode(\",\",$countus[\"cx_shul\"]);//品牌查询次数数组\n/////////////////pdcxsz////////////////////////\n$arrnull = array();//空数组\nforeach ($arrsl as $key => $values) {//查询并写入新\n    if (strstr($values, $pa_pingp) !== false) {\n        array_push($arrnull, $values);\n    }\n}\nif ($arrnull[0] == \"\" and $countus[\"cx_date\"] == $l_date1) {//日期当前不存在就写入\n    $arrsl[] = $pa_pingp . '1';//写入新查询\n//  print_r($arrsl);\n} elseif ($countus[\"cx_date\"] <> $l_date1) {//日期之前不存在就写入\n    $arrsl = array($pa_pingp . '1');//写入新查询\n} elseif ($arrnull[0] <> \"\" and $countus[\"cx_date\"] == $l_date1) {//存在就修改\n    $czxincs = substr($arrnull[0], -1);//实已查\n    $dqppkey = array_search($arrnull[0], $arrsl);//已查当前分健值\n//  echo $czxincs.'<br />';\n    $arrsl[$dqppkey] = $pa_pingp . ($czxincs + 1);//更新数组\n}\n\nFileTextGraphParser\n\n\n\nwget https://note.youdao.com/yws/public/resource/78a2e18f5284c3a28129a98e5c35cd79/xmlnote/EDD1460EDBA84AEDB1DC72C656632659/8745\nwget https://note.youdao.com/yws/public/resource/78a2e18f5284c3a28129a98e5c35cd79/xmlnote/64B3BE30466B4BCF931D9BC89728D9F0/8650\nwget https://note.youdao.com/yws/public/resource/78a2e18f5284c3a28129a98e5c35cd79/xmlnote/900EC8C4559F4A7F9505B2E74A27455A/8562\nwget https://note.youdao.com/yws/public/resource/78a2e18f5284c3a28129a98e5c35cd79/xmlnote/9AF0AEC1430D4ED485E8B8470BB6AA42/8554\nwget https://note.youdao.com/yws/public/resource/78a2e18f5284c3a28129a98e5c35cd79/xmlnote/7CCFD987B5C44A9BBD3E689AFB843BED/8560\nwget https://note.youdao.com/yws/public/resource/78a2e18f5284c3a28129a98e5c35cd79/xmlnote/836327322ADA4C90B8C76DC9BA9F46DA/8660\nwget https://note.youdao.com/yws/public/resource/78a2e18f5284c3a28129a98e5c35cd79/xmlnote/3C3D4EE840A74036B3E880A82643DD77/8578\nwget https://note.youdao.com/yws/public/resource/78a2e18f5284c3a28129a98e5c35cd79/xmlnote/C9F82BDB4A7D48768FEE07EADBAA9EBF/8674\nwget https://note.youdao.com/yws/public/resource/78a2e18f5284c3a28129a98e5c35cd79/xmlnote/9397CAF04F61451A87698920414E1E6C/8677\nwget https://note.youdao.com/yws/public/resource/78a2e18f5284c3a28129a98e5c35cd79/xmlnote/C9AACC913BED4DECB7F4897E9FCD43A7/8679\nwget https://note.youdao.com/yws/public/resource/78a2e18f5284c3a28129a98e5c35cd79/xmlnote/7910112E2D8D45DD81C8201B5435BDF1/8684\nwget https://note.youdao.com/yws/public/resource/78a2e18f5284c3a28129a98e5c35cd79/xmlnote/D89E3CEF91224C6BB3DF794EC2368331/8687",
			"settings":
			{
				"buffer_size": 2559,
				"line_ending": "Unix",
				"name": "$sqlus = \"select * from  feedbackinfo where title="
			}
		},
		{
			"contents": "# GraphQL Fundamentals\n# GraphQL 基础\n\nBefore we start to build full-fledged GraphQL applications, on the client- and server-side, let's explore GraphQL with the tools we have installed in the previous sections. You can either use GraphiQL or the GitHub's GraphQL Explorer. In the following, you will learn about GraphQL's fundamentals by executing your first GraphQL queries, mutations and even by exploring features such as pagination, in the context of GitHub's GraphQL API.\n\n在我们开始构建一个包含客户端和服务器端完整的 GraphQL 应用之前，让我们通过前面章节安装的一些工具来体验一下 GraphQL 的工作方式。你可以选用 GraphiQL 或者 GitHub 提供的 Explorer。 接下来我们会学习 GraphQL 基础操作，执行你的第一个 GraphQL query、mutations，或者探索 GitHub 的 GraphQL API 中的一些特性，例如分页等。\n\n## GraphQL Operation: Query\n## GraphQL 基本操作: Query \n\nIn this section, you will interact with the GitHub API using queries and mutations without React, so you can use your GraphiQL application or GitHub's GraphQL Explorer to make GraphQL query requests to GitHub's API. Both tools should be authorized to make requests using a personal access token. On the left-hand side of your GraphiQL application, you can fill in GraphQL queries and mutations. Add the following query to request data about yourself.\n\n在本节中，你可以使用 queries 和 mutations 同 GitHub API 交互，可以通过 GraphiQL 应用或者 GitHub 的 GraphQL Explorer 发送查询请求到 GitHub API。 这两种工具都需要使用个人申请的 access token 授权。在 GraphiQL application 的左侧，可以输入 GraphQL queries 和 mutations。尝试输入下面的代码获取你的个人信息数据。\n\n{title=\"GitHub GraphQL Explorer\",lang=\"json\"}\n~~~~~~~~\n{\n  viewer {\n    name\n    url\n  }\n}\n~~~~~~~~\n\nThe `viewer` object can be used to request data about the currently authorized user. Since you are authorized by your personal access token, it should show data about your account. The `viewer` is an **object** in GraphQL terms. Objects hold data about an entity. This data is accessed using a so-called **field** in GraphQL. Fields are used to ask for specific properties in objects. For instance, the `viewer` object exposes a wide range of fields. Two fields for the object--`name` and `url`--were used in the query. In its most basic form, a query is just objects and fields, and objects can also be called fields.\n\n`viewer` 对象可以被用来获取当前授权的用户信息。通过你的个人 access token 获得授权后，应该能看到相关的用户信息。`viewer` 是一个 GraphQL 中**对象**的概念。 对象承载某个实体的数据。 这些数据可以通过 GraphQL 中的**字段**访问。字段被用于获取指定对象中的属性。举个例子来说，`viewer` 对象暴露了一组字段，在这个例子中，只有`name` 和 `url`在 query 中用到了。在大多数基本情况下，一个 query 只包含对象和字段，当然对象也是一种字段。\n\n\nOnce you run the query in GraphiQL, you should see output similar to the one below, where your name and URL are in the place of mine:\n\n当你在 GraphiQL 中执行完上面的 query，你可以看到类似如下的返回内容，上面的 name 和 URL 被替换成真实的内容。\n\n{title=\"GitHub GraphQL Explorer\",lang=\"json\"}\n~~~~~~~~\n{\n  \"data\": {\n    \"viewer\": {\n      \"name\": \"Robin Wieruch\",\n      \"url\": \"https://github.com/rwieruch\"\n    }\n  }\n}\n~~~~~~~~\n\nCongratulations, you have performed your first query to access fields from your own user data. Now, let's see how to request data from a source other than yourself, like a public GitHub organization. To specify a GitHub organization, you can pass an **argument** to fields:\n\n恭喜你，你成功地执行了第一个 query 并且获取到了你自己的用户信息中的相关字段。现在，让我们看看怎么去获取其他的资源，例如 GitHub 中开放出来的 organization 信息。为了获取特定的 GitHub organization 信息，你可以给需要的字段传入一个**参数**：\n\n{title=\"GitHub GraphQL Explorer\",lang=\"json\"}\n~~~~~~~~\n{\n  organization(login: \"the-road-to-learn-react\") {\n    name\n    url\n  }\n}\n~~~~~~~~\n\nWhen using GitHub's API, an organization is identified with a `login`. If you have used GitHub before, you might know this is a part of the organization URL:\n\n使用 GitHub 的API 时，organization 需要指定`login` 参数。如果你之前使用过 GitHub，应该知道这个参数是 organization URL 地址中的一部分。\n\n{title=\"Code Playground\",lang=\"json\"}\n~~~~~~~~\nhttps://github.com/the-road-to-learn-react\n~~~~~~~~\n\nBy providing a `login` to identify the organization, you can request data about it. In this example, you have specified two fields to access data about the organization's `name` and `url`. The request should return something similar to the following output:\n\n通过提供一个 `login`  参数指定具体的 organization，你可以获取到它相关的数据。在这个例子中，通过指定了两个字段去获取 organization 中的 `name` 和 `url`。这次请求应该返回类似如下内容：\n\n{title=\"GitHub GraphQL Explorer\",lang=\"json\"}\n~~~~~~~~\n{\n  \"data\": {\n    \"organization\": {\n      \"name\": \"The Road to learn React\",\n      \"url\": \"https://github.com/the-road-to-learn-react\"\n    }\n  }\n}\n~~~~~~~~\n\nIn the previous query you passed an argument to a field. As you can imagine, you can add arguments to various fields using GraphQL. It grants a great deal of flexibility for structuring queries, because you can make specifications to requests on a field level. Also, arguments can be of different types. With the organization above, you provided an argument with the type `String`, though you can also pass types like enumerations with a fixed set of options, integers, or booleans.\n\n在上面的 query 中，你传入了一个参数给某个字段。同理，你也可以使用 GraphQL 添加参数到不同的字段。它可以为结构化查询提供了很大的灵活性，因为可以在字段级别为请求做出约束。另外，参数可以是不同类型的。对于上面 organization 的例子，你可以提供了一个类型为 `String` 的参数，但你也可以使用一组固定的选项作为枚举，整数或布尔值。\n\n\nIf you ever wanted to request data about two identical objects, you would have to use **aliases** in GraphQL. The following query wouldn't be possible, because GraphQL wouldn't know how to resolve the two organization objects in a result:\n\n如果你想要两个同名字段返回的数据，则需要在 GraphQL 中使用 **别名**。下面的 query 不能被正常处理，因为 GraphQL 不知道如何在结果中解析两个 organization 对象：\n\n{title=\"GitHub GraphQL Explorer\",lang=\"json\"}\n~~~~~~~~\n{\n  organization(login: \"the-road-to-learn-react\") {\n    name\n    url\n  }\n  organization(login: \"facebook\") {\n    name\n    url\n  }\n}\n~~~~~~~~\n\nYou'd see an error such as `Field 'organization' has an argument conflict`. Using aliases, you can resolve the result into two blocks:\n\n你会看到一个错误，例如 `Field 'organization' has an argument conflict`。使用别名，可以将结果解析为两个段：\n\n\n{title=\"GitHub GraphQL Explorer\",lang=\"json\"}\n~~~~~~~~\n{\n# leanpub-start-insert\n  book: organization(login: \"the-road-to-learn-react\") {\n# leanpub-end-insert\n    name\n    url\n  }\n# leanpub-start-insert\n  company: organization(login: \"facebook\") {\n# leanpub-end-insert\n    name\n    url\n  }\n}\n~~~~~~~~\n\nThe result should be similar to the following:\n结果应类似如下内容：\n\n{title=\"GitHub GraphQL Explorer\",lang=\"json\"}\n~~~~~~~~\n{\n  \"data\": {\n    \"book\": {\n      \"name\": \"The Road to learn React\",\n      \"url\": \"https://github.com/the-road-to-learn-react\"\n    },\n    \"company\": {\n      \"name\": \"Facebook\",\n      \"url\": \"https://github.com/facebook\"\n    }\n  }\n}\n~~~~~~~~\n\nNext, imagine you want to request multiple fields for both organizations. Re-typing all the fields for each organization would make the query repetitive and verbose, so we'll use **fragments** to extract the query's reusable parts. Fragments are especially useful when your query becomes deeply nested and uses lots of shared fields.\n\n\n接下来，假设你要为两个 organizations 请求多个字段。重新填入每个组织的所有字段会使查询重复且冗长，因此我们可以使用 **片段** 来提取查询的可重用部分。当查询深度嵌套并使用大量共享字段时，片段尤其有用。\n\n{title=\"GitHub GraphQL Explorer\",lang=\"json\"}\n~~~~~~~~\n{\n  book: organization(login: \"the-road-to-learn-react\") {\n# leanpub-start-insert\n    ...sharedOrganizationFields\n# leanpub-end-insert\n  }\n  company: organization(login: \"facebook\") {\n# leanpub-start-insert\n    ...sharedOrganizationFields\n# leanpub-end-insert\n  }\n}\n\n# leanpub-start-insert\nfragment sharedOrganizationFields on Organization {\n  name\n  url\n}\n# leanpub-end-insert\n~~~~~~~~\n\nAs you can see, you have to specify on which **type** of object the fragment should be used. In this case, it is the type `Organization`, which is a custom type defined by GitHub's GraphQL API. This is how you use fragments to extract and reuse parts of your queries. At this point, you might want to open \"Docs\" on the right side of your GraphiQL application. The documentation gives you access to the GraphQL **schema**. A schema exposes the GraphQL API used by your GraphiQL application, which is Github's GraphQL API in this case. It defines the GraphQL **graph** that is accessible via the GraphQL API using queries and mutations. Since it is a graph, objects and fields can be deeply nested in it, which we'll certainly encounter as we move along.\n\n\n如你所见，你必须指定一个具体反应对象**类型**下的片段。在这个例子中，应该是 `Organization` 类型，它是由 GitHub的 GraphQL API定义的自定义类型。这是你使用片段和重用部分构建 query 需要注意的。关于这点，如果你在 GraphiQL 应用程序的右侧打开 “Docs” 面板。你可以看到 GraphQL 定义的 **模式**。模式展示了 GraphiQL 应用程序使用的 GraphQL API，在这个例子中，它是 Github 的 GraphQL API。它定义了 GraphQL **graph**，可以使用 query 和 mutation 对 GraphQL API 进行调用。由于它是一个图形结构，因此对象和字段可以深深地嵌套在其中，随着我们学习的深入，我们会在后面遇到它。\n\n\nSince we're exploring queries and not mutations at the moment, select \"Query\" in the \"Docs\" sidebar. Afterward, traverse the objects and fields of the graph, explore their optional arguments. By clicking them, you can see the accessible fields within those objects in the graph. Some fields are common GraphQL types such as `String`, `Int` and `Boolean`, while some other types are **custom types** like the `Organization` type we used. In addition, you can see whether arguments are required when requesting fields on an object. It can be identified by the exclamation point. For instance, a field with a `String!` argument requires that you pass in a `String` argument whereas a field with a `String` argument doesn't require you to pass it.\n\n由于我们正在探索 query 而不是目前的 mutations，可以在 “Docs” 侧边栏中选择 “query” 标签。然后，对比 graph 中的对象和字段，浏览它们的可选参数。点击它们，你可以在文档中查看这些对象中的可访问字段。有些字段是常见的 GraphQL 类型，如 `String`，`Int`和`Boolean`，而其他一些类型是**自定义类型**，就像我们使用的 `Organization` 类型。此外，通过感叹号标记你可以查看在对象上的字段的参数是否为必填\b。例如，带有 `String！` 参数的字段要求你必须传入 `String` 参数，而带有 `String` 参数的字段则是可选的。\n\n\nIn the previous queries, you provided arguments that identified an organization to your fields; but you **inlined these arguments** in your query. Think about a query like a function, where it's important to provide dynamic arguments to it. That's where the **variable** in GraphQL comes in, as it allows arguments to be extracted as variables from queries. Here's how an organization's `login` argument can be extracted to a dynamic variable:\n\n在之前的 query 中，你提供了用于向字段标识某个 organization 的参数; 但是是通过**内联参数**的方式传入 query 中。考虑像函数一样的 query，为它提供动态参数就重要了。这就是GraphQL 中**变量**的来源，因为它允许从查询中提取参数作为变量。以下示例展示了 organization 的`login`参数如何被提取到动态变量：\n\n{title=\"GitHub GraphQL Explorer\",lang=\"json\"}\n~~~~~~~~\n# leanpub-start-insert\nquery ($organization: String!) {\n  organization(login: $organization) {\n# leanpub-end-insert\n    name\n    url\n  }\n}\n~~~~~~~~\n\nIt defines the `organization` argument as a variable using the `$` sign. Also, the argument's type is defined as a `String`. Since the argument is required to fulfil the query, the `String` type has an exclamation point.\n\n使用`$`符号将`organization`参数定义为变量。此外，参数的类型被定义为`String`。由于参数是完成查询所必需的，因此`String`类型有一个感叹号。\n\n\nIn the \"Query Variables\" panel, the variables would have the following content for providing the `organization` variable as argument for the query:\n\n在 “Query Variables” 面板中，需要像下面这样定义变量内容，用于提供 `organization` 变量作为查询的参数：\n\n{title=\"GitHub GraphQL Explorer\",lang=\"json\"}\n~~~~~~~~\n{\n  \"organization\": \"the-road-to-learn-react\"\n}\n~~~~~~~~\n\nEssentially, variables can be used to create dynamic queries. Following the best practices in GraphQL, we don't need manual string interpolation to structure a dynamic query later on. Instead, we provide a query that uses variables as arguments, which are available when the query is sent as a request to the GraphQL API. You will see both implementations later in your React application.\n\n\n实质上，变量可用于创建动态查询。遵循 GraphQL 中的最佳实践，我们不需要手动插入字符串来构建动态查询。相反，我们提供了一个使用变量作为参数的查询，当查询作为请求发送到 GraphQL API 时可用。稍后你将在 React 应用程序中看到这两种实现。\n\n\nSidenote: You can also define a **default variable** in GraphQL. It has to be a non-required argument, or an error will occur about a **nullable variable** or **non-null variable**. For learning about default variables, we'll make the `organization` argument non-required by omitting the exclamation point. Afterwards, it can be passed as a default variable.\n\n旁注：你还可以在 GraphQL 中定义**默认变量**。要求是非必需参数，否则会出现关于**nullable variable**或**non-null variable**的错误。要了解默认变量，我们将通过省略感叹号来使“organization”参数设为可选。之后，它可以作为默认变量传递。\n\n{title=\"GitHub GraphQL Explorer\",lang=\"json\"}\n~~~~~~~~\n# leanpub-start-insert\nquery ($organization: String = \"the-road-to-learn-react\") {\n  organization(login: $organization) {\n# leanpub-end-insert\n    name\n    url\n  }\n}\n~~~~~~~~\n\nTry to execute the previous query with two sets of variables: once with the `organization` variable that's different from the default variable, and once without defining the `organization` variable.\n\n尝试使用两组变量执行上一个查询：一次使用不同于默认变量的`organization`变量，一次不定义`organization`变量。\n\nNow, let's take a step back to examine the structure of the GraphQL query. After you introduced variables, you encountered the `query` statement in your query structure for the first time. Before, you used the **shorthand version of a query** by omitting the `query` statement, but the `query` statement has to be there now that it's using variables. Try the following query without variables, but with the `query` statement, to verify that the long version of a query works.\n\n\n现在，让我们回过头来检查 GraphQL 查询的结构。在引入变量之后，第一次在查询结构中遇到了 `query` 语句。之前，实际上是通过省略`query`语句的 **查询的简写版本**，但是现在使用变量后， `query` 语句就是必须的了。尝试不带变量的以下查询，但使用`query`语句，来验证查询的非简写版本是否有效。\n\n{title=\"GitHub GraphQL Explorer\",lang=\"json\"}\n~~~~~~~~\n# leanpub-start-insert\nquery {\n# leanpub-end-insert\n  organization(login: \"the-road-to-learn-react\") {\n    name\n    url\n  }\n}\n~~~~~~~~\n\nWhile it's not the shorthand version of the query, it still returns the same data as before, which is the desired outcome. The query statement is also called **operation type** in GraphQL lingua. For instance, it can also be a `mutation` statement. In addition to the operation type, you can also define an **operation name**.\n\n虽然使用了非简写版本，但仍然返回了与之前相同的数据，和我们设想的结果一样。查询语句在 GraphQL 语言中也称为 **操作类型**。例如，它也可以是`mutation` 语句。除了操作类型，你还可以定义**操作名称**。\n\n\n{title=\"GitHub GraphQL Explorer\",lang=\"json\"}\n~~~~~~~~\n# leanpub-start-insert\nquery OrganizationForLearningReact {\n# leanpub-start-insert\n  organization(login: \"the-road-to-learn-react\") {\n    name\n    url\n  }\n}\n~~~~~~~~\n\nCompare it to anonymous and named functions in your code. A **named query** provides a certain level of clarity about what you want to achieve with the query in a declarative way, and it helps with debugging multiple queries, so it should be used when you want to implement an application. Your final query, without showing the variables panel again, could look like the following:\n\n同它与代码中的匿名和命名函数进行对比。**具名查询** 更为清晰，表明你希望以声明方式实现查询，在调试多个查询时非常有帮助，推荐在真实的项目中这样操作。完成查询的最终版本，应该像下面一样：\n\n\n{title=\"GitHub GraphQL Explorer\",lang=\"json\"}\n~~~~~~~~\nquery OrganizationForLearningReact($organization: String!) {\n  organization(login: $organization) {\n    name\n    url\n  }\n}\n~~~~~~~~\n\nSo far you've only accessed one object, an organization with a couple of its fields. The GraphQL schema implements a whole graph, so let's see how to access a **nested object** from within the graph with a query. It's not much different from before:\n\n到目前为止，你只请求了一个对象，一个有几个字段的 organization。 GraphQL 模式能实现一个完整图的结构，所以让我们看看如何使用查询实现**嵌套对象**的获取。写法和之前一样：\n\n{title=\"GitHub GraphQL Explorer\",lang=\"json\"}\n~~~~~~~~\nquery OrganizationForLearningReact(\n  $organization: String!,\n# leanpub-start-insert\n  $repository: String!\n# leanpub-end-insert\n) {\n  organization(login: $organization) {\n    name\n    url\n# leanpub-start-insert\n    repository(name: $repository) {\n      name\n    }\n# leanpub-end-insert\n  }\n}\n~~~~~~~~\n\nProvide a second variable to request a specific repository of the organization:\n\n使用第二个变量来获取 organization 中的特定仓库：\n\n\n{title=\"GitHub GraphQL Explorer\",lang=\"json\"}\n~~~~~~~~\n{\n  \"organization\": \"the-road-to-learn-react\",\n# leanpub-start-insert\n  \"repository\": \"the-road-to-learn-react-chinese\"\n# leanpub-end-insert\n}\n~~~~~~~~\n\nThe organization that teaches about React has translated versions of its content, and one of its repositories teaches students about React in simplified Chinese. Fields in GraphQL can be nested objects again, and you have queried two associated objects from the graph. The requests are made on a graph that can have a deeply nested structure. While exploring the \"Docs\" sidebar in GraphiQL before, you might have seen that you can jump from object to object in the graph.\n\n\n包含 React 教程的一个 organization 含有翻译后的版本，其中一个仓库是简体中文版本。 GraphQL 中的字段可以是嵌套对象，并且你已从 graph 中查询了两个关联对象。通过 graph 可以构建出深层嵌套的查询。在探索 GraphiQL 中的 “Docs” 侧栏之前，你可能已经看到可以在对象跳转到另外一个对象的功能。\n\nA **directive** can be used to query data from your GraphQL API in a more powerful way, and they can be applied to fields and objects. Below, we use two types of directives: an **include directive**, which includes the field when the Boolean type is set to true; and the **skip directive**, which excludes it instead. With these directives, you can apply conditional structures to your shape of query. The following query showcases the include directive, but you can substitute it with the skip directive to achieve the opposite effect:\n\n\n**指令** 可用于以更强大的方式查询GraphQL API中的数据，并且它们可以应用于字段和对象。下面，我们使用两种类型的指令：**include指令**，其中包括布尔类型设置为true时的字段;和**跳过指令**，从返回的数据中排除自身。使用这些指令，你可以将条件结构应用于查询。以下查询展示了include 指令，你也可以使用skip 指令替换它实现相反的效果：\n\n\n{title=\"GitHub GraphQL Explorer\",lang=\"json\"}\n~~~~~~~~\nquery OrganizationForLearningReact(\n  $organization: String!,\n  $repository: String!,\n# leanpub-start-insert\n  $withFork: Boolean!\n# leanpub-end-insert\n) {\n  organization(login: $organization) {\n    name\n    url\n    repository(name: $repository) {\n      name\n# leanpub-start-insert\n      forkCount @include(if: $withFork)\n# leanpub-end-insert\n    }\n  }\n}\n~~~~~~~~\n\nNow you can decide whether to include the information for the `forkCount` field based on provided variables.\n\n现在你可以根据提供的变量决定是否包含`forkCount`字段的信息。\n\n{title=\"GitHub GraphQL Explorer\",lang=\"json\"}\n~~~~~~~~\n{\n  \"organization\": \"the-road-to-learn-react\",\n  \"repository\": \"the-road-to-learn-react-chinese\",\n# leanpub-start-insert\n  \"withFork\": true\n# leanpub-end-insert\n}\n~~~~~~~~\n\nThe query in GraphQL gives you all you need to read data from a GraphQL API. The last section may have felt like a whirlwind of information, so these exercises provide additional practice until you feel comfortable.\n\n\nGraphQL中的 query 能为你提供了从GraphQL API读取数据时的全部功能。不过最后一部分可能让人感到困惑，如果你依然没有掌握，下面提供了一些练习。\n\n### Exercises:\n\n### 练习\n\n* Read more about [the Query in GraphQL](http://graphql.org/learn/queries).\n* Explore GitHub's query schema by using the \"Docs\" sidebar in GraphiQL.\n* Create several queries to request data from GitHub's GraphQL API using the following features:\n  * objects and fields\n  * nested objects\n  * fragments\n  * arguments and variables\n  * operation names\n  * directives\n\n* 阅读更多 [the Query in GraphQL](http://graphql.org/learn/queries).\n* 使用 GraphiQL 中的 “Docs” 侧边栏探索 GitHub 的查询操作\n* 使用以下功能创建一些从GitHub的GraphQL API请求数据的查询：\n  * 对象和字段\n  * 嵌套对象\n  * 片段\n  * 参数和变量\n  * 具名操作\n  * 指令\n\n",
			"settings":
			{
				"buffer_size": 18690,
				"line_ending": "Unix",
				"name": "# GraphQL Fundamentals"
			}
		},
		{
			"contents": "RFC 723X",
			"settings":
			{
				"buffer_size": 8,
				"line_ending": "Unix",
				"name": "RFC 723X"
			}
		},
		{
			"file": "hexo/source/_posts/java/java-performance.md",
			"settings":
			{
				"buffer_size": 399,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "hexo/source/_posts/java/Gradle basic.md",
			"settings":
			{
				"buffer_size": 1400,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"install",
				"Package Control: Advanced Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 136.0,
		"history":
		[
			"ls"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/nlin/www/wiki",
		"/Users/nlin/www/wiki/hexo",
		"/Users/nlin/www/wiki/hexo/source",
		"/Users/nlin/www/wiki/hexo/source/_posts",
		"/Users/nlin/www/wiki/hexo/source/_posts/java"
	],
	"file_history":
	[
		"/Users/nlin/www/wiki/demo/xss/plain.html",
		"/Users/nlin/www/wiki/demo/xss/httponly.php",
		"/Users/nlin/www/wiki/demo/xss/vue.php",
		"/Users/nlin/www/wiki/demo/xss/vue2.php",
		"/Users/nlin/www/wiki/demo/csrf/a.php",
		"/Users/nlin/www/wiki/demo/csrf/b.php",
		"/Users/nlin/www/info.php",
		"/Users/nlin/www/wiki/demo/xss/plain_csp.php",
		"/Users/nlin/www/wiki/hexo/source/_posts/devops/Git commands.md",
		"/Users/nlin/www/wiki/hexo/source/_posts/tool-collections/vim.md",
		"/Users/nlin/www/wiki/docs/collection/tool-collections/vim.html",
		"/Users/nlin/www/wiki/hexo/source/_posts/devops/最实用的linux命令.md",
		"/Users/nlin/www/bulgari_go_live/release/nginx.conf",
		"/Users/nlin/www/bulgari_go_live/release-2018-12-10/Release Plan.txt",
		"/Users/nlin/www/wiki/hexo/source/_posts/devops/ansible.md",
		"/Users/nlin/www/wiki/hexo/source/_posts/storage/Redis foundation.md",
		"/Users/nlin/www/wiki/hexo/source/_posts/mysql/Mysql configuration.md",
		"/Users/nlin/www/wiki/hexo/source/_posts/java/Java kills map.md",
		"/Users/nlin/www/wiki/hexo/source/_posts/java/Jeeweb - Java boilerplate.md",
		"/Users/nlin/www/wiki/hexo/source/_posts/java/cms in java.md",
		"/Users/nlin/www/wiki/demo/email.html",
		"/Users/nlin/www/bulgari_go_live/release/Release Plan",
		"/Users/nlin/www/interview/cruise/config/webpack.config.dev.js",
		"/Users/nlin/www/bulgari_go_live/closeup/nginx.conf",
		"/Users/nlin/www/wiki/hexo/source/_posts/tool-collections/development tool.md",
		"/Users/nlin/www/wiki/hexo/source/_posts/frontend/vue.md",
		"/Users/nlin/www/wiki/hexo/source/_posts/write better email.md",
		"/Users/nlin/www/wiki/hexo/source/_posts/h5/h5 app.md",
		"/Users/nlin/www/wiki/hexo/source/_posts/tool-collections/shortcut for mac.md",
		"/Users/nlin/www/wiki/hexo/source/_posts/h5/Build package with Apache Cordova.md",
		"/Users/nlin/www/wiki/hexo/source/_posts/h5/H5 webapp tech stack.md",
		"/Users/nlin/www/wiki/hexo/source/_posts/frontend/frontend ecologies.md",
		"/Users/nlin/www/wiki/hexo/source/_posts/frontend/Interview for frontend.md",
		"/Users/nlin/www/wiki/hexo/source/_posts/frontend boilderplate.md",
		"/Users/nlin/www/wiki/docs/h5/h5/H5 webapp tech stack/index.html",
		"/Users/nlin/www/wiki/docs/fronted/frontend/frontend ecologies/index.html",
		"/Users/nlin/www/wiki/demo/test.php",
		"/Users/nlin/www/wiki/hexo/source/_posts/security/csp-in-browser.md",
		"/Users/nlin/www/wiki/demo/httponly.php",
		"/Users/nlin/www/wiki/hexo/source/_posts/management/Tech leader check list.md",
		"/Users/nlin/www/wiki/demo/src/JavaExceptionDemo.java",
		"/Users/nlin/www/wiki/hexo/source/_posts/java/java-web-project-overview.md",
		"/Users/nlin/www/wiki/hexo/source/_posts/management/Team leader checklist.md",
		"/Users/nlin/www/wiki/build.sh",
		"/Users/nlin/www/wiki/wiki.sublime-project",
		"/Users/nlin/www/blog-printf-cn/printf.sublime-project",
		"/Users/nlin/www/blog-printf-cn/product/shell/lnmp.sh",
		"/Users/nlin/www/blog-printf-cn/product/urlpublik.html",
		"/Users/nlin/www/blog-printf-cn/product/resume-mobile.html",
		"/Users/nlin/www/blog-printf-cn/product/linne/readmine.md",
		"/Users/nlin/www/blog-printf-cn/product/node_webchat/package.json",
		"/Users/nlin/www/blog-printf-cn/product/node_webchat/views/layout.ejs",
		"/Users/nlin/www/blog-printf-cn/product/codegeneration/index.html",
		"/Users/nlin/www/blog-printf-cn/usr/themes/portal/index.php",
		"/Users/nlin/www/blog-printf-cn/usr/themes/portal/functions.php",
		"/Users/nlin/www/blog-printf-cn/usr/themes/portal/sidebar.php",
		"/Users/nlin/www/blog-printf-cn/usr/themes/portal/header.php",
		"/Users/nlin/www/blog-printf-cn/usr/themes/portal/archive.php",
		"/Users/nlin/www/blog-printf-cn/usr/themes/portal/page.php",
		"/Users/nlin/www/blog-printf-cn/usr/themes/portal/comments.php",
		"/Users/nlin/www/blog-printf-cn/usr/themes/portal/post.php",
		"/Users/nlin/www/tw-homework/README.md",
		"/Users/nlin/www/tw-homework/package.json",
		"/Users/nlin/www/ThoughtWorks_homeWork_毛瑞/app/src/utils/eventBus.js",
		"/Users/nlin/www/ThoughtWorks_homeWork_毛瑞/app/src/utils/index.js",
		"/Users/nlin/www/ThoughtWorks_homeWork_毛瑞/app/src/views/profile.vue",
		"/Users/nlin/www/ThoughtWorks_homeWork_毛瑞/app/src/views/Help.vue",
		"/Users/nlin/www/ThoughtWorks_homeWork_毛瑞/mock-server/README.md",
		"/Users/nlin/www/ThoughtWorks_homeWork_毛瑞/readme.txt",
		"/Users/nlin/www/ThoughtWorks_homeWork_毛瑞/startApp_dev.cmd",
		"/Users/nlin/www/ThoughtWorks_homeWork_毛瑞/app/src/registerServiceWorker.js",
		"/Users/nlin/www/tw-homework/src/components/agent/AgentItem.vue",
		"/Users/nlin/www/tw-homework/src/api/agents.js",
		"/Users/nlin/www/tw-homework/src/index.less",
		"/Users/nlin/www/tw-homework/src/config/index.js",
		"/Users/nlin/www/tw-homework/src/components/layout/Footer.vue",
		"/Users/nlin/www/tw-homework/src/libs/api.request.js",
		"/Users/nlin/www/tw-homework/src/libs/axios.js",
		"/Users/nlin/www/tw-homework/src/App.vue",
		"/Users/nlin/www/tw-homework/tests/unit/common.spec.js",
		"/Users/nlin/www/tw-homework/src/components/common/AppButton.vue",
		"/Users/nlin/www/tw-homework/src/components/common/AppInput.vue",
		"/Users/nlin/www/tw-homework/package-lock.json",
		"/Users/nlin/www/cruise-page/src/views/main/article/agent/Navbar.vue",
		"/Users/nlin/www/cruise-page/src/views/main/footer/FooterContents.vue",
		"/Users/nlin/www/cruise-page/src/components/common/Popup.vue",
		"/Users/nlin/www/cruise-page/src/views/main/aside/History.vue",
		"/Users/nlin/www/cruise-page/src/views/main/article/Agent.vue",
		"/Users/nlin/www/cruise-page/src/views/main/article/agent/Overview.vue",
		"/Users/nlin/www/cruise-page/src/views/main/article/agent/ServerList.vue",
		"/Users/nlin/www/cruise-page/src/http/index.js",
		"/Users/nlin/www/cruise-page/src/App.vue",
		"/Users/nlin/www/cruise-page/src/main.js",
		"/Users/nlin/www/cruise-page/src/views/Main.vue",
		"/Users/nlin/www/cruise-page/src/views/main/header/HeaderContents.vue",
		"/Users/nlin/www/cruise-page/index.html",
		"/Users/nlin/www/cruise-page/package.json",
		"/Users/nlin/www/cruise-page/config/dev.env.js",
		"/Users/nlin/www/cruise-page/README.md",
		"/Users/nlin/www/static-templates/index.html",
		"/Users/nlin/www/static-templates/info-compose-mobile/compose.html",
		"/Users/nlin/www/static-templates/info-compose-mobile/detail.html",
		"/Users/nlin/www/static-templates/info-compose-mobile/index.html",
		"/Users/nlin/www/static-templates/info-compose-mobile/latest.html",
		"/Users/nlin/www/static-templates/info-compose-mobile/my_info.html"
	],
	"find":
	{
		"height": 24.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"VM1024:1",
			"key",
			"<B>",
			"<BR>",
			"BR",
			"撤",
			"80",
			"less",
			"vue",
			"customerMobile"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"id"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "hexo/source/_posts/mysql/Mysql configuration.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1098,
						"regions":
						{
						},
						"selection":
						[
							[
								58,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "hexo/source/_posts/java/java-cocurrent.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4485,
						"regions":
						{
						},
						"selection":
						[
							[
								760,
								760
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2559,
						"regions":
						{
						},
						"selection":
						[
							[
								2559,
								1024
							]
						],
						"settings":
						{
							"auto_name": "$sqlus = \"select * from  feedbackinfo where title=",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18690,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								18690
							]
						],
						"settings":
						{
							"auto_name": "# GraphQL Fundamentals",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6806.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								8
							]
						],
						"settings":
						{
							"auto_name": "RFC 723X",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "hexo/source/_posts/java/java-performance.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 399,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "hexo/source/_posts/java/Gradle basic.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1400,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 36.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "wiki.sublime-project",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"mysql",
				"hexo/source/_posts/mysql/Mysql configuration.md"
			],
			[
				"git.md",
				"hexo/source/_posts/devops/Git commands.md"
			],
			[
				"vim",
				"hexo/source/_posts/tool-collections/vim.md"
			],
			[
				"git",
				"hexo/source/_posts/devops/Git commands.md"
			],
			[
				"java",
				"hexo/source/_posts/java/Java kills map.md"
			],
			[
				"linux",
				"hexo/source/_posts/devops/最实用的linux命令.md"
			],
			[
				"frontend",
				"hexo/source/_posts/frontend boilderplate.md"
			],
			[
				"/agents",
				"src/api/agents.js"
			],
			[
				"pop",
				"src/components/common/Popup.vue"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 292.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
